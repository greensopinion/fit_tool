/// Autogenerated. Do not modify.
///
/// Profile: {{ sdk_version }}
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class {{class_name}} extends DataMessage {

   {{class_name}}(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: {{class_name}}.NAME,
            globalId: {{class_name}}.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
{%- for field_name, field in message.fields_by_name.items() %}
              {{message.field_class_name_by_name[field_name]}}(
                  size: definitionMessage?.getFieldDefinition({{message.field_class_name_by_name[field_name]}}.ID)?.size ?? 0,
                  growable: definitionMessage == null){%- if not loop.last %},{% endif %}
{%- endfor %}
            ]);

  static const ID = {{message.id}};
  static const NAME = '{{message.name}}';

  final bool growable;

  static {{class_name}} fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = {{class_name}}(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

{% for field_name, field in message.fields_by_name.items() %}

  {%- if field.type_.name == 'date_time' %}
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  {%- endif %}
  {{ message.field_property_type_by_name[field_name] }}? get {{message.field_property_name_by_name[field_name]}} {
     final field = getField({{message.field_class_name_by_name[field_name]}}.ID);

{%- if field.type_ and field.type_.base_type.name == 'enum'%}
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return {{message.field_property_type_by_name[field_name]}}Ext.fromValue(value);
    } else {
      return null;
    }
{%- else %}
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
{%- endif %}
  }

 {%- if field.type_.name == 'date_time' %}
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  {%- endif %}
   set {{message.field_property_name_by_name[field_name]}}({{ message.field_property_type_by_name[field_name] }}? value) {
    final field = getField({{message.field_class_name_by_name[field_name]}}.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        {%- if field.type_ and field.type_.base_type.name == 'enum'%}
        field.setValue(0, value.value, subField);
        {%- else %}
        field.setValue(0, value, subField);
        {%- endif %}
      }
    }
  }


{%- for subfield in field.subfields %}

  {{ field.subfield_property_type_by_name[subfield.name] }}? get {{field.subfield_property_name_by_name[subfield.name]}} {
     final field = getField({{message.field_class_name_by_name[field_name]}}.ID);
     final typeField = getField({{message.field_class_name_by_name[subfield.ref_field.name]}}.ID);

     final isSubFieldValid = typeField != null && {{subfield.ref_field_values}}.contains(typeField.getValue());

{%- if field.type_ and field.type_.base_type.name == 'enum'%}
 if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField:subField);
      if (value == null) {
        return null;
      }
      return {{message.field_property_type_by_name[field_name]}}Ext.fromValue(field.getValue());
    } else {
      return null;
    }
{%- else %}
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField:subField);
    } else {
      return null;
    }
{%- endif %}
  }

  set {{field.subfield_property_name_by_name[subfield.name]}}({{ field.subfield_property_type_by_name[subfield.name]}}? value) {
    final field = getField({{message.field_class_name_by_name[field_name]}}.ID);
       if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        {%- if field.type_ and field.type_.base_type.name == 'enum'%}
        field.setValue(0, value.value, subField);
        {%- else %}
        field.setValue(0, value, subField);
        {%- endif %}
      }
    }
  }

{%- endfor %}



{%- endfor %}



}


{% for field_name, field in message.fields_by_name.items() if field_name not in ['timestamp', 'message_index']%}
class {{message.field_class_name_by_name[field_name]}} extends Field {
 {{message.field_class_name_by_name[field_name]}}({int size = 0, bool growable = true})
      : super(
            name: '{{field_name}}',
            id: ID,
            type: BaseType.{{field.base_type.name|upper}},
            offset: {{field.offset}},
            scale: {{field.scale}},
            size: size,
{%- if field.units %}
            units: '{{field.units}}',
{%- endif %}
{%- if field.units %}
            mainTypeName: '{{field.type_.name}}',
{%- endif %}
            growable: growable,
            subFields: [
{%- for subfield in field.subfields %}
       SubField(
                  name: '{{subfield.name}}',
                  type: BaseType.{{subfield.base_type.name|upper}},
                  scale: {{subfield.scale}},
                  offset: {{subfield.offset}},
{%- if subfield.units %}
                  units: '{{subfield.units }}',
{%- endif %}
                  referenceMap: {
{%- for reference_name in subfield.ref_field_map.keys()%}
                  {{message.field_class_name_by_name[reference_name]}}.ID: {{subfield.ref_field_map[reference_name]}} {%- if not loop.last %},{% endif %}
{%- endfor %}
                  }){%- if not loop.last %},{% endif %}
{%- endfor %}
            ]
 );

  static const ID = {{field.def_num}};
}
{%- endfor %}
