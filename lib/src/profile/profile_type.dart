/// Autogenerated. Do not modify.
///
/// Profile: 21.60

enum ProfileType {
  sessionTrigger,
  riderPositionType,
  lungeExerciseName,
  setType,
  segmentSelectionType,
  displayHeart,
  lateralRaiseExerciseName,
  sportBits5,
  cameraEventType,
  sportBits1,
  commTimeoutType,
  fileType,
  side,
  benchPressExerciseName,
  languageBits2,
  schedule,
  workoutHr,
  intensity,
  sportBits3,
  leftRightBalance,
  plyoExerciseName,
  mesgCount,
  language,
  deadliftExerciseName,
  hrZoneCalc,
  messageIndex,
  watchfaceMode,
  timeZone,
  hipSwingExerciseName,
  bikeLightBeamAngleMode,
  tapSensitivity,
  backlightMode,
  hrType,
  bpStatus,
  activityType,
  sportBits4,
  localDeviceType,
  legRaiseExerciseName,
  hipStabilityExerciseName,
  activityClass,
  calfRaiseExerciseName,
  dateTime,
  gender,
  checksum,
  cameraOrientationType,
  coreExerciseName,
  waterType,
  faveroProduct,
  autoSyncFrequency,
  fileFlags,
  displayPosition,
  dayOfWeek,
  sportBits6,
  bodyLocation,
  workoutStepTarget,
  timerTrigger,
  languageBits1,
  exdDescriptors,
  olympicLiftExerciseName,
  timeMode,
  hipRaiseExerciseName,
  diveAlarmType,
  tone,
  manufacturer,
  localDateTime,
  timeIntoDay,
  exdDataUnits,
  bikeLightNetworkConfigType,
  exdDisplayType,
  analogWatchfaceLayout,
  workoutEquipment,
  fitBaseUnit,
  goal,
  pushUpExerciseName,
  rowExerciseName,
  exerciseCategory,
  shrugExerciseName,
  switchType,
  swimStroke,
  squatExerciseName,
  goalSource,
  workoutPower,
  lengthType,
  dateMode,
  event,
  turnType,
  fitnessEquipmentState,
  hyperextensionExerciseName,
  sportBits2,
  weatherSevereType,
  crunchExerciseName,
  antNetwork,
  weatherReport,
  segmentLapStatus,
  supportedExdScreenLayouts,
  autoActivityDetect,
  shoulderStabilityExerciseName,
  powerPhaseType,
  shoulderPressExerciseName,
  goalRecurrence,
  autolapTrigger,
  sportBits0,
  deviceIndex,
  attitudeStage,
  courseCapabilities,
  connectivityCapabilities,
  weight,
  climbProEvent,
  diveGasStatus,
  legCurlExerciseName,
  activitySubtype,
  pwrZoneCalc,
  languageBits0,
  backlightTimeout,
  localtimeIntoDay,
  activityLevel,
  weatherStatus,
  antplusDeviceType,
  tissueModelType,
  sportEvent,
  strokeType,
  flyeExerciseName,
  curlExerciseName,
  cardioExerciseName,
  sitUpExerciseName,
  leftRightBalance100,
  segmentDeleteStatus,
  exdQualifiers,
  activity,
  totalBodyExerciseName,
  weatherSeverity,
  languageBits3,
  eventType,
  sensorType,
  userLocalId,
  segmentLeaderboardType,
  sourceType,
  workoutStepDuration,
  attitudeValidity,
  workoutCapabilities,
  subSport,
  displayOrientation,
  exdLayout,
  tricepsExtensionExerciseName,
  displayMeasure,
  mesgNum,
  diveBacklightMode,
  autoscroll,
  languageBits4,
  runExerciseName,
  warmUpExerciseName,
  pullUpExerciseName,
  carryExerciseName,
  radarThreatLevelType,
  batteryStatus,
  lapTrigger,
  digitalWatchfaceLayout,
  chopExerciseName,
  displayPower,
  sport,
  plankExerciseName,
  garminProduct,
  coursePoint
}
enum FileType {
  device,
  settings,
  sport,
  activity,
  workout,
  course,
  schedules,
  weight,
  totals,
  goals,
  bloodPressure,
  monitoringA,
  activitySummary,
  monitoringDaily,
  monitoringB,
  segment,
  segmentList,
  exdConfiguration,
  mfgRangeMin,
  mfgRangeMax
}

extension FileTypeExt on FileType {
  int get value {
    switch (this) {
      case FileType.device:
        return 1;
      case FileType.settings:
        return 2;
      case FileType.sport:
        return 3;
      case FileType.activity:
        return 4;
      case FileType.workout:
        return 5;
      case FileType.course:
        return 6;
      case FileType.schedules:
        return 7;
      case FileType.weight:
        return 9;
      case FileType.totals:
        return 10;
      case FileType.goals:
        return 11;
      case FileType.bloodPressure:
        return 14;
      case FileType.monitoringA:
        return 15;
      case FileType.activitySummary:
        return 20;
      case FileType.monitoringDaily:
        return 28;
      case FileType.monitoringB:
        return 32;
      case FileType.segment:
        return 34;
      case FileType.segmentList:
        return 35;
      case FileType.exdConfiguration:
        return 40;
      case FileType.mfgRangeMin:
        return 247;
      case FileType.mfgRangeMax:
        return 254;
    }
  }

  static FileType fromValue(int value) {
    switch (value) {
      case 1:
        return FileType.device;
      case 2:
        return FileType.settings;
      case 3:
        return FileType.sport;
      case 4:
        return FileType.activity;
      case 5:
        return FileType.workout;
      case 6:
        return FileType.course;
      case 7:
        return FileType.schedules;
      case 9:
        return FileType.weight;
      case 10:
        return FileType.totals;
      case 11:
        return FileType.goals;
      case 14:
        return FileType.bloodPressure;
      case 15:
        return FileType.monitoringA;
      case 20:
        return FileType.activitySummary;
      case 28:
        return FileType.monitoringDaily;
      case 32:
        return FileType.monitoringB;
      case 34:
        return FileType.segment;
      case 35:
        return FileType.segmentList;
      case 40:
        return FileType.exdConfiguration;
      case 247:
        return FileType.mfgRangeMin;
      case 254:
        return FileType.mfgRangeMax;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum MesgNum {
  fileId,
  capabilities,
  deviceSettings,
  userProfile,
  hrmProfile,
  sdmProfile,
  bikeProfile,
  zonesTarget,
  hrZone,
  powerZone,
  metZone,
  sport,
  goal,
  session,
  lap,
  record,
  event,
  deviceInfo,
  workout,
  workoutStep,
  schedule,
  weightScale,
  course,
  coursePoint,
  totals,
  activity,
  software,
  fileCapabilities,
  mesgCapabilities,
  fieldCapabilities,
  fileCreator,
  bloodPressure,
  speedZone,
  monitoring,
  trainingFile,
  hrv,
  antRx,
  antTx,
  antChannelId,
  length,
  monitoringInfo,
  pad,
  slaveDevice,
  connectivity,
  weatherConditions,
  weatherAlert,
  cadenceZone,
  hr,
  segmentLap,
  memoGlob,
  segmentId,
  segmentLeaderboardEntry,
  segmentPoint,
  segmentFile,
  workoutSession,
  watchfaceSettings,
  gpsMetadata,
  cameraEvent,
  timestampCorrelation,
  gyroscopeData,
  accelerometerData,
  threeDSensorCalibration,
  videoFrame,
  obdiiData,
  nmeaSentence,
  aviationAttitude,
  video,
  videoTitle,
  videoDescription,
  videoClip,
  ohrSettings,
  exdScreenConfiguration,
  exdDataFieldConfiguration,
  exdDataConceptConfiguration,
  fieldDescription,
  developerDataId,
  magnetometerData,
  barometerData,
  oneDSensorCalibration,
  set,
  stressLevel,
  diveSettings,
  diveGas,
  diveAlarm,
  exerciseTitle,
  diveSummary,
  jump,
  climbPro,
  mfgRangeMin,
  mfgRangeMax
}

extension MesgNumExt on MesgNum {
  int get value {
    switch (this) {
      case MesgNum.fileId:
        return 0;
      case MesgNum.capabilities:
        return 1;
      case MesgNum.deviceSettings:
        return 2;
      case MesgNum.userProfile:
        return 3;
      case MesgNum.hrmProfile:
        return 4;
      case MesgNum.sdmProfile:
        return 5;
      case MesgNum.bikeProfile:
        return 6;
      case MesgNum.zonesTarget:
        return 7;
      case MesgNum.hrZone:
        return 8;
      case MesgNum.powerZone:
        return 9;
      case MesgNum.metZone:
        return 10;
      case MesgNum.sport:
        return 12;
      case MesgNum.goal:
        return 15;
      case MesgNum.session:
        return 18;
      case MesgNum.lap:
        return 19;
      case MesgNum.record:
        return 20;
      case MesgNum.event:
        return 21;
      case MesgNum.deviceInfo:
        return 23;
      case MesgNum.workout:
        return 26;
      case MesgNum.workoutStep:
        return 27;
      case MesgNum.schedule:
        return 28;
      case MesgNum.weightScale:
        return 30;
      case MesgNum.course:
        return 31;
      case MesgNum.coursePoint:
        return 32;
      case MesgNum.totals:
        return 33;
      case MesgNum.activity:
        return 34;
      case MesgNum.software:
        return 35;
      case MesgNum.fileCapabilities:
        return 37;
      case MesgNum.mesgCapabilities:
        return 38;
      case MesgNum.fieldCapabilities:
        return 39;
      case MesgNum.fileCreator:
        return 49;
      case MesgNum.bloodPressure:
        return 51;
      case MesgNum.speedZone:
        return 53;
      case MesgNum.monitoring:
        return 55;
      case MesgNum.trainingFile:
        return 72;
      case MesgNum.hrv:
        return 78;
      case MesgNum.antRx:
        return 80;
      case MesgNum.antTx:
        return 81;
      case MesgNum.antChannelId:
        return 82;
      case MesgNum.length:
        return 101;
      case MesgNum.monitoringInfo:
        return 103;
      case MesgNum.pad:
        return 105;
      case MesgNum.slaveDevice:
        return 106;
      case MesgNum.connectivity:
        return 127;
      case MesgNum.weatherConditions:
        return 128;
      case MesgNum.weatherAlert:
        return 129;
      case MesgNum.cadenceZone:
        return 131;
      case MesgNum.hr:
        return 132;
      case MesgNum.segmentLap:
        return 142;
      case MesgNum.memoGlob:
        return 145;
      case MesgNum.segmentId:
        return 148;
      case MesgNum.segmentLeaderboardEntry:
        return 149;
      case MesgNum.segmentPoint:
        return 150;
      case MesgNum.segmentFile:
        return 151;
      case MesgNum.workoutSession:
        return 158;
      case MesgNum.watchfaceSettings:
        return 159;
      case MesgNum.gpsMetadata:
        return 160;
      case MesgNum.cameraEvent:
        return 161;
      case MesgNum.timestampCorrelation:
        return 162;
      case MesgNum.gyroscopeData:
        return 164;
      case MesgNum.accelerometerData:
        return 165;
      case MesgNum.threeDSensorCalibration:
        return 167;
      case MesgNum.videoFrame:
        return 169;
      case MesgNum.obdiiData:
        return 174;
      case MesgNum.nmeaSentence:
        return 177;
      case MesgNum.aviationAttitude:
        return 178;
      case MesgNum.video:
        return 184;
      case MesgNum.videoTitle:
        return 185;
      case MesgNum.videoDescription:
        return 186;
      case MesgNum.videoClip:
        return 187;
      case MesgNum.ohrSettings:
        return 188;
      case MesgNum.exdScreenConfiguration:
        return 200;
      case MesgNum.exdDataFieldConfiguration:
        return 201;
      case MesgNum.exdDataConceptConfiguration:
        return 202;
      case MesgNum.fieldDescription:
        return 206;
      case MesgNum.developerDataId:
        return 207;
      case MesgNum.magnetometerData:
        return 208;
      case MesgNum.barometerData:
        return 209;
      case MesgNum.oneDSensorCalibration:
        return 210;
      case MesgNum.set:
        return 225;
      case MesgNum.stressLevel:
        return 227;
      case MesgNum.diveSettings:
        return 258;
      case MesgNum.diveGas:
        return 259;
      case MesgNum.diveAlarm:
        return 262;
      case MesgNum.exerciseTitle:
        return 264;
      case MesgNum.diveSummary:
        return 268;
      case MesgNum.jump:
        return 285;
      case MesgNum.climbPro:
        return 317;
      case MesgNum.mfgRangeMin:
        return 65280;
      case MesgNum.mfgRangeMax:
        return 65534;
    }
  }

  static MesgNum fromValue(int value) {
    switch (value) {
      case 0:
        return MesgNum.fileId;
      case 1:
        return MesgNum.capabilities;
      case 2:
        return MesgNum.deviceSettings;
      case 3:
        return MesgNum.userProfile;
      case 4:
        return MesgNum.hrmProfile;
      case 5:
        return MesgNum.sdmProfile;
      case 6:
        return MesgNum.bikeProfile;
      case 7:
        return MesgNum.zonesTarget;
      case 8:
        return MesgNum.hrZone;
      case 9:
        return MesgNum.powerZone;
      case 10:
        return MesgNum.metZone;
      case 12:
        return MesgNum.sport;
      case 15:
        return MesgNum.goal;
      case 18:
        return MesgNum.session;
      case 19:
        return MesgNum.lap;
      case 20:
        return MesgNum.record;
      case 21:
        return MesgNum.event;
      case 23:
        return MesgNum.deviceInfo;
      case 26:
        return MesgNum.workout;
      case 27:
        return MesgNum.workoutStep;
      case 28:
        return MesgNum.schedule;
      case 30:
        return MesgNum.weightScale;
      case 31:
        return MesgNum.course;
      case 32:
        return MesgNum.coursePoint;
      case 33:
        return MesgNum.totals;
      case 34:
        return MesgNum.activity;
      case 35:
        return MesgNum.software;
      case 37:
        return MesgNum.fileCapabilities;
      case 38:
        return MesgNum.mesgCapabilities;
      case 39:
        return MesgNum.fieldCapabilities;
      case 49:
        return MesgNum.fileCreator;
      case 51:
        return MesgNum.bloodPressure;
      case 53:
        return MesgNum.speedZone;
      case 55:
        return MesgNum.monitoring;
      case 72:
        return MesgNum.trainingFile;
      case 78:
        return MesgNum.hrv;
      case 80:
        return MesgNum.antRx;
      case 81:
        return MesgNum.antTx;
      case 82:
        return MesgNum.antChannelId;
      case 101:
        return MesgNum.length;
      case 103:
        return MesgNum.monitoringInfo;
      case 105:
        return MesgNum.pad;
      case 106:
        return MesgNum.slaveDevice;
      case 127:
        return MesgNum.connectivity;
      case 128:
        return MesgNum.weatherConditions;
      case 129:
        return MesgNum.weatherAlert;
      case 131:
        return MesgNum.cadenceZone;
      case 132:
        return MesgNum.hr;
      case 142:
        return MesgNum.segmentLap;
      case 145:
        return MesgNum.memoGlob;
      case 148:
        return MesgNum.segmentId;
      case 149:
        return MesgNum.segmentLeaderboardEntry;
      case 150:
        return MesgNum.segmentPoint;
      case 151:
        return MesgNum.segmentFile;
      case 158:
        return MesgNum.workoutSession;
      case 159:
        return MesgNum.watchfaceSettings;
      case 160:
        return MesgNum.gpsMetadata;
      case 161:
        return MesgNum.cameraEvent;
      case 162:
        return MesgNum.timestampCorrelation;
      case 164:
        return MesgNum.gyroscopeData;
      case 165:
        return MesgNum.accelerometerData;
      case 167:
        return MesgNum.threeDSensorCalibration;
      case 169:
        return MesgNum.videoFrame;
      case 174:
        return MesgNum.obdiiData;
      case 177:
        return MesgNum.nmeaSentence;
      case 178:
        return MesgNum.aviationAttitude;
      case 184:
        return MesgNum.video;
      case 185:
        return MesgNum.videoTitle;
      case 186:
        return MesgNum.videoDescription;
      case 187:
        return MesgNum.videoClip;
      case 188:
        return MesgNum.ohrSettings;
      case 200:
        return MesgNum.exdScreenConfiguration;
      case 201:
        return MesgNum.exdDataFieldConfiguration;
      case 202:
        return MesgNum.exdDataConceptConfiguration;
      case 206:
        return MesgNum.fieldDescription;
      case 207:
        return MesgNum.developerDataId;
      case 208:
        return MesgNum.magnetometerData;
      case 209:
        return MesgNum.barometerData;
      case 210:
        return MesgNum.oneDSensorCalibration;
      case 225:
        return MesgNum.set;
      case 227:
        return MesgNum.stressLevel;
      case 258:
        return MesgNum.diveSettings;
      case 259:
        return MesgNum.diveGas;
      case 262:
        return MesgNum.diveAlarm;
      case 264:
        return MesgNum.exerciseTitle;
      case 268:
        return MesgNum.diveSummary;
      case 285:
        return MesgNum.jump;
      case 317:
        return MesgNum.climbPro;
      case 65280:
        return MesgNum.mfgRangeMin;
      case 65534:
        return MesgNum.mfgRangeMax;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Checksum { clear, ok }

extension ChecksumExt on Checksum {
  int get value {
    switch (this) {
      case Checksum.clear:
        return 0;
      case Checksum.ok:
        return 1;
    }
  }

  static Checksum fromValue(int value) {
    switch (value) {
      case 0:
        return Checksum.clear;
      case 1:
        return Checksum.ok;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum FileFlags { read, write, erase }

extension FileFlagsExt on FileFlags {
  int get value {
    switch (this) {
      case FileFlags.read:
        return 2;
      case FileFlags.write:
        return 4;
      case FileFlags.erase:
        return 8;
    }
  }

  static FileFlags fromValue(int value) {
    switch (value) {
      case 2:
        return FileFlags.read;
      case 4:
        return FileFlags.write;
      case 8:
        return FileFlags.erase;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum MesgCount { numPerFile, maxPerFile, maxPerFileType }

extension MesgCountExt on MesgCount {
  int get value {
    switch (this) {
      case MesgCount.numPerFile:
        return 0;
      case MesgCount.maxPerFile:
        return 1;
      case MesgCount.maxPerFileType:
        return 2;
    }
  }

  static MesgCount fromValue(int value) {
    switch (value) {
      case 0:
        return MesgCount.numPerFile;
      case 1:
        return MesgCount.maxPerFile;
      case 2:
        return MesgCount.maxPerFileType;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LocalDateTime { min }

extension LocalDateTimeExt on LocalDateTime {
  int get value {
    switch (this) {
      case LocalDateTime.min:
        return 268435456;
    }
  }

  static LocalDateTime fromValue(int value) {
    switch (value) {
      case 268435456:
        return LocalDateTime.min;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum MessageIndex { selected, reserved, mask }

extension MessageIndexExt on MessageIndex {
  int get value {
    switch (this) {
      case MessageIndex.selected:
        return 32768;
      case MessageIndex.reserved:
        return 28672;
      case MessageIndex.mask:
        return 4095;
    }
  }

  static MessageIndex fromValue(int value) {
    switch (value) {
      case 32768:
        return MessageIndex.selected;
      case 28672:
        return MessageIndex.reserved;
      case 4095:
        return MessageIndex.mask;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DeviceIndex { creator }

extension DeviceIndexExt on DeviceIndex {
  int get value {
    switch (this) {
      case DeviceIndex.creator:
        return 0;
    }
  }

  static DeviceIndex fromValue(int value) {
    switch (value) {
      case 0:
        return DeviceIndex.creator;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Gender { female, male }

extension GenderExt on Gender {
  int get value {
    switch (this) {
      case Gender.female:
        return 0;
      case Gender.male:
        return 1;
    }
  }

  static Gender fromValue(int value) {
    switch (value) {
      case 0:
        return Gender.female;
      case 1:
        return Gender.male;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Language {
  english,
  french,
  italian,
  german,
  spanish,
  croatian,
  czech,
  danish,
  dutch,
  finnish,
  greek,
  hungarian,
  norwegian,
  polish,
  portuguese,
  slovakian,
  slovenian,
  swedish,
  russian,
  turkish,
  latvian,
  ukrainian,
  arabic,
  farsi,
  bulgarian,
  romanian,
  chinese,
  japanese,
  korean,
  taiwanese,
  thai,
  hebrew,
  brazilianPortuguese,
  indonesian,
  malaysian,
  vietnamese,
  burmese,
  mongolian,
  custom
}

extension LanguageExt on Language {
  int get value {
    switch (this) {
      case Language.english:
        return 0;
      case Language.french:
        return 1;
      case Language.italian:
        return 2;
      case Language.german:
        return 3;
      case Language.spanish:
        return 4;
      case Language.croatian:
        return 5;
      case Language.czech:
        return 6;
      case Language.danish:
        return 7;
      case Language.dutch:
        return 8;
      case Language.finnish:
        return 9;
      case Language.greek:
        return 10;
      case Language.hungarian:
        return 11;
      case Language.norwegian:
        return 12;
      case Language.polish:
        return 13;
      case Language.portuguese:
        return 14;
      case Language.slovakian:
        return 15;
      case Language.slovenian:
        return 16;
      case Language.swedish:
        return 17;
      case Language.russian:
        return 18;
      case Language.turkish:
        return 19;
      case Language.latvian:
        return 20;
      case Language.ukrainian:
        return 21;
      case Language.arabic:
        return 22;
      case Language.farsi:
        return 23;
      case Language.bulgarian:
        return 24;
      case Language.romanian:
        return 25;
      case Language.chinese:
        return 26;
      case Language.japanese:
        return 27;
      case Language.korean:
        return 28;
      case Language.taiwanese:
        return 29;
      case Language.thai:
        return 30;
      case Language.hebrew:
        return 31;
      case Language.brazilianPortuguese:
        return 32;
      case Language.indonesian:
        return 33;
      case Language.malaysian:
        return 34;
      case Language.vietnamese:
        return 35;
      case Language.burmese:
        return 36;
      case Language.mongolian:
        return 37;
      case Language.custom:
        return 254;
    }
  }

  static Language fromValue(int value) {
    switch (value) {
      case 0:
        return Language.english;
      case 1:
        return Language.french;
      case 2:
        return Language.italian;
      case 3:
        return Language.german;
      case 4:
        return Language.spanish;
      case 5:
        return Language.croatian;
      case 6:
        return Language.czech;
      case 7:
        return Language.danish;
      case 8:
        return Language.dutch;
      case 9:
        return Language.finnish;
      case 10:
        return Language.greek;
      case 11:
        return Language.hungarian;
      case 12:
        return Language.norwegian;
      case 13:
        return Language.polish;
      case 14:
        return Language.portuguese;
      case 15:
        return Language.slovakian;
      case 16:
        return Language.slovenian;
      case 17:
        return Language.swedish;
      case 18:
        return Language.russian;
      case 19:
        return Language.turkish;
      case 20:
        return Language.latvian;
      case 21:
        return Language.ukrainian;
      case 22:
        return Language.arabic;
      case 23:
        return Language.farsi;
      case 24:
        return Language.bulgarian;
      case 25:
        return Language.romanian;
      case 26:
        return Language.chinese;
      case 27:
        return Language.japanese;
      case 28:
        return Language.korean;
      case 29:
        return Language.taiwanese;
      case 30:
        return Language.thai;
      case 31:
        return Language.hebrew;
      case 32:
        return Language.brazilianPortuguese;
      case 33:
        return Language.indonesian;
      case 34:
        return Language.malaysian;
      case 35:
        return Language.vietnamese;
      case 36:
        return Language.burmese;
      case 37:
        return Language.mongolian;
      case 254:
        return Language.custom;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LanguageBits0 {
  english,
  french,
  italian,
  german,
  spanish,
  croatian,
  czech,
  danish
}

extension LanguageBits0Ext on LanguageBits0 {
  int get value {
    switch (this) {
      case LanguageBits0.english:
        return 1;
      case LanguageBits0.french:
        return 2;
      case LanguageBits0.italian:
        return 4;
      case LanguageBits0.german:
        return 8;
      case LanguageBits0.spanish:
        return 16;
      case LanguageBits0.croatian:
        return 32;
      case LanguageBits0.czech:
        return 64;
      case LanguageBits0.danish:
        return 128;
    }
  }

  static LanguageBits0 fromValue(int value) {
    switch (value) {
      case 1:
        return LanguageBits0.english;
      case 2:
        return LanguageBits0.french;
      case 4:
        return LanguageBits0.italian;
      case 8:
        return LanguageBits0.german;
      case 16:
        return LanguageBits0.spanish;
      case 32:
        return LanguageBits0.croatian;
      case 64:
        return LanguageBits0.czech;
      case 128:
        return LanguageBits0.danish;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LanguageBits1 {
  dutch,
  finnish,
  greek,
  hungarian,
  norwegian,
  polish,
  portuguese,
  slovakian
}

extension LanguageBits1Ext on LanguageBits1 {
  int get value {
    switch (this) {
      case LanguageBits1.dutch:
        return 1;
      case LanguageBits1.finnish:
        return 2;
      case LanguageBits1.greek:
        return 4;
      case LanguageBits1.hungarian:
        return 8;
      case LanguageBits1.norwegian:
        return 16;
      case LanguageBits1.polish:
        return 32;
      case LanguageBits1.portuguese:
        return 64;
      case LanguageBits1.slovakian:
        return 128;
    }
  }

  static LanguageBits1 fromValue(int value) {
    switch (value) {
      case 1:
        return LanguageBits1.dutch;
      case 2:
        return LanguageBits1.finnish;
      case 4:
        return LanguageBits1.greek;
      case 8:
        return LanguageBits1.hungarian;
      case 16:
        return LanguageBits1.norwegian;
      case 32:
        return LanguageBits1.polish;
      case 64:
        return LanguageBits1.portuguese;
      case 128:
        return LanguageBits1.slovakian;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LanguageBits2 {
  slovenian,
  swedish,
  russian,
  turkish,
  latvian,
  ukrainian,
  arabic,
  farsi
}

extension LanguageBits2Ext on LanguageBits2 {
  int get value {
    switch (this) {
      case LanguageBits2.slovenian:
        return 1;
      case LanguageBits2.swedish:
        return 2;
      case LanguageBits2.russian:
        return 4;
      case LanguageBits2.turkish:
        return 8;
      case LanguageBits2.latvian:
        return 16;
      case LanguageBits2.ukrainian:
        return 32;
      case LanguageBits2.arabic:
        return 64;
      case LanguageBits2.farsi:
        return 128;
    }
  }

  static LanguageBits2 fromValue(int value) {
    switch (value) {
      case 1:
        return LanguageBits2.slovenian;
      case 2:
        return LanguageBits2.swedish;
      case 4:
        return LanguageBits2.russian;
      case 8:
        return LanguageBits2.turkish;
      case 16:
        return LanguageBits2.latvian;
      case 32:
        return LanguageBits2.ukrainian;
      case 64:
        return LanguageBits2.arabic;
      case 128:
        return LanguageBits2.farsi;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LanguageBits3 {
  bulgarian,
  romanian,
  chinese,
  japanese,
  korean,
  taiwanese,
  thai,
  hebrew
}

extension LanguageBits3Ext on LanguageBits3 {
  int get value {
    switch (this) {
      case LanguageBits3.bulgarian:
        return 1;
      case LanguageBits3.romanian:
        return 2;
      case LanguageBits3.chinese:
        return 4;
      case LanguageBits3.japanese:
        return 8;
      case LanguageBits3.korean:
        return 16;
      case LanguageBits3.taiwanese:
        return 32;
      case LanguageBits3.thai:
        return 64;
      case LanguageBits3.hebrew:
        return 128;
    }
  }

  static LanguageBits3 fromValue(int value) {
    switch (value) {
      case 1:
        return LanguageBits3.bulgarian;
      case 2:
        return LanguageBits3.romanian;
      case 4:
        return LanguageBits3.chinese;
      case 8:
        return LanguageBits3.japanese;
      case 16:
        return LanguageBits3.korean;
      case 32:
        return LanguageBits3.taiwanese;
      case 64:
        return LanguageBits3.thai;
      case 128:
        return LanguageBits3.hebrew;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LanguageBits4 {
  brazilianPortuguese,
  indonesian,
  malaysian,
  vietnamese,
  burmese,
  mongolian
}

extension LanguageBits4Ext on LanguageBits4 {
  int get value {
    switch (this) {
      case LanguageBits4.brazilianPortuguese:
        return 1;
      case LanguageBits4.indonesian:
        return 2;
      case LanguageBits4.malaysian:
        return 4;
      case LanguageBits4.vietnamese:
        return 8;
      case LanguageBits4.burmese:
        return 16;
      case LanguageBits4.mongolian:
        return 32;
    }
  }

  static LanguageBits4 fromValue(int value) {
    switch (value) {
      case 1:
        return LanguageBits4.brazilianPortuguese;
      case 2:
        return LanguageBits4.indonesian;
      case 4:
        return LanguageBits4.malaysian;
      case 8:
        return LanguageBits4.vietnamese;
      case 16:
        return LanguageBits4.burmese;
      case 32:
        return LanguageBits4.mongolian;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TimeZone {
  almaty,
  bangkok,
  bombay,
  brasilia,
  cairo,
  capeVerdeIs,
  darwin,
  eniwetok,
  fiji,
  hongKong,
  islamabad,
  kabul,
  magadan,
  midAtlantic,
  moscow,
  muscat,
  newfoundland,
  samoa,
  sydney,
  tehran,
  tokyo,
  usAlaska,
  usAtlantic,
  usCentral,
  usEastern,
  usHawaii,
  usMountain,
  usPacific,
  other,
  auckland,
  kathmandu,
  europeWesternWet,
  europeCentralCet,
  europeEasternEet,
  jakarta,
  perth,
  adelaide,
  brisbane,
  tasmania,
  iceland,
  amsterdam,
  athens,
  barcelona,
  berlin,
  brussels,
  budapest,
  copenhagen,
  dublin,
  helsinki,
  lisbon,
  london,
  madrid,
  munich,
  oslo,
  paris,
  prague,
  reykjavik,
  rome,
  stockholm,
  vienna,
  warsaw,
  zurich,
  quebec,
  ontario,
  manitoba,
  saskatchewan,
  alberta,
  britishColumbia,
  boise,
  boston,
  chicago,
  dallas,
  denver,
  kansasCity,
  lasVegas,
  losAngeles,
  miami,
  minneapolis,
  newYork,
  newOrleans,
  phoenix,
  santaFe,
  seattle,
  washingtonDc,
  usArizona,
  chita,
  ekaterinburg,
  irkutsk,
  kaliningrad,
  krasnoyarsk,
  novosibirsk,
  petropavlovskKamchatskiy,
  samara,
  vladivostok,
  mexicoCentral,
  mexicoMountain,
  mexicoPacific,
  capeTown,
  winkhoek,
  lagos,
  riyahd,
  venezuela,
  australiaLh,
  santiago,
  manual,
  automatic
}

extension TimeZoneExt on TimeZone {
  int get value {
    switch (this) {
      case TimeZone.almaty:
        return 0;
      case TimeZone.bangkok:
        return 1;
      case TimeZone.bombay:
        return 2;
      case TimeZone.brasilia:
        return 3;
      case TimeZone.cairo:
        return 4;
      case TimeZone.capeVerdeIs:
        return 5;
      case TimeZone.darwin:
        return 6;
      case TimeZone.eniwetok:
        return 7;
      case TimeZone.fiji:
        return 8;
      case TimeZone.hongKong:
        return 9;
      case TimeZone.islamabad:
        return 10;
      case TimeZone.kabul:
        return 11;
      case TimeZone.magadan:
        return 12;
      case TimeZone.midAtlantic:
        return 13;
      case TimeZone.moscow:
        return 14;
      case TimeZone.muscat:
        return 15;
      case TimeZone.newfoundland:
        return 16;
      case TimeZone.samoa:
        return 17;
      case TimeZone.sydney:
        return 18;
      case TimeZone.tehran:
        return 19;
      case TimeZone.tokyo:
        return 20;
      case TimeZone.usAlaska:
        return 21;
      case TimeZone.usAtlantic:
        return 22;
      case TimeZone.usCentral:
        return 23;
      case TimeZone.usEastern:
        return 24;
      case TimeZone.usHawaii:
        return 25;
      case TimeZone.usMountain:
        return 26;
      case TimeZone.usPacific:
        return 27;
      case TimeZone.other:
        return 28;
      case TimeZone.auckland:
        return 29;
      case TimeZone.kathmandu:
        return 30;
      case TimeZone.europeWesternWet:
        return 31;
      case TimeZone.europeCentralCet:
        return 32;
      case TimeZone.europeEasternEet:
        return 33;
      case TimeZone.jakarta:
        return 34;
      case TimeZone.perth:
        return 35;
      case TimeZone.adelaide:
        return 36;
      case TimeZone.brisbane:
        return 37;
      case TimeZone.tasmania:
        return 38;
      case TimeZone.iceland:
        return 39;
      case TimeZone.amsterdam:
        return 40;
      case TimeZone.athens:
        return 41;
      case TimeZone.barcelona:
        return 42;
      case TimeZone.berlin:
        return 43;
      case TimeZone.brussels:
        return 44;
      case TimeZone.budapest:
        return 45;
      case TimeZone.copenhagen:
        return 46;
      case TimeZone.dublin:
        return 47;
      case TimeZone.helsinki:
        return 48;
      case TimeZone.lisbon:
        return 49;
      case TimeZone.london:
        return 50;
      case TimeZone.madrid:
        return 51;
      case TimeZone.munich:
        return 52;
      case TimeZone.oslo:
        return 53;
      case TimeZone.paris:
        return 54;
      case TimeZone.prague:
        return 55;
      case TimeZone.reykjavik:
        return 56;
      case TimeZone.rome:
        return 57;
      case TimeZone.stockholm:
        return 58;
      case TimeZone.vienna:
        return 59;
      case TimeZone.warsaw:
        return 60;
      case TimeZone.zurich:
        return 61;
      case TimeZone.quebec:
        return 62;
      case TimeZone.ontario:
        return 63;
      case TimeZone.manitoba:
        return 64;
      case TimeZone.saskatchewan:
        return 65;
      case TimeZone.alberta:
        return 66;
      case TimeZone.britishColumbia:
        return 67;
      case TimeZone.boise:
        return 68;
      case TimeZone.boston:
        return 69;
      case TimeZone.chicago:
        return 70;
      case TimeZone.dallas:
        return 71;
      case TimeZone.denver:
        return 72;
      case TimeZone.kansasCity:
        return 73;
      case TimeZone.lasVegas:
        return 74;
      case TimeZone.losAngeles:
        return 75;
      case TimeZone.miami:
        return 76;
      case TimeZone.minneapolis:
        return 77;
      case TimeZone.newYork:
        return 78;
      case TimeZone.newOrleans:
        return 79;
      case TimeZone.phoenix:
        return 80;
      case TimeZone.santaFe:
        return 81;
      case TimeZone.seattle:
        return 82;
      case TimeZone.washingtonDc:
        return 83;
      case TimeZone.usArizona:
        return 84;
      case TimeZone.chita:
        return 85;
      case TimeZone.ekaterinburg:
        return 86;
      case TimeZone.irkutsk:
        return 87;
      case TimeZone.kaliningrad:
        return 88;
      case TimeZone.krasnoyarsk:
        return 89;
      case TimeZone.novosibirsk:
        return 90;
      case TimeZone.petropavlovskKamchatskiy:
        return 91;
      case TimeZone.samara:
        return 92;
      case TimeZone.vladivostok:
        return 93;
      case TimeZone.mexicoCentral:
        return 94;
      case TimeZone.mexicoMountain:
        return 95;
      case TimeZone.mexicoPacific:
        return 96;
      case TimeZone.capeTown:
        return 97;
      case TimeZone.winkhoek:
        return 98;
      case TimeZone.lagos:
        return 99;
      case TimeZone.riyahd:
        return 100;
      case TimeZone.venezuela:
        return 101;
      case TimeZone.australiaLh:
        return 102;
      case TimeZone.santiago:
        return 103;
      case TimeZone.manual:
        return 253;
      case TimeZone.automatic:
        return 254;
    }
  }

  static TimeZone fromValue(int value) {
    switch (value) {
      case 0:
        return TimeZone.almaty;
      case 1:
        return TimeZone.bangkok;
      case 2:
        return TimeZone.bombay;
      case 3:
        return TimeZone.brasilia;
      case 4:
        return TimeZone.cairo;
      case 5:
        return TimeZone.capeVerdeIs;
      case 6:
        return TimeZone.darwin;
      case 7:
        return TimeZone.eniwetok;
      case 8:
        return TimeZone.fiji;
      case 9:
        return TimeZone.hongKong;
      case 10:
        return TimeZone.islamabad;
      case 11:
        return TimeZone.kabul;
      case 12:
        return TimeZone.magadan;
      case 13:
        return TimeZone.midAtlantic;
      case 14:
        return TimeZone.moscow;
      case 15:
        return TimeZone.muscat;
      case 16:
        return TimeZone.newfoundland;
      case 17:
        return TimeZone.samoa;
      case 18:
        return TimeZone.sydney;
      case 19:
        return TimeZone.tehran;
      case 20:
        return TimeZone.tokyo;
      case 21:
        return TimeZone.usAlaska;
      case 22:
        return TimeZone.usAtlantic;
      case 23:
        return TimeZone.usCentral;
      case 24:
        return TimeZone.usEastern;
      case 25:
        return TimeZone.usHawaii;
      case 26:
        return TimeZone.usMountain;
      case 27:
        return TimeZone.usPacific;
      case 28:
        return TimeZone.other;
      case 29:
        return TimeZone.auckland;
      case 30:
        return TimeZone.kathmandu;
      case 31:
        return TimeZone.europeWesternWet;
      case 32:
        return TimeZone.europeCentralCet;
      case 33:
        return TimeZone.europeEasternEet;
      case 34:
        return TimeZone.jakarta;
      case 35:
        return TimeZone.perth;
      case 36:
        return TimeZone.adelaide;
      case 37:
        return TimeZone.brisbane;
      case 38:
        return TimeZone.tasmania;
      case 39:
        return TimeZone.iceland;
      case 40:
        return TimeZone.amsterdam;
      case 41:
        return TimeZone.athens;
      case 42:
        return TimeZone.barcelona;
      case 43:
        return TimeZone.berlin;
      case 44:
        return TimeZone.brussels;
      case 45:
        return TimeZone.budapest;
      case 46:
        return TimeZone.copenhagen;
      case 47:
        return TimeZone.dublin;
      case 48:
        return TimeZone.helsinki;
      case 49:
        return TimeZone.lisbon;
      case 50:
        return TimeZone.london;
      case 51:
        return TimeZone.madrid;
      case 52:
        return TimeZone.munich;
      case 53:
        return TimeZone.oslo;
      case 54:
        return TimeZone.paris;
      case 55:
        return TimeZone.prague;
      case 56:
        return TimeZone.reykjavik;
      case 57:
        return TimeZone.rome;
      case 58:
        return TimeZone.stockholm;
      case 59:
        return TimeZone.vienna;
      case 60:
        return TimeZone.warsaw;
      case 61:
        return TimeZone.zurich;
      case 62:
        return TimeZone.quebec;
      case 63:
        return TimeZone.ontario;
      case 64:
        return TimeZone.manitoba;
      case 65:
        return TimeZone.saskatchewan;
      case 66:
        return TimeZone.alberta;
      case 67:
        return TimeZone.britishColumbia;
      case 68:
        return TimeZone.boise;
      case 69:
        return TimeZone.boston;
      case 70:
        return TimeZone.chicago;
      case 71:
        return TimeZone.dallas;
      case 72:
        return TimeZone.denver;
      case 73:
        return TimeZone.kansasCity;
      case 74:
        return TimeZone.lasVegas;
      case 75:
        return TimeZone.losAngeles;
      case 76:
        return TimeZone.miami;
      case 77:
        return TimeZone.minneapolis;
      case 78:
        return TimeZone.newYork;
      case 79:
        return TimeZone.newOrleans;
      case 80:
        return TimeZone.phoenix;
      case 81:
        return TimeZone.santaFe;
      case 82:
        return TimeZone.seattle;
      case 83:
        return TimeZone.washingtonDc;
      case 84:
        return TimeZone.usArizona;
      case 85:
        return TimeZone.chita;
      case 86:
        return TimeZone.ekaterinburg;
      case 87:
        return TimeZone.irkutsk;
      case 88:
        return TimeZone.kaliningrad;
      case 89:
        return TimeZone.krasnoyarsk;
      case 90:
        return TimeZone.novosibirsk;
      case 91:
        return TimeZone.petropavlovskKamchatskiy;
      case 92:
        return TimeZone.samara;
      case 93:
        return TimeZone.vladivostok;
      case 94:
        return TimeZone.mexicoCentral;
      case 95:
        return TimeZone.mexicoMountain;
      case 96:
        return TimeZone.mexicoPacific;
      case 97:
        return TimeZone.capeTown;
      case 98:
        return TimeZone.winkhoek;
      case 99:
        return TimeZone.lagos;
      case 100:
        return TimeZone.riyahd;
      case 101:
        return TimeZone.venezuela;
      case 102:
        return TimeZone.australiaLh;
      case 103:
        return TimeZone.santiago;
      case 253:
        return TimeZone.manual;
      case 254:
        return TimeZone.automatic;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DisplayMeasure { metric, statute, nautical }

extension DisplayMeasureExt on DisplayMeasure {
  int get value {
    switch (this) {
      case DisplayMeasure.metric:
        return 0;
      case DisplayMeasure.statute:
        return 1;
      case DisplayMeasure.nautical:
        return 2;
    }
  }

  static DisplayMeasure fromValue(int value) {
    switch (value) {
      case 0:
        return DisplayMeasure.metric;
      case 1:
        return DisplayMeasure.statute;
      case 2:
        return DisplayMeasure.nautical;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DisplayHeart { bpm, max, reserve }

extension DisplayHeartExt on DisplayHeart {
  int get value {
    switch (this) {
      case DisplayHeart.bpm:
        return 0;
      case DisplayHeart.max:
        return 1;
      case DisplayHeart.reserve:
        return 2;
    }
  }

  static DisplayHeart fromValue(int value) {
    switch (value) {
      case 0:
        return DisplayHeart.bpm;
      case 1:
        return DisplayHeart.max;
      case 2:
        return DisplayHeart.reserve;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DisplayPower { watts, percentFtp }

extension DisplayPowerExt on DisplayPower {
  int get value {
    switch (this) {
      case DisplayPower.watts:
        return 0;
      case DisplayPower.percentFtp:
        return 1;
    }
  }

  static DisplayPower fromValue(int value) {
    switch (value) {
      case 0:
        return DisplayPower.watts;
      case 1:
        return DisplayPower.percentFtp;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DisplayPosition {
  degree,
  degreeMinute,
  degreeMinuteSecond,
  austrianGrid,
  britishGrid,
  dutchGrid,
  hungarianGrid,
  finnishGrid,
  germanGrid,
  icelandicGrid,
  indonesianEquatorial,
  indonesianIrian,
  indonesianSouthern,
  indiaZone0,
  indiaZoneIA,
  indiaZoneIB,
  indiaZoneIIA,
  indiaZoneIIB,
  indiaZoneIIIA,
  indiaZoneIIIB,
  indiaZoneIVA,
  indiaZoneIVB,
  irishTransverse,
  irishGrid,
  loran,
  maidenheadGrid,
  mgrsGrid,
  newZealandGrid,
  newZealandTransverse,
  qatarGrid,
  modifiedSwedishGrid,
  swedishGrid,
  southAfricanGrid,
  swissGrid,
  taiwanGrid,
  unitedStatesGrid,
  utmUpsGrid,
  westMalayan,
  borneoRso,
  estonianGrid,
  latvianGrid,
  swedishRef99Grid
}

extension DisplayPositionExt on DisplayPosition {
  int get value {
    switch (this) {
      case DisplayPosition.degree:
        return 0;
      case DisplayPosition.degreeMinute:
        return 1;
      case DisplayPosition.degreeMinuteSecond:
        return 2;
      case DisplayPosition.austrianGrid:
        return 3;
      case DisplayPosition.britishGrid:
        return 4;
      case DisplayPosition.dutchGrid:
        return 5;
      case DisplayPosition.hungarianGrid:
        return 6;
      case DisplayPosition.finnishGrid:
        return 7;
      case DisplayPosition.germanGrid:
        return 8;
      case DisplayPosition.icelandicGrid:
        return 9;
      case DisplayPosition.indonesianEquatorial:
        return 10;
      case DisplayPosition.indonesianIrian:
        return 11;
      case DisplayPosition.indonesianSouthern:
        return 12;
      case DisplayPosition.indiaZone0:
        return 13;
      case DisplayPosition.indiaZoneIA:
        return 14;
      case DisplayPosition.indiaZoneIB:
        return 15;
      case DisplayPosition.indiaZoneIIA:
        return 16;
      case DisplayPosition.indiaZoneIIB:
        return 17;
      case DisplayPosition.indiaZoneIIIA:
        return 18;
      case DisplayPosition.indiaZoneIIIB:
        return 19;
      case DisplayPosition.indiaZoneIVA:
        return 20;
      case DisplayPosition.indiaZoneIVB:
        return 21;
      case DisplayPosition.irishTransverse:
        return 22;
      case DisplayPosition.irishGrid:
        return 23;
      case DisplayPosition.loran:
        return 24;
      case DisplayPosition.maidenheadGrid:
        return 25;
      case DisplayPosition.mgrsGrid:
        return 26;
      case DisplayPosition.newZealandGrid:
        return 27;
      case DisplayPosition.newZealandTransverse:
        return 28;
      case DisplayPosition.qatarGrid:
        return 29;
      case DisplayPosition.modifiedSwedishGrid:
        return 30;
      case DisplayPosition.swedishGrid:
        return 31;
      case DisplayPosition.southAfricanGrid:
        return 32;
      case DisplayPosition.swissGrid:
        return 33;
      case DisplayPosition.taiwanGrid:
        return 34;
      case DisplayPosition.unitedStatesGrid:
        return 35;
      case DisplayPosition.utmUpsGrid:
        return 36;
      case DisplayPosition.westMalayan:
        return 37;
      case DisplayPosition.borneoRso:
        return 38;
      case DisplayPosition.estonianGrid:
        return 39;
      case DisplayPosition.latvianGrid:
        return 40;
      case DisplayPosition.swedishRef99Grid:
        return 41;
    }
  }

  static DisplayPosition fromValue(int value) {
    switch (value) {
      case 0:
        return DisplayPosition.degree;
      case 1:
        return DisplayPosition.degreeMinute;
      case 2:
        return DisplayPosition.degreeMinuteSecond;
      case 3:
        return DisplayPosition.austrianGrid;
      case 4:
        return DisplayPosition.britishGrid;
      case 5:
        return DisplayPosition.dutchGrid;
      case 6:
        return DisplayPosition.hungarianGrid;
      case 7:
        return DisplayPosition.finnishGrid;
      case 8:
        return DisplayPosition.germanGrid;
      case 9:
        return DisplayPosition.icelandicGrid;
      case 10:
        return DisplayPosition.indonesianEquatorial;
      case 11:
        return DisplayPosition.indonesianIrian;
      case 12:
        return DisplayPosition.indonesianSouthern;
      case 13:
        return DisplayPosition.indiaZone0;
      case 14:
        return DisplayPosition.indiaZoneIA;
      case 15:
        return DisplayPosition.indiaZoneIB;
      case 16:
        return DisplayPosition.indiaZoneIIA;
      case 17:
        return DisplayPosition.indiaZoneIIB;
      case 18:
        return DisplayPosition.indiaZoneIIIA;
      case 19:
        return DisplayPosition.indiaZoneIIIB;
      case 20:
        return DisplayPosition.indiaZoneIVA;
      case 21:
        return DisplayPosition.indiaZoneIVB;
      case 22:
        return DisplayPosition.irishTransverse;
      case 23:
        return DisplayPosition.irishGrid;
      case 24:
        return DisplayPosition.loran;
      case 25:
        return DisplayPosition.maidenheadGrid;
      case 26:
        return DisplayPosition.mgrsGrid;
      case 27:
        return DisplayPosition.newZealandGrid;
      case 28:
        return DisplayPosition.newZealandTransverse;
      case 29:
        return DisplayPosition.qatarGrid;
      case 30:
        return DisplayPosition.modifiedSwedishGrid;
      case 31:
        return DisplayPosition.swedishGrid;
      case 32:
        return DisplayPosition.southAfricanGrid;
      case 33:
        return DisplayPosition.swissGrid;
      case 34:
        return DisplayPosition.taiwanGrid;
      case 35:
        return DisplayPosition.unitedStatesGrid;
      case 36:
        return DisplayPosition.utmUpsGrid;
      case 37:
        return DisplayPosition.westMalayan;
      case 38:
        return DisplayPosition.borneoRso;
      case 39:
        return DisplayPosition.estonianGrid;
      case 40:
        return DisplayPosition.latvianGrid;
      case 41:
        return DisplayPosition.swedishRef99Grid;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SwitchType { off, on, auto }

extension SwitchTypeExt on SwitchType {
  int get value {
    switch (this) {
      case SwitchType.off:
        return 0;
      case SwitchType.on:
        return 1;
      case SwitchType.auto:
        return 2;
    }
  }

  static SwitchType fromValue(int value) {
    switch (value) {
      case 0:
        return SwitchType.off;
      case 1:
        return SwitchType.on;
      case 2:
        return SwitchType.auto;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Sport {
  generic,
  running,
  cycling,
  transition,
  fitnessEquipment,
  swimming,
  basketball,
  soccer,
  tennis,
  americanFootball,
  training,
  walking,
  crossCountrySkiing,
  alpineSkiing,
  snowboarding,
  rowing,
  mountaineering,
  hiking,
  multisport,
  paddling,
  flying,
  eBiking,
  motorcycling,
  boating,
  driving,
  golf,
  hangGliding,
  horsebackRiding,
  hunting,
  fishing,
  inlineSkating,
  rockClimbing,
  sailing,
  iceSkating,
  skyDiving,
  snowshoeing,
  snowmobiling,
  standUpPaddleboarding,
  surfing,
  wakeboarding,
  waterSkiing,
  kayaking,
  rafting,
  windsurfing,
  kitesurfing,
  tactical,
  jumpmaster,
  boxing,
  floorClimbing,
  diving,
  all
}

extension SportExt on Sport {
  int get value {
    switch (this) {
      case Sport.generic:
        return 0;
      case Sport.running:
        return 1;
      case Sport.cycling:
        return 2;
      case Sport.transition:
        return 3;
      case Sport.fitnessEquipment:
        return 4;
      case Sport.swimming:
        return 5;
      case Sport.basketball:
        return 6;
      case Sport.soccer:
        return 7;
      case Sport.tennis:
        return 8;
      case Sport.americanFootball:
        return 9;
      case Sport.training:
        return 10;
      case Sport.walking:
        return 11;
      case Sport.crossCountrySkiing:
        return 12;
      case Sport.alpineSkiing:
        return 13;
      case Sport.snowboarding:
        return 14;
      case Sport.rowing:
        return 15;
      case Sport.mountaineering:
        return 16;
      case Sport.hiking:
        return 17;
      case Sport.multisport:
        return 18;
      case Sport.paddling:
        return 19;
      case Sport.flying:
        return 20;
      case Sport.eBiking:
        return 21;
      case Sport.motorcycling:
        return 22;
      case Sport.boating:
        return 23;
      case Sport.driving:
        return 24;
      case Sport.golf:
        return 25;
      case Sport.hangGliding:
        return 26;
      case Sport.horsebackRiding:
        return 27;
      case Sport.hunting:
        return 28;
      case Sport.fishing:
        return 29;
      case Sport.inlineSkating:
        return 30;
      case Sport.rockClimbing:
        return 31;
      case Sport.sailing:
        return 32;
      case Sport.iceSkating:
        return 33;
      case Sport.skyDiving:
        return 34;
      case Sport.snowshoeing:
        return 35;
      case Sport.snowmobiling:
        return 36;
      case Sport.standUpPaddleboarding:
        return 37;
      case Sport.surfing:
        return 38;
      case Sport.wakeboarding:
        return 39;
      case Sport.waterSkiing:
        return 40;
      case Sport.kayaking:
        return 41;
      case Sport.rafting:
        return 42;
      case Sport.windsurfing:
        return 43;
      case Sport.kitesurfing:
        return 44;
      case Sport.tactical:
        return 45;
      case Sport.jumpmaster:
        return 46;
      case Sport.boxing:
        return 47;
      case Sport.floorClimbing:
        return 48;
      case Sport.diving:
        return 53;
      case Sport.all:
        return 254;
    }
  }

  static Sport fromValue(int value) {
    switch (value) {
      case 0:
        return Sport.generic;
      case 1:
        return Sport.running;
      case 2:
        return Sport.cycling;
      case 3:
        return Sport.transition;
      case 4:
        return Sport.fitnessEquipment;
      case 5:
        return Sport.swimming;
      case 6:
        return Sport.basketball;
      case 7:
        return Sport.soccer;
      case 8:
        return Sport.tennis;
      case 9:
        return Sport.americanFootball;
      case 10:
        return Sport.training;
      case 11:
        return Sport.walking;
      case 12:
        return Sport.crossCountrySkiing;
      case 13:
        return Sport.alpineSkiing;
      case 14:
        return Sport.snowboarding;
      case 15:
        return Sport.rowing;
      case 16:
        return Sport.mountaineering;
      case 17:
        return Sport.hiking;
      case 18:
        return Sport.multisport;
      case 19:
        return Sport.paddling;
      case 20:
        return Sport.flying;
      case 21:
        return Sport.eBiking;
      case 22:
        return Sport.motorcycling;
      case 23:
        return Sport.boating;
      case 24:
        return Sport.driving;
      case 25:
        return Sport.golf;
      case 26:
        return Sport.hangGliding;
      case 27:
        return Sport.horsebackRiding;
      case 28:
        return Sport.hunting;
      case 29:
        return Sport.fishing;
      case 30:
        return Sport.inlineSkating;
      case 31:
        return Sport.rockClimbing;
      case 32:
        return Sport.sailing;
      case 33:
        return Sport.iceSkating;
      case 34:
        return Sport.skyDiving;
      case 35:
        return Sport.snowshoeing;
      case 36:
        return Sport.snowmobiling;
      case 37:
        return Sport.standUpPaddleboarding;
      case 38:
        return Sport.surfing;
      case 39:
        return Sport.wakeboarding;
      case 40:
        return Sport.waterSkiing;
      case 41:
        return Sport.kayaking;
      case 42:
        return Sport.rafting;
      case 43:
        return Sport.windsurfing;
      case 44:
        return Sport.kitesurfing;
      case 45:
        return Sport.tactical;
      case 46:
        return Sport.jumpmaster;
      case 47:
        return Sport.boxing;
      case 48:
        return Sport.floorClimbing;
      case 53:
        return Sport.diving;
      case 254:
        return Sport.all;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportBits0 {
  generic,
  running,
  cycling,
  transition,
  fitnessEquipment,
  swimming,
  basketball,
  soccer
}

extension SportBits0Ext on SportBits0 {
  int get value {
    switch (this) {
      case SportBits0.generic:
        return 1;
      case SportBits0.running:
        return 2;
      case SportBits0.cycling:
        return 4;
      case SportBits0.transition:
        return 8;
      case SportBits0.fitnessEquipment:
        return 16;
      case SportBits0.swimming:
        return 32;
      case SportBits0.basketball:
        return 64;
      case SportBits0.soccer:
        return 128;
    }
  }

  static SportBits0 fromValue(int value) {
    switch (value) {
      case 1:
        return SportBits0.generic;
      case 2:
        return SportBits0.running;
      case 4:
        return SportBits0.cycling;
      case 8:
        return SportBits0.transition;
      case 16:
        return SportBits0.fitnessEquipment;
      case 32:
        return SportBits0.swimming;
      case 64:
        return SportBits0.basketball;
      case 128:
        return SportBits0.soccer;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportBits1 {
  tennis,
  americanFootball,
  training,
  walking,
  crossCountrySkiing,
  alpineSkiing,
  snowboarding,
  rowing
}

extension SportBits1Ext on SportBits1 {
  int get value {
    switch (this) {
      case SportBits1.tennis:
        return 1;
      case SportBits1.americanFootball:
        return 2;
      case SportBits1.training:
        return 4;
      case SportBits1.walking:
        return 8;
      case SportBits1.crossCountrySkiing:
        return 16;
      case SportBits1.alpineSkiing:
        return 32;
      case SportBits1.snowboarding:
        return 64;
      case SportBits1.rowing:
        return 128;
    }
  }

  static SportBits1 fromValue(int value) {
    switch (value) {
      case 1:
        return SportBits1.tennis;
      case 2:
        return SportBits1.americanFootball;
      case 4:
        return SportBits1.training;
      case 8:
        return SportBits1.walking;
      case 16:
        return SportBits1.crossCountrySkiing;
      case 32:
        return SportBits1.alpineSkiing;
      case 64:
        return SportBits1.snowboarding;
      case 128:
        return SportBits1.rowing;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportBits2 {
  mountaineering,
  hiking,
  multisport,
  paddling,
  flying,
  eBiking,
  motorcycling,
  boating
}

extension SportBits2Ext on SportBits2 {
  int get value {
    switch (this) {
      case SportBits2.mountaineering:
        return 1;
      case SportBits2.hiking:
        return 2;
      case SportBits2.multisport:
        return 4;
      case SportBits2.paddling:
        return 8;
      case SportBits2.flying:
        return 16;
      case SportBits2.eBiking:
        return 32;
      case SportBits2.motorcycling:
        return 64;
      case SportBits2.boating:
        return 128;
    }
  }

  static SportBits2 fromValue(int value) {
    switch (value) {
      case 1:
        return SportBits2.mountaineering;
      case 2:
        return SportBits2.hiking;
      case 4:
        return SportBits2.multisport;
      case 8:
        return SportBits2.paddling;
      case 16:
        return SportBits2.flying;
      case 32:
        return SportBits2.eBiking;
      case 64:
        return SportBits2.motorcycling;
      case 128:
        return SportBits2.boating;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportBits3 {
  driving,
  golf,
  hangGliding,
  horsebackRiding,
  hunting,
  fishing,
  inlineSkating,
  rockClimbing
}

extension SportBits3Ext on SportBits3 {
  int get value {
    switch (this) {
      case SportBits3.driving:
        return 1;
      case SportBits3.golf:
        return 2;
      case SportBits3.hangGliding:
        return 4;
      case SportBits3.horsebackRiding:
        return 8;
      case SportBits3.hunting:
        return 16;
      case SportBits3.fishing:
        return 32;
      case SportBits3.inlineSkating:
        return 64;
      case SportBits3.rockClimbing:
        return 128;
    }
  }

  static SportBits3 fromValue(int value) {
    switch (value) {
      case 1:
        return SportBits3.driving;
      case 2:
        return SportBits3.golf;
      case 4:
        return SportBits3.hangGliding;
      case 8:
        return SportBits3.horsebackRiding;
      case 16:
        return SportBits3.hunting;
      case 32:
        return SportBits3.fishing;
      case 64:
        return SportBits3.inlineSkating;
      case 128:
        return SportBits3.rockClimbing;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportBits4 {
  sailing,
  iceSkating,
  skyDiving,
  snowshoeing,
  snowmobiling,
  standUpPaddleboarding,
  surfing,
  wakeboarding
}

extension SportBits4Ext on SportBits4 {
  int get value {
    switch (this) {
      case SportBits4.sailing:
        return 1;
      case SportBits4.iceSkating:
        return 2;
      case SportBits4.skyDiving:
        return 4;
      case SportBits4.snowshoeing:
        return 8;
      case SportBits4.snowmobiling:
        return 16;
      case SportBits4.standUpPaddleboarding:
        return 32;
      case SportBits4.surfing:
        return 64;
      case SportBits4.wakeboarding:
        return 128;
    }
  }

  static SportBits4 fromValue(int value) {
    switch (value) {
      case 1:
        return SportBits4.sailing;
      case 2:
        return SportBits4.iceSkating;
      case 4:
        return SportBits4.skyDiving;
      case 8:
        return SportBits4.snowshoeing;
      case 16:
        return SportBits4.snowmobiling;
      case 32:
        return SportBits4.standUpPaddleboarding;
      case 64:
        return SportBits4.surfing;
      case 128:
        return SportBits4.wakeboarding;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportBits5 {
  waterSkiing,
  kayaking,
  rafting,
  windsurfing,
  kitesurfing,
  tactical,
  jumpmaster,
  boxing
}

extension SportBits5Ext on SportBits5 {
  int get value {
    switch (this) {
      case SportBits5.waterSkiing:
        return 1;
      case SportBits5.kayaking:
        return 2;
      case SportBits5.rafting:
        return 4;
      case SportBits5.windsurfing:
        return 8;
      case SportBits5.kitesurfing:
        return 16;
      case SportBits5.tactical:
        return 32;
      case SportBits5.jumpmaster:
        return 64;
      case SportBits5.boxing:
        return 128;
    }
  }

  static SportBits5 fromValue(int value) {
    switch (value) {
      case 1:
        return SportBits5.waterSkiing;
      case 2:
        return SportBits5.kayaking;
      case 4:
        return SportBits5.rafting;
      case 8:
        return SportBits5.windsurfing;
      case 16:
        return SportBits5.kitesurfing;
      case 32:
        return SportBits5.tactical;
      case 64:
        return SportBits5.jumpmaster;
      case 128:
        return SportBits5.boxing;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportBits6 { floorClimbing }

extension SportBits6Ext on SportBits6 {
  int get value {
    switch (this) {
      case SportBits6.floorClimbing:
        return 1;
    }
  }

  static SportBits6 fromValue(int value) {
    switch (value) {
      case 1:
        return SportBits6.floorClimbing;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SubSport {
  generic,
  treadmill,
  street,
  trail,
  track,
  spin,
  indoorCycling,
  road,
  mountain,
  downhill,
  recumbent,
  cyclocross,
  handCycling,
  trackCycling,
  indoorRowing,
  elliptical,
  stairClimbing,
  lapSwimming,
  openWater,
  flexibilityTraining,
  strengthTraining,
  warmUp,
  match,
  exercise,
  challenge,
  indoorSkiing,
  cardioTraining,
  indoorWalking,
  eBikeFitness,
  bmx,
  casualWalking,
  speedWalking,
  bikeToRunTransition,
  runToBikeTransition,
  swimToBikeTransition,
  atv,
  motocross,
  backcountry,
  resort,
  rcDrone,
  wingsuit,
  whitewater,
  skateSkiing,
  yoga,
  pilates,
  indoorRunning,
  gravelCycling,
  eBikeMountain,
  commuting,
  mixedSurface,
  navigate,
  trackMe,
  map,
  singleGasDiving,
  multiGasDiving,
  gaugeDiving,
  apneaDiving,
  apneaHunting,
  virtualActivity,
  obstacle,
  sailRace,
  all
}

extension SubSportExt on SubSport {
  int get value {
    switch (this) {
      case SubSport.generic:
        return 0;
      case SubSport.treadmill:
        return 1;
      case SubSport.street:
        return 2;
      case SubSport.trail:
        return 3;
      case SubSport.track:
        return 4;
      case SubSport.spin:
        return 5;
      case SubSport.indoorCycling:
        return 6;
      case SubSport.road:
        return 7;
      case SubSport.mountain:
        return 8;
      case SubSport.downhill:
        return 9;
      case SubSport.recumbent:
        return 10;
      case SubSport.cyclocross:
        return 11;
      case SubSport.handCycling:
        return 12;
      case SubSport.trackCycling:
        return 13;
      case SubSport.indoorRowing:
        return 14;
      case SubSport.elliptical:
        return 15;
      case SubSport.stairClimbing:
        return 16;
      case SubSport.lapSwimming:
        return 17;
      case SubSport.openWater:
        return 18;
      case SubSport.flexibilityTraining:
        return 19;
      case SubSport.strengthTraining:
        return 20;
      case SubSport.warmUp:
        return 21;
      case SubSport.match:
        return 22;
      case SubSport.exercise:
        return 23;
      case SubSport.challenge:
        return 24;
      case SubSport.indoorSkiing:
        return 25;
      case SubSport.cardioTraining:
        return 26;
      case SubSport.indoorWalking:
        return 27;
      case SubSport.eBikeFitness:
        return 28;
      case SubSport.bmx:
        return 29;
      case SubSport.casualWalking:
        return 30;
      case SubSport.speedWalking:
        return 31;
      case SubSport.bikeToRunTransition:
        return 32;
      case SubSport.runToBikeTransition:
        return 33;
      case SubSport.swimToBikeTransition:
        return 34;
      case SubSport.atv:
        return 35;
      case SubSport.motocross:
        return 36;
      case SubSport.backcountry:
        return 37;
      case SubSport.resort:
        return 38;
      case SubSport.rcDrone:
        return 39;
      case SubSport.wingsuit:
        return 40;
      case SubSport.whitewater:
        return 41;
      case SubSport.skateSkiing:
        return 42;
      case SubSport.yoga:
        return 43;
      case SubSport.pilates:
        return 44;
      case SubSport.indoorRunning:
        return 45;
      case SubSport.gravelCycling:
        return 46;
      case SubSport.eBikeMountain:
        return 47;
      case SubSport.commuting:
        return 48;
      case SubSport.mixedSurface:
        return 49;
      case SubSport.navigate:
        return 50;
      case SubSport.trackMe:
        return 51;
      case SubSport.map:
        return 52;
      case SubSport.singleGasDiving:
        return 53;
      case SubSport.multiGasDiving:
        return 54;
      case SubSport.gaugeDiving:
        return 55;
      case SubSport.apneaDiving:
        return 56;
      case SubSport.apneaHunting:
        return 57;
      case SubSport.virtualActivity:
        return 58;
      case SubSport.obstacle:
        return 59;
      case SubSport.sailRace:
        return 65;
      case SubSport.all:
        return 254;
    }
  }

  static SubSport fromValue(int value) {
    switch (value) {
      case 0:
        return SubSport.generic;
      case 1:
        return SubSport.treadmill;
      case 2:
        return SubSport.street;
      case 3:
        return SubSport.trail;
      case 4:
        return SubSport.track;
      case 5:
        return SubSport.spin;
      case 6:
        return SubSport.indoorCycling;
      case 7:
        return SubSport.road;
      case 8:
        return SubSport.mountain;
      case 9:
        return SubSport.downhill;
      case 10:
        return SubSport.recumbent;
      case 11:
        return SubSport.cyclocross;
      case 12:
        return SubSport.handCycling;
      case 13:
        return SubSport.trackCycling;
      case 14:
        return SubSport.indoorRowing;
      case 15:
        return SubSport.elliptical;
      case 16:
        return SubSport.stairClimbing;
      case 17:
        return SubSport.lapSwimming;
      case 18:
        return SubSport.openWater;
      case 19:
        return SubSport.flexibilityTraining;
      case 20:
        return SubSport.strengthTraining;
      case 21:
        return SubSport.warmUp;
      case 22:
        return SubSport.match;
      case 23:
        return SubSport.exercise;
      case 24:
        return SubSport.challenge;
      case 25:
        return SubSport.indoorSkiing;
      case 26:
        return SubSport.cardioTraining;
      case 27:
        return SubSport.indoorWalking;
      case 28:
        return SubSport.eBikeFitness;
      case 29:
        return SubSport.bmx;
      case 30:
        return SubSport.casualWalking;
      case 31:
        return SubSport.speedWalking;
      case 32:
        return SubSport.bikeToRunTransition;
      case 33:
        return SubSport.runToBikeTransition;
      case 34:
        return SubSport.swimToBikeTransition;
      case 35:
        return SubSport.atv;
      case 36:
        return SubSport.motocross;
      case 37:
        return SubSport.backcountry;
      case 38:
        return SubSport.resort;
      case 39:
        return SubSport.rcDrone;
      case 40:
        return SubSport.wingsuit;
      case 41:
        return SubSport.whitewater;
      case 42:
        return SubSport.skateSkiing;
      case 43:
        return SubSport.yoga;
      case 44:
        return SubSport.pilates;
      case 45:
        return SubSport.indoorRunning;
      case 46:
        return SubSport.gravelCycling;
      case 47:
        return SubSport.eBikeMountain;
      case 48:
        return SubSport.commuting;
      case 49:
        return SubSport.mixedSurface;
      case 50:
        return SubSport.navigate;
      case 51:
        return SubSport.trackMe;
      case 52:
        return SubSport.map;
      case 53:
        return SubSport.singleGasDiving;
      case 54:
        return SubSport.multiGasDiving;
      case 55:
        return SubSport.gaugeDiving;
      case 56:
        return SubSport.apneaDiving;
      case 57:
        return SubSport.apneaHunting;
      case 58:
        return SubSport.virtualActivity;
      case 59:
        return SubSport.obstacle;
      case 65:
        return SubSport.sailRace;
      case 254:
        return SubSport.all;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SportEvent {
  uncategorized,
  geocaching,
  fitness,
  recreation,
  race,
  specialEvent,
  training,
  transportation,
  touring
}

extension SportEventExt on SportEvent {
  int get value {
    switch (this) {
      case SportEvent.uncategorized:
        return 0;
      case SportEvent.geocaching:
        return 1;
      case SportEvent.fitness:
        return 2;
      case SportEvent.recreation:
        return 3;
      case SportEvent.race:
        return 4;
      case SportEvent.specialEvent:
        return 5;
      case SportEvent.training:
        return 6;
      case SportEvent.transportation:
        return 7;
      case SportEvent.touring:
        return 8;
    }
  }

  static SportEvent fromValue(int value) {
    switch (value) {
      case 0:
        return SportEvent.uncategorized;
      case 1:
        return SportEvent.geocaching;
      case 2:
        return SportEvent.fitness;
      case 3:
        return SportEvent.recreation;
      case 4:
        return SportEvent.race;
      case 5:
        return SportEvent.specialEvent;
      case 6:
        return SportEvent.training;
      case 7:
        return SportEvent.transportation;
      case 8:
        return SportEvent.touring;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Activity { manual, autoMultiSport }

extension ActivityExt on Activity {
  int get value {
    switch (this) {
      case Activity.manual:
        return 0;
      case Activity.autoMultiSport:
        return 1;
    }
  }

  static Activity fromValue(int value) {
    switch (value) {
      case 0:
        return Activity.manual;
      case 1:
        return Activity.autoMultiSport;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Intensity { active, rest, warmup, cooldown, recovery, interval, other }

extension IntensityExt on Intensity {
  int get value {
    switch (this) {
      case Intensity.active:
        return 0;
      case Intensity.rest:
        return 1;
      case Intensity.warmup:
        return 2;
      case Intensity.cooldown:
        return 3;
      case Intensity.recovery:
        return 4;
      case Intensity.interval:
        return 5;
      case Intensity.other:
        return 6;
    }
  }

  static Intensity fromValue(int value) {
    switch (value) {
      case 0:
        return Intensity.active;
      case 1:
        return Intensity.rest;
      case 2:
        return Intensity.warmup;
      case 3:
        return Intensity.cooldown;
      case 4:
        return Intensity.recovery;
      case 5:
        return Intensity.interval;
      case 6:
        return Intensity.other;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SessionTrigger { activityEnd, manual, autoMultiSport, fitnessEquipment }

extension SessionTriggerExt on SessionTrigger {
  int get value {
    switch (this) {
      case SessionTrigger.activityEnd:
        return 0;
      case SessionTrigger.manual:
        return 1;
      case SessionTrigger.autoMultiSport:
        return 2;
      case SessionTrigger.fitnessEquipment:
        return 3;
    }
  }

  static SessionTrigger fromValue(int value) {
    switch (value) {
      case 0:
        return SessionTrigger.activityEnd;
      case 1:
        return SessionTrigger.manual;
      case 2:
        return SessionTrigger.autoMultiSport;
      case 3:
        return SessionTrigger.fitnessEquipment;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AutolapTrigger {
  time,
  distance,
  positionStart,
  positionLap,
  positionWaypoint,
  positionMarked,
  off
}

extension AutolapTriggerExt on AutolapTrigger {
  int get value {
    switch (this) {
      case AutolapTrigger.time:
        return 0;
      case AutolapTrigger.distance:
        return 1;
      case AutolapTrigger.positionStart:
        return 2;
      case AutolapTrigger.positionLap:
        return 3;
      case AutolapTrigger.positionWaypoint:
        return 4;
      case AutolapTrigger.positionMarked:
        return 5;
      case AutolapTrigger.off:
        return 6;
    }
  }

  static AutolapTrigger fromValue(int value) {
    switch (value) {
      case 0:
        return AutolapTrigger.time;
      case 1:
        return AutolapTrigger.distance;
      case 2:
        return AutolapTrigger.positionStart;
      case 3:
        return AutolapTrigger.positionLap;
      case 4:
        return AutolapTrigger.positionWaypoint;
      case 5:
        return AutolapTrigger.positionMarked;
      case 6:
        return AutolapTrigger.off;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LapTrigger {
  manual,
  time,
  distance,
  positionStart,
  positionLap,
  positionWaypoint,
  positionMarked,
  sessionEnd,
  fitnessEquipment
}

extension LapTriggerExt on LapTrigger {
  int get value {
    switch (this) {
      case LapTrigger.manual:
        return 0;
      case LapTrigger.time:
        return 1;
      case LapTrigger.distance:
        return 2;
      case LapTrigger.positionStart:
        return 3;
      case LapTrigger.positionLap:
        return 4;
      case LapTrigger.positionWaypoint:
        return 5;
      case LapTrigger.positionMarked:
        return 6;
      case LapTrigger.sessionEnd:
        return 7;
      case LapTrigger.fitnessEquipment:
        return 8;
    }
  }

  static LapTrigger fromValue(int value) {
    switch (value) {
      case 0:
        return LapTrigger.manual;
      case 1:
        return LapTrigger.time;
      case 2:
        return LapTrigger.distance;
      case 3:
        return LapTrigger.positionStart;
      case 4:
        return LapTrigger.positionLap;
      case 5:
        return LapTrigger.positionWaypoint;
      case 6:
        return LapTrigger.positionMarked;
      case 7:
        return LapTrigger.sessionEnd;
      case 8:
        return LapTrigger.fitnessEquipment;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TimeMode {
  hour12,
  hour24,
  military,
  hour12WithSeconds,
  hour24WithSeconds,
  utc
}

extension TimeModeExt on TimeMode {
  int get value {
    switch (this) {
      case TimeMode.hour12:
        return 0;
      case TimeMode.hour24:
        return 1;
      case TimeMode.military:
        return 2;
      case TimeMode.hour12WithSeconds:
        return 3;
      case TimeMode.hour24WithSeconds:
        return 4;
      case TimeMode.utc:
        return 5;
    }
  }

  static TimeMode fromValue(int value) {
    switch (value) {
      case 0:
        return TimeMode.hour12;
      case 1:
        return TimeMode.hour24;
      case 2:
        return TimeMode.military;
      case 3:
        return TimeMode.hour12WithSeconds;
      case 4:
        return TimeMode.hour24WithSeconds;
      case 5:
        return TimeMode.utc;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BacklightMode {
  off,
  manual,
  keyAndMessages,
  autoBrightness,
  smartNotifications,
  keyAndMessagesNight,
  keyAndMessagesAndSmartNotifications
}

extension BacklightModeExt on BacklightMode {
  int get value {
    switch (this) {
      case BacklightMode.off:
        return 0;
      case BacklightMode.manual:
        return 1;
      case BacklightMode.keyAndMessages:
        return 2;
      case BacklightMode.autoBrightness:
        return 3;
      case BacklightMode.smartNotifications:
        return 4;
      case BacklightMode.keyAndMessagesNight:
        return 5;
      case BacklightMode.keyAndMessagesAndSmartNotifications:
        return 6;
    }
  }

  static BacklightMode fromValue(int value) {
    switch (value) {
      case 0:
        return BacklightMode.off;
      case 1:
        return BacklightMode.manual;
      case 2:
        return BacklightMode.keyAndMessages;
      case 3:
        return BacklightMode.autoBrightness;
      case 4:
        return BacklightMode.smartNotifications;
      case 5:
        return BacklightMode.keyAndMessagesNight;
      case 6:
        return BacklightMode.keyAndMessagesAndSmartNotifications;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DateMode { dayMonth, monthDay }

extension DateModeExt on DateMode {
  int get value {
    switch (this) {
      case DateMode.dayMonth:
        return 0;
      case DateMode.monthDay:
        return 1;
    }
  }

  static DateMode fromValue(int value) {
    switch (value) {
      case 0:
        return DateMode.dayMonth;
      case 1:
        return DateMode.monthDay;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BacklightTimeout { infinite }

extension BacklightTimeoutExt on BacklightTimeout {
  int get value {
    switch (this) {
      case BacklightTimeout.infinite:
        return 0;
    }
  }

  static BacklightTimeout fromValue(int value) {
    switch (value) {
      case 0:
        return BacklightTimeout.infinite;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Event {
  timer,
  workout,
  workoutStep,
  powerDown,
  powerUp,
  offCourse,
  session,
  lap,
  coursePoint,
  battery,
  virtualPartnerPace,
  hrHighAlert,
  hrLowAlert,
  speedHighAlert,
  speedLowAlert,
  cadHighAlert,
  cadLowAlert,
  powerHighAlert,
  powerLowAlert,
  recoveryHr,
  batteryLow,
  timeDurationAlert,
  distanceDurationAlert,
  calorieDurationAlert,
  activity,
  fitnessEquipment,
  length,
  userMarker,
  sportPoint,
  calibration,
  frontGearChange,
  rearGearChange,
  riderPositionChange,
  elevHighAlert,
  elevLowAlert,
  commTimeout,
  radarThreatAlert
}

extension EventExt on Event {
  int get value {
    switch (this) {
      case Event.timer:
        return 0;
      case Event.workout:
        return 3;
      case Event.workoutStep:
        return 4;
      case Event.powerDown:
        return 5;
      case Event.powerUp:
        return 6;
      case Event.offCourse:
        return 7;
      case Event.session:
        return 8;
      case Event.lap:
        return 9;
      case Event.coursePoint:
        return 10;
      case Event.battery:
        return 11;
      case Event.virtualPartnerPace:
        return 12;
      case Event.hrHighAlert:
        return 13;
      case Event.hrLowAlert:
        return 14;
      case Event.speedHighAlert:
        return 15;
      case Event.speedLowAlert:
        return 16;
      case Event.cadHighAlert:
        return 17;
      case Event.cadLowAlert:
        return 18;
      case Event.powerHighAlert:
        return 19;
      case Event.powerLowAlert:
        return 20;
      case Event.recoveryHr:
        return 21;
      case Event.batteryLow:
        return 22;
      case Event.timeDurationAlert:
        return 23;
      case Event.distanceDurationAlert:
        return 24;
      case Event.calorieDurationAlert:
        return 25;
      case Event.activity:
        return 26;
      case Event.fitnessEquipment:
        return 27;
      case Event.length:
        return 28;
      case Event.userMarker:
        return 32;
      case Event.sportPoint:
        return 33;
      case Event.calibration:
        return 36;
      case Event.frontGearChange:
        return 42;
      case Event.rearGearChange:
        return 43;
      case Event.riderPositionChange:
        return 44;
      case Event.elevHighAlert:
        return 45;
      case Event.elevLowAlert:
        return 46;
      case Event.commTimeout:
        return 47;
      case Event.radarThreatAlert:
        return 75;
    }
  }

  static Event fromValue(int value) {
    switch (value) {
      case 0:
        return Event.timer;
      case 3:
        return Event.workout;
      case 4:
        return Event.workoutStep;
      case 5:
        return Event.powerDown;
      case 6:
        return Event.powerUp;
      case 7:
        return Event.offCourse;
      case 8:
        return Event.session;
      case 9:
        return Event.lap;
      case 10:
        return Event.coursePoint;
      case 11:
        return Event.battery;
      case 12:
        return Event.virtualPartnerPace;
      case 13:
        return Event.hrHighAlert;
      case 14:
        return Event.hrLowAlert;
      case 15:
        return Event.speedHighAlert;
      case 16:
        return Event.speedLowAlert;
      case 17:
        return Event.cadHighAlert;
      case 18:
        return Event.cadLowAlert;
      case 19:
        return Event.powerHighAlert;
      case 20:
        return Event.powerLowAlert;
      case 21:
        return Event.recoveryHr;
      case 22:
        return Event.batteryLow;
      case 23:
        return Event.timeDurationAlert;
      case 24:
        return Event.distanceDurationAlert;
      case 25:
        return Event.calorieDurationAlert;
      case 26:
        return Event.activity;
      case 27:
        return Event.fitnessEquipment;
      case 28:
        return Event.length;
      case 32:
        return Event.userMarker;
      case 33:
        return Event.sportPoint;
      case 36:
        return Event.calibration;
      case 42:
        return Event.frontGearChange;
      case 43:
        return Event.rearGearChange;
      case 44:
        return Event.riderPositionChange;
      case 45:
        return Event.elevHighAlert;
      case 46:
        return Event.elevLowAlert;
      case 47:
        return Event.commTimeout;
      case 75:
        return Event.radarThreatAlert;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum EventType {
  start,
  stop,
  consecutiveDepreciated,
  marker,
  stopAll,
  beginDepreciated,
  endDepreciated,
  endAllDepreciated,
  stopDisable,
  stopDisableAll
}

extension EventTypeExt on EventType {
  int get value {
    switch (this) {
      case EventType.start:
        return 0;
      case EventType.stop:
        return 1;
      case EventType.consecutiveDepreciated:
        return 2;
      case EventType.marker:
        return 3;
      case EventType.stopAll:
        return 4;
      case EventType.beginDepreciated:
        return 5;
      case EventType.endDepreciated:
        return 6;
      case EventType.endAllDepreciated:
        return 7;
      case EventType.stopDisable:
        return 8;
      case EventType.stopDisableAll:
        return 9;
    }
  }

  static EventType fromValue(int value) {
    switch (value) {
      case 0:
        return EventType.start;
      case 1:
        return EventType.stop;
      case 2:
        return EventType.consecutiveDepreciated;
      case 3:
        return EventType.marker;
      case 4:
        return EventType.stopAll;
      case 5:
        return EventType.beginDepreciated;
      case 6:
        return EventType.endDepreciated;
      case 7:
        return EventType.endAllDepreciated;
      case 8:
        return EventType.stopDisable;
      case 9:
        return EventType.stopDisableAll;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TimerTrigger { manual, auto, fitnessEquipment }

extension TimerTriggerExt on TimerTrigger {
  int get value {
    switch (this) {
      case TimerTrigger.manual:
        return 0;
      case TimerTrigger.auto:
        return 1;
      case TimerTrigger.fitnessEquipment:
        return 2;
    }
  }

  static TimerTrigger fromValue(int value) {
    switch (value) {
      case 0:
        return TimerTrigger.manual;
      case 1:
        return TimerTrigger.auto;
      case 2:
        return TimerTrigger.fitnessEquipment;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum FitnessEquipmentState { ready, inUse, paused, unknown }

extension FitnessEquipmentStateExt on FitnessEquipmentState {
  int get value {
    switch (this) {
      case FitnessEquipmentState.ready:
        return 0;
      case FitnessEquipmentState.inUse:
        return 1;
      case FitnessEquipmentState.paused:
        return 2;
      case FitnessEquipmentState.unknown:
        return 3;
    }
  }

  static FitnessEquipmentState fromValue(int value) {
    switch (value) {
      case 0:
        return FitnessEquipmentState.ready;
      case 1:
        return FitnessEquipmentState.inUse;
      case 2:
        return FitnessEquipmentState.paused;
      case 3:
        return FitnessEquipmentState.unknown;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Tone { off, tone, vibrate, toneAndVibrate }

extension ToneExt on Tone {
  int get value {
    switch (this) {
      case Tone.off:
        return 0;
      case Tone.tone:
        return 1;
      case Tone.vibrate:
        return 2;
      case Tone.toneAndVibrate:
        return 3;
    }
  }

  static Tone fromValue(int value) {
    switch (value) {
      case 0:
        return Tone.off;
      case 1:
        return Tone.tone;
      case 2:
        return Tone.vibrate;
      case 3:
        return Tone.toneAndVibrate;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Autoscroll { none, slow, medium, fast }

extension AutoscrollExt on Autoscroll {
  int get value {
    switch (this) {
      case Autoscroll.none:
        return 0;
      case Autoscroll.slow:
        return 1;
      case Autoscroll.medium:
        return 2;
      case Autoscroll.fast:
        return 3;
    }
  }

  static Autoscroll fromValue(int value) {
    switch (value) {
      case 0:
        return Autoscroll.none;
      case 1:
        return Autoscroll.slow;
      case 2:
        return Autoscroll.medium;
      case 3:
        return Autoscroll.fast;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ActivityClass { level, levelMax, athlete }

extension ActivityClassExt on ActivityClass {
  int get value {
    switch (this) {
      case ActivityClass.level:
        return 127;
      case ActivityClass.levelMax:
        return 100;
      case ActivityClass.athlete:
        return 128;
    }
  }

  static ActivityClass fromValue(int value) {
    switch (value) {
      case 127:
        return ActivityClass.level;
      case 100:
        return ActivityClass.levelMax;
      case 128:
        return ActivityClass.athlete;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum HrZoneCalc { custom, percentMaxHr, percentHrr }

extension HrZoneCalcExt on HrZoneCalc {
  int get value {
    switch (this) {
      case HrZoneCalc.custom:
        return 0;
      case HrZoneCalc.percentMaxHr:
        return 1;
      case HrZoneCalc.percentHrr:
        return 2;
    }
  }

  static HrZoneCalc fromValue(int value) {
    switch (value) {
      case 0:
        return HrZoneCalc.custom;
      case 1:
        return HrZoneCalc.percentMaxHr;
      case 2:
        return HrZoneCalc.percentHrr;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum PwrZoneCalc { custom, percentFtp }

extension PwrZoneCalcExt on PwrZoneCalc {
  int get value {
    switch (this) {
      case PwrZoneCalc.custom:
        return 0;
      case PwrZoneCalc.percentFtp:
        return 1;
    }
  }

  static PwrZoneCalc fromValue(int value) {
    switch (value) {
      case 0:
        return PwrZoneCalc.custom;
      case 1:
        return PwrZoneCalc.percentFtp;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WorkoutStepDuration {
  time,
  distance,
  hrLessThan,
  hrGreaterThan,
  calories,
  open,
  repeatUntilStepsCmplt,
  repeatUntilTime,
  repeatUntilDistance,
  repeatUntilCalories,
  repeatUntilHrLessThan,
  repeatUntilHrGreaterThan,
  repeatUntilPowerLessThan,
  repeatUntilPowerGreaterThan,
  powerLessThan,
  powerGreaterThan,
  trainingPeaksTss,
  repeatUntilPowerLastLapLessThan,
  repeatUntilMaxPowerLastLapLessThan,
  power3sLessThan,
  power10sLessThan,
  power30sLessThan,
  power3sGreaterThan,
  power10sGreaterThan,
  power30sGreaterThan,
  powerLapLessThan,
  powerLapGreaterThan,
  repeatUntilTrainingPeaksTss,
  repetitionTime,
  reps,
  timeOnly
}

extension WorkoutStepDurationExt on WorkoutStepDuration {
  int get value {
    switch (this) {
      case WorkoutStepDuration.time:
        return 0;
      case WorkoutStepDuration.distance:
        return 1;
      case WorkoutStepDuration.hrLessThan:
        return 2;
      case WorkoutStepDuration.hrGreaterThan:
        return 3;
      case WorkoutStepDuration.calories:
        return 4;
      case WorkoutStepDuration.open:
        return 5;
      case WorkoutStepDuration.repeatUntilStepsCmplt:
        return 6;
      case WorkoutStepDuration.repeatUntilTime:
        return 7;
      case WorkoutStepDuration.repeatUntilDistance:
        return 8;
      case WorkoutStepDuration.repeatUntilCalories:
        return 9;
      case WorkoutStepDuration.repeatUntilHrLessThan:
        return 10;
      case WorkoutStepDuration.repeatUntilHrGreaterThan:
        return 11;
      case WorkoutStepDuration.repeatUntilPowerLessThan:
        return 12;
      case WorkoutStepDuration.repeatUntilPowerGreaterThan:
        return 13;
      case WorkoutStepDuration.powerLessThan:
        return 14;
      case WorkoutStepDuration.powerGreaterThan:
        return 15;
      case WorkoutStepDuration.trainingPeaksTss:
        return 16;
      case WorkoutStepDuration.repeatUntilPowerLastLapLessThan:
        return 17;
      case WorkoutStepDuration.repeatUntilMaxPowerLastLapLessThan:
        return 18;
      case WorkoutStepDuration.power3sLessThan:
        return 19;
      case WorkoutStepDuration.power10sLessThan:
        return 20;
      case WorkoutStepDuration.power30sLessThan:
        return 21;
      case WorkoutStepDuration.power3sGreaterThan:
        return 22;
      case WorkoutStepDuration.power10sGreaterThan:
        return 23;
      case WorkoutStepDuration.power30sGreaterThan:
        return 24;
      case WorkoutStepDuration.powerLapLessThan:
        return 25;
      case WorkoutStepDuration.powerLapGreaterThan:
        return 26;
      case WorkoutStepDuration.repeatUntilTrainingPeaksTss:
        return 27;
      case WorkoutStepDuration.repetitionTime:
        return 28;
      case WorkoutStepDuration.reps:
        return 29;
      case WorkoutStepDuration.timeOnly:
        return 31;
    }
  }

  static WorkoutStepDuration fromValue(int value) {
    switch (value) {
      case 0:
        return WorkoutStepDuration.time;
      case 1:
        return WorkoutStepDuration.distance;
      case 2:
        return WorkoutStepDuration.hrLessThan;
      case 3:
        return WorkoutStepDuration.hrGreaterThan;
      case 4:
        return WorkoutStepDuration.calories;
      case 5:
        return WorkoutStepDuration.open;
      case 6:
        return WorkoutStepDuration.repeatUntilStepsCmplt;
      case 7:
        return WorkoutStepDuration.repeatUntilTime;
      case 8:
        return WorkoutStepDuration.repeatUntilDistance;
      case 9:
        return WorkoutStepDuration.repeatUntilCalories;
      case 10:
        return WorkoutStepDuration.repeatUntilHrLessThan;
      case 11:
        return WorkoutStepDuration.repeatUntilHrGreaterThan;
      case 12:
        return WorkoutStepDuration.repeatUntilPowerLessThan;
      case 13:
        return WorkoutStepDuration.repeatUntilPowerGreaterThan;
      case 14:
        return WorkoutStepDuration.powerLessThan;
      case 15:
        return WorkoutStepDuration.powerGreaterThan;
      case 16:
        return WorkoutStepDuration.trainingPeaksTss;
      case 17:
        return WorkoutStepDuration.repeatUntilPowerLastLapLessThan;
      case 18:
        return WorkoutStepDuration.repeatUntilMaxPowerLastLapLessThan;
      case 19:
        return WorkoutStepDuration.power3sLessThan;
      case 20:
        return WorkoutStepDuration.power10sLessThan;
      case 21:
        return WorkoutStepDuration.power30sLessThan;
      case 22:
        return WorkoutStepDuration.power3sGreaterThan;
      case 23:
        return WorkoutStepDuration.power10sGreaterThan;
      case 24:
        return WorkoutStepDuration.power30sGreaterThan;
      case 25:
        return WorkoutStepDuration.powerLapLessThan;
      case 26:
        return WorkoutStepDuration.powerLapGreaterThan;
      case 27:
        return WorkoutStepDuration.repeatUntilTrainingPeaksTss;
      case 28:
        return WorkoutStepDuration.repetitionTime;
      case 29:
        return WorkoutStepDuration.reps;
      case 31:
        return WorkoutStepDuration.timeOnly;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WorkoutStepTarget {
  speed,
  heartRate,
  open,
  cadence,
  power,
  grade,
  resistance,
  power3s,
  power10s,
  power30s,
  powerLap,
  swimStroke,
  speedLap,
  heartRateLap
}

extension WorkoutStepTargetExt on WorkoutStepTarget {
  int get value {
    switch (this) {
      case WorkoutStepTarget.speed:
        return 0;
      case WorkoutStepTarget.heartRate:
        return 1;
      case WorkoutStepTarget.open:
        return 2;
      case WorkoutStepTarget.cadence:
        return 3;
      case WorkoutStepTarget.power:
        return 4;
      case WorkoutStepTarget.grade:
        return 5;
      case WorkoutStepTarget.resistance:
        return 6;
      case WorkoutStepTarget.power3s:
        return 7;
      case WorkoutStepTarget.power10s:
        return 8;
      case WorkoutStepTarget.power30s:
        return 9;
      case WorkoutStepTarget.powerLap:
        return 10;
      case WorkoutStepTarget.swimStroke:
        return 11;
      case WorkoutStepTarget.speedLap:
        return 12;
      case WorkoutStepTarget.heartRateLap:
        return 13;
    }
  }

  static WorkoutStepTarget fromValue(int value) {
    switch (value) {
      case 0:
        return WorkoutStepTarget.speed;
      case 1:
        return WorkoutStepTarget.heartRate;
      case 2:
        return WorkoutStepTarget.open;
      case 3:
        return WorkoutStepTarget.cadence;
      case 4:
        return WorkoutStepTarget.power;
      case 5:
        return WorkoutStepTarget.grade;
      case 6:
        return WorkoutStepTarget.resistance;
      case 7:
        return WorkoutStepTarget.power3s;
      case 8:
        return WorkoutStepTarget.power10s;
      case 9:
        return WorkoutStepTarget.power30s;
      case 10:
        return WorkoutStepTarget.powerLap;
      case 11:
        return WorkoutStepTarget.swimStroke;
      case 12:
        return WorkoutStepTarget.speedLap;
      case 13:
        return WorkoutStepTarget.heartRateLap;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Goal { time, distance, calories, frequency, steps, ascent, activeMinutes }

extension GoalExt on Goal {
  int get value {
    switch (this) {
      case Goal.time:
        return 0;
      case Goal.distance:
        return 1;
      case Goal.calories:
        return 2;
      case Goal.frequency:
        return 3;
      case Goal.steps:
        return 4;
      case Goal.ascent:
        return 5;
      case Goal.activeMinutes:
        return 6;
    }
  }

  static Goal fromValue(int value) {
    switch (value) {
      case 0:
        return Goal.time;
      case 1:
        return Goal.distance;
      case 2:
        return Goal.calories;
      case 3:
        return Goal.frequency;
      case 4:
        return Goal.steps;
      case 5:
        return Goal.ascent;
      case 6:
        return Goal.activeMinutes;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum GoalRecurrence { off, daily, weekly, monthly, yearly, custom }

extension GoalRecurrenceExt on GoalRecurrence {
  int get value {
    switch (this) {
      case GoalRecurrence.off:
        return 0;
      case GoalRecurrence.daily:
        return 1;
      case GoalRecurrence.weekly:
        return 2;
      case GoalRecurrence.monthly:
        return 3;
      case GoalRecurrence.yearly:
        return 4;
      case GoalRecurrence.custom:
        return 5;
    }
  }

  static GoalRecurrence fromValue(int value) {
    switch (value) {
      case 0:
        return GoalRecurrence.off;
      case 1:
        return GoalRecurrence.daily;
      case 2:
        return GoalRecurrence.weekly;
      case 3:
        return GoalRecurrence.monthly;
      case 4:
        return GoalRecurrence.yearly;
      case 5:
        return GoalRecurrence.custom;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum GoalSource { auto, community, user }

extension GoalSourceExt on GoalSource {
  int get value {
    switch (this) {
      case GoalSource.auto:
        return 0;
      case GoalSource.community:
        return 1;
      case GoalSource.user:
        return 2;
    }
  }

  static GoalSource fromValue(int value) {
    switch (value) {
      case 0:
        return GoalSource.auto;
      case 1:
        return GoalSource.community;
      case 2:
        return GoalSource.user;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Schedule { workout, course }

extension ScheduleExt on Schedule {
  int get value {
    switch (this) {
      case Schedule.workout:
        return 0;
      case Schedule.course:
        return 1;
    }
  }

  static Schedule fromValue(int value) {
    switch (value) {
      case 0:
        return Schedule.workout;
      case 1:
        return Schedule.course;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CoursePoint {
  generic,
  summit,
  valley,
  water,
  food,
  danger,
  left,
  right,
  straight,
  firstAid,
  fourthCategory,
  thirdCategory,
  secondCategory,
  firstCategory,
  horsCategory,
  sprint,
  leftFork,
  rightFork,
  middleFork,
  slightLeft,
  sharpLeft,
  slightRight,
  sharpRight,
  uTurn,
  segmentStart,
  segmentEnd
}

extension CoursePointExt on CoursePoint {
  int get value {
    switch (this) {
      case CoursePoint.generic:
        return 0;
      case CoursePoint.summit:
        return 1;
      case CoursePoint.valley:
        return 2;
      case CoursePoint.water:
        return 3;
      case CoursePoint.food:
        return 4;
      case CoursePoint.danger:
        return 5;
      case CoursePoint.left:
        return 6;
      case CoursePoint.right:
        return 7;
      case CoursePoint.straight:
        return 8;
      case CoursePoint.firstAid:
        return 9;
      case CoursePoint.fourthCategory:
        return 10;
      case CoursePoint.thirdCategory:
        return 11;
      case CoursePoint.secondCategory:
        return 12;
      case CoursePoint.firstCategory:
        return 13;
      case CoursePoint.horsCategory:
        return 14;
      case CoursePoint.sprint:
        return 15;
      case CoursePoint.leftFork:
        return 16;
      case CoursePoint.rightFork:
        return 17;
      case CoursePoint.middleFork:
        return 18;
      case CoursePoint.slightLeft:
        return 19;
      case CoursePoint.sharpLeft:
        return 20;
      case CoursePoint.slightRight:
        return 21;
      case CoursePoint.sharpRight:
        return 22;
      case CoursePoint.uTurn:
        return 23;
      case CoursePoint.segmentStart:
        return 24;
      case CoursePoint.segmentEnd:
        return 25;
    }
  }

  static CoursePoint fromValue(int value) {
    switch (value) {
      case 0:
        return CoursePoint.generic;
      case 1:
        return CoursePoint.summit;
      case 2:
        return CoursePoint.valley;
      case 3:
        return CoursePoint.water;
      case 4:
        return CoursePoint.food;
      case 5:
        return CoursePoint.danger;
      case 6:
        return CoursePoint.left;
      case 7:
        return CoursePoint.right;
      case 8:
        return CoursePoint.straight;
      case 9:
        return CoursePoint.firstAid;
      case 10:
        return CoursePoint.fourthCategory;
      case 11:
        return CoursePoint.thirdCategory;
      case 12:
        return CoursePoint.secondCategory;
      case 13:
        return CoursePoint.firstCategory;
      case 14:
        return CoursePoint.horsCategory;
      case 15:
        return CoursePoint.sprint;
      case 16:
        return CoursePoint.leftFork;
      case 17:
        return CoursePoint.rightFork;
      case 18:
        return CoursePoint.middleFork;
      case 19:
        return CoursePoint.slightLeft;
      case 20:
        return CoursePoint.sharpLeft;
      case 21:
        return CoursePoint.slightRight;
      case 22:
        return CoursePoint.sharpRight;
      case 23:
        return CoursePoint.uTurn;
      case 24:
        return CoursePoint.segmentStart;
      case 25:
        return CoursePoint.segmentEnd;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Manufacturer {
  garmin,
  garminFr405Antfs,
  zephyr,
  dayton,
  idt,
  srm,
  quarq,
  ibike,
  saris,
  sparkHk,
  tanita,
  echowell,
  dynastreamOem,
  nautilus,
  dynastream,
  timex,
  metrigear,
  xelic,
  beurer,
  cardiosport,
  aAndD,
  hmm,
  suunto,
  thitaElektronik,
  gpulse,
  cleanMobile,
  pedalBrain,
  peaksware,
  saxonar,
  lemondFitness,
  dexcom,
  wahooFitness,
  octaneFitness,
  archinoetics,
  theHurtBox,
  citizenSystems,
  magellan,
  osynce,
  holux,
  concept2,
  shimano,
  oneGiantLeap,
  aceSensor,
  brimBrothers,
  xplova,
  perceptionDigital,
  bf1systems,
  pioneer,
  spantec,
  metalogics,
  n4iiiis,
  seikoEpson,
  seikoEpsonOem,
  iforPowell,
  maxwellGuider,
  starTrac,
  breakaway,
  alatechTechnologyLtd,
  mioTechnologyEurope,
  rotor,
  geonaute,
  idBike,
  specialized,
  wtek,
  physicalEnterprises,
  northPoleEngineering,
  bkool,
  cateye,
  stagesCycling,
  sigmasport,
  tomtom,
  peripedal,
  wattbike,
  moxy,
  ciclosport,
  powerbahn,
  acornProjectsAps,
  lifebeam,
  bontrager,
  wellgo,
  scosche,
  magura,
  woodway,
  elite,
  nielsenKellerman,
  dkCity,
  tacx,
  directionTechnology,
  magtonic,
  n1partcarbon,
  insideRideTechnologies,
  soundOfMotion,
  stryd,
  icg,
  miPulse,
  bsxAthletics,
  look,
  campagnoloSrl,
  bodyBikeSmart,
  praxisworks,
  limitsTechnology,
  topactionTechnology,
  cosinuss,
  fitcare,
  magene,
  giantManufacturingCo,
  tigrasport,
  salutron,
  technogym,
  brytonSensors,
  latitudeLimited,
  soaringTechnology,
  igpsport,
  thinkrider,
  gopherSport,
  waterrower,
  orangetheory,
  inpeak,
  kinetic,
  johnsonHealthTech,
  polarElectro,
  seesense,
  nciTechnology,
  iqsquare,
  leomo,
  ifitCom,
  corosByte,
  versaDesign,
  chileaf,
  cycplus,
  gravaaByte,
  sigeyi,
  coospo,
  development,
  healthandlife,
  lezyne,
  scribeLabs,
  zwift,
  watteam,
  recon,
  faveroElectronics,
  dynovelo,
  strava,
  precor,
  bryton,
  sram,
  navman,
  cobi,
  spivi,
  mioMagellan,
  evesports,
  sensitivusGauge,
  podoon,
  lifeTimeFitness,
  falcoEMotors,
  minoura,
  cycliq,
  luxottica,
  trainerRoad,
  theSufferfest,
  fullspeedahead,
  virtualtraining,
  feedbacksports,
  omata,
  vdo,
  magneticdays,
  hammerhead,
  kineticByKurt,
  shapelog,
  dabuziduo,
  jetblack,
  coros,
  virtugo,
  velosense,
  cycligentinc,
  trailforks,
  mahleEbikemotion,
  nurvv,
  microprogram,
  zone5cloud,
  greenteg,
  yamahaMotors,
  whoop,
  gravaa,
  onelap,
  monarkExercise,
  form,
  decathlon,
  syncros,
  actigraphcorp
}

extension ManufacturerExt on Manufacturer {
  int get value {
    switch (this) {
      case Manufacturer.garmin:
        return 1;
      case Manufacturer.garminFr405Antfs:
        return 2;
      case Manufacturer.zephyr:
        return 3;
      case Manufacturer.dayton:
        return 4;
      case Manufacturer.idt:
        return 5;
      case Manufacturer.srm:
        return 6;
      case Manufacturer.quarq:
        return 7;
      case Manufacturer.ibike:
        return 8;
      case Manufacturer.saris:
        return 9;
      case Manufacturer.sparkHk:
        return 10;
      case Manufacturer.tanita:
        return 11;
      case Manufacturer.echowell:
        return 12;
      case Manufacturer.dynastreamOem:
        return 13;
      case Manufacturer.nautilus:
        return 14;
      case Manufacturer.dynastream:
        return 15;
      case Manufacturer.timex:
        return 16;
      case Manufacturer.metrigear:
        return 17;
      case Manufacturer.xelic:
        return 18;
      case Manufacturer.beurer:
        return 19;
      case Manufacturer.cardiosport:
        return 20;
      case Manufacturer.aAndD:
        return 21;
      case Manufacturer.hmm:
        return 22;
      case Manufacturer.suunto:
        return 23;
      case Manufacturer.thitaElektronik:
        return 24;
      case Manufacturer.gpulse:
        return 25;
      case Manufacturer.cleanMobile:
        return 26;
      case Manufacturer.pedalBrain:
        return 27;
      case Manufacturer.peaksware:
        return 28;
      case Manufacturer.saxonar:
        return 29;
      case Manufacturer.lemondFitness:
        return 30;
      case Manufacturer.dexcom:
        return 31;
      case Manufacturer.wahooFitness:
        return 32;
      case Manufacturer.octaneFitness:
        return 33;
      case Manufacturer.archinoetics:
        return 34;
      case Manufacturer.theHurtBox:
        return 35;
      case Manufacturer.citizenSystems:
        return 36;
      case Manufacturer.magellan:
        return 37;
      case Manufacturer.osynce:
        return 38;
      case Manufacturer.holux:
        return 39;
      case Manufacturer.concept2:
        return 40;
      case Manufacturer.shimano:
        return 41;
      case Manufacturer.oneGiantLeap:
        return 42;
      case Manufacturer.aceSensor:
        return 43;
      case Manufacturer.brimBrothers:
        return 44;
      case Manufacturer.xplova:
        return 45;
      case Manufacturer.perceptionDigital:
        return 46;
      case Manufacturer.bf1systems:
        return 47;
      case Manufacturer.pioneer:
        return 48;
      case Manufacturer.spantec:
        return 49;
      case Manufacturer.metalogics:
        return 50;
      case Manufacturer.n4iiiis:
        return 51;
      case Manufacturer.seikoEpson:
        return 52;
      case Manufacturer.seikoEpsonOem:
        return 53;
      case Manufacturer.iforPowell:
        return 54;
      case Manufacturer.maxwellGuider:
        return 55;
      case Manufacturer.starTrac:
        return 56;
      case Manufacturer.breakaway:
        return 57;
      case Manufacturer.alatechTechnologyLtd:
        return 58;
      case Manufacturer.mioTechnologyEurope:
        return 59;
      case Manufacturer.rotor:
        return 60;
      case Manufacturer.geonaute:
        return 61;
      case Manufacturer.idBike:
        return 62;
      case Manufacturer.specialized:
        return 63;
      case Manufacturer.wtek:
        return 64;
      case Manufacturer.physicalEnterprises:
        return 65;
      case Manufacturer.northPoleEngineering:
        return 66;
      case Manufacturer.bkool:
        return 67;
      case Manufacturer.cateye:
        return 68;
      case Manufacturer.stagesCycling:
        return 69;
      case Manufacturer.sigmasport:
        return 70;
      case Manufacturer.tomtom:
        return 71;
      case Manufacturer.peripedal:
        return 72;
      case Manufacturer.wattbike:
        return 73;
      case Manufacturer.moxy:
        return 76;
      case Manufacturer.ciclosport:
        return 77;
      case Manufacturer.powerbahn:
        return 78;
      case Manufacturer.acornProjectsAps:
        return 79;
      case Manufacturer.lifebeam:
        return 80;
      case Manufacturer.bontrager:
        return 81;
      case Manufacturer.wellgo:
        return 82;
      case Manufacturer.scosche:
        return 83;
      case Manufacturer.magura:
        return 84;
      case Manufacturer.woodway:
        return 85;
      case Manufacturer.elite:
        return 86;
      case Manufacturer.nielsenKellerman:
        return 87;
      case Manufacturer.dkCity:
        return 88;
      case Manufacturer.tacx:
        return 89;
      case Manufacturer.directionTechnology:
        return 90;
      case Manufacturer.magtonic:
        return 91;
      case Manufacturer.n1partcarbon:
        return 92;
      case Manufacturer.insideRideTechnologies:
        return 93;
      case Manufacturer.soundOfMotion:
        return 94;
      case Manufacturer.stryd:
        return 95;
      case Manufacturer.icg:
        return 96;
      case Manufacturer.miPulse:
        return 97;
      case Manufacturer.bsxAthletics:
        return 98;
      case Manufacturer.look:
        return 99;
      case Manufacturer.campagnoloSrl:
        return 100;
      case Manufacturer.bodyBikeSmart:
        return 101;
      case Manufacturer.praxisworks:
        return 102;
      case Manufacturer.limitsTechnology:
        return 103;
      case Manufacturer.topactionTechnology:
        return 104;
      case Manufacturer.cosinuss:
        return 105;
      case Manufacturer.fitcare:
        return 106;
      case Manufacturer.magene:
        return 107;
      case Manufacturer.giantManufacturingCo:
        return 108;
      case Manufacturer.tigrasport:
        return 109;
      case Manufacturer.salutron:
        return 110;
      case Manufacturer.technogym:
        return 111;
      case Manufacturer.brytonSensors:
        return 112;
      case Manufacturer.latitudeLimited:
        return 113;
      case Manufacturer.soaringTechnology:
        return 114;
      case Manufacturer.igpsport:
        return 115;
      case Manufacturer.thinkrider:
        return 116;
      case Manufacturer.gopherSport:
        return 117;
      case Manufacturer.waterrower:
        return 118;
      case Manufacturer.orangetheory:
        return 119;
      case Manufacturer.inpeak:
        return 120;
      case Manufacturer.kinetic:
        return 121;
      case Manufacturer.johnsonHealthTech:
        return 122;
      case Manufacturer.polarElectro:
        return 123;
      case Manufacturer.seesense:
        return 124;
      case Manufacturer.nciTechnology:
        return 125;
      case Manufacturer.iqsquare:
        return 126;
      case Manufacturer.leomo:
        return 127;
      case Manufacturer.ifitCom:
        return 128;
      case Manufacturer.corosByte:
        return 129;
      case Manufacturer.versaDesign:
        return 130;
      case Manufacturer.chileaf:
        return 131;
      case Manufacturer.cycplus:
        return 132;
      case Manufacturer.gravaaByte:
        return 133;
      case Manufacturer.sigeyi:
        return 134;
      case Manufacturer.coospo:
        return 135;
      case Manufacturer.development:
        return 255;
      case Manufacturer.healthandlife:
        return 257;
      case Manufacturer.lezyne:
        return 258;
      case Manufacturer.scribeLabs:
        return 259;
      case Manufacturer.zwift:
        return 260;
      case Manufacturer.watteam:
        return 261;
      case Manufacturer.recon:
        return 262;
      case Manufacturer.faveroElectronics:
        return 263;
      case Manufacturer.dynovelo:
        return 264;
      case Manufacturer.strava:
        return 265;
      case Manufacturer.precor:
        return 266;
      case Manufacturer.bryton:
        return 267;
      case Manufacturer.sram:
        return 268;
      case Manufacturer.navman:
        return 269;
      case Manufacturer.cobi:
        return 270;
      case Manufacturer.spivi:
        return 271;
      case Manufacturer.mioMagellan:
        return 272;
      case Manufacturer.evesports:
        return 273;
      case Manufacturer.sensitivusGauge:
        return 274;
      case Manufacturer.podoon:
        return 275;
      case Manufacturer.lifeTimeFitness:
        return 276;
      case Manufacturer.falcoEMotors:
        return 277;
      case Manufacturer.minoura:
        return 278;
      case Manufacturer.cycliq:
        return 279;
      case Manufacturer.luxottica:
        return 280;
      case Manufacturer.trainerRoad:
        return 281;
      case Manufacturer.theSufferfest:
        return 282;
      case Manufacturer.fullspeedahead:
        return 283;
      case Manufacturer.virtualtraining:
        return 284;
      case Manufacturer.feedbacksports:
        return 285;
      case Manufacturer.omata:
        return 286;
      case Manufacturer.vdo:
        return 287;
      case Manufacturer.magneticdays:
        return 288;
      case Manufacturer.hammerhead:
        return 289;
      case Manufacturer.kineticByKurt:
        return 290;
      case Manufacturer.shapelog:
        return 291;
      case Manufacturer.dabuziduo:
        return 292;
      case Manufacturer.jetblack:
        return 293;
      case Manufacturer.coros:
        return 294;
      case Manufacturer.virtugo:
        return 295;
      case Manufacturer.velosense:
        return 296;
      case Manufacturer.cycligentinc:
        return 297;
      case Manufacturer.trailforks:
        return 298;
      case Manufacturer.mahleEbikemotion:
        return 299;
      case Manufacturer.nurvv:
        return 300;
      case Manufacturer.microprogram:
        return 301;
      case Manufacturer.zone5cloud:
        return 302;
      case Manufacturer.greenteg:
        return 303;
      case Manufacturer.yamahaMotors:
        return 304;
      case Manufacturer.whoop:
        return 305;
      case Manufacturer.gravaa:
        return 306;
      case Manufacturer.onelap:
        return 307;
      case Manufacturer.monarkExercise:
        return 308;
      case Manufacturer.form:
        return 309;
      case Manufacturer.decathlon:
        return 310;
      case Manufacturer.syncros:
        return 311;
      case Manufacturer.actigraphcorp:
        return 5759;
    }
  }

  static Manufacturer fromValue(int value) {
    switch (value) {
      case 1:
        return Manufacturer.garmin;
      case 2:
        return Manufacturer.garminFr405Antfs;
      case 3:
        return Manufacturer.zephyr;
      case 4:
        return Manufacturer.dayton;
      case 5:
        return Manufacturer.idt;
      case 6:
        return Manufacturer.srm;
      case 7:
        return Manufacturer.quarq;
      case 8:
        return Manufacturer.ibike;
      case 9:
        return Manufacturer.saris;
      case 10:
        return Manufacturer.sparkHk;
      case 11:
        return Manufacturer.tanita;
      case 12:
        return Manufacturer.echowell;
      case 13:
        return Manufacturer.dynastreamOem;
      case 14:
        return Manufacturer.nautilus;
      case 15:
        return Manufacturer.dynastream;
      case 16:
        return Manufacturer.timex;
      case 17:
        return Manufacturer.metrigear;
      case 18:
        return Manufacturer.xelic;
      case 19:
        return Manufacturer.beurer;
      case 20:
        return Manufacturer.cardiosport;
      case 21:
        return Manufacturer.aAndD;
      case 22:
        return Manufacturer.hmm;
      case 23:
        return Manufacturer.suunto;
      case 24:
        return Manufacturer.thitaElektronik;
      case 25:
        return Manufacturer.gpulse;
      case 26:
        return Manufacturer.cleanMobile;
      case 27:
        return Manufacturer.pedalBrain;
      case 28:
        return Manufacturer.peaksware;
      case 29:
        return Manufacturer.saxonar;
      case 30:
        return Manufacturer.lemondFitness;
      case 31:
        return Manufacturer.dexcom;
      case 32:
        return Manufacturer.wahooFitness;
      case 33:
        return Manufacturer.octaneFitness;
      case 34:
        return Manufacturer.archinoetics;
      case 35:
        return Manufacturer.theHurtBox;
      case 36:
        return Manufacturer.citizenSystems;
      case 37:
        return Manufacturer.magellan;
      case 38:
        return Manufacturer.osynce;
      case 39:
        return Manufacturer.holux;
      case 40:
        return Manufacturer.concept2;
      case 41:
        return Manufacturer.shimano;
      case 42:
        return Manufacturer.oneGiantLeap;
      case 43:
        return Manufacturer.aceSensor;
      case 44:
        return Manufacturer.brimBrothers;
      case 45:
        return Manufacturer.xplova;
      case 46:
        return Manufacturer.perceptionDigital;
      case 47:
        return Manufacturer.bf1systems;
      case 48:
        return Manufacturer.pioneer;
      case 49:
        return Manufacturer.spantec;
      case 50:
        return Manufacturer.metalogics;
      case 51:
        return Manufacturer.n4iiiis;
      case 52:
        return Manufacturer.seikoEpson;
      case 53:
        return Manufacturer.seikoEpsonOem;
      case 54:
        return Manufacturer.iforPowell;
      case 55:
        return Manufacturer.maxwellGuider;
      case 56:
        return Manufacturer.starTrac;
      case 57:
        return Manufacturer.breakaway;
      case 58:
        return Manufacturer.alatechTechnologyLtd;
      case 59:
        return Manufacturer.mioTechnologyEurope;
      case 60:
        return Manufacturer.rotor;
      case 61:
        return Manufacturer.geonaute;
      case 62:
        return Manufacturer.idBike;
      case 63:
        return Manufacturer.specialized;
      case 64:
        return Manufacturer.wtek;
      case 65:
        return Manufacturer.physicalEnterprises;
      case 66:
        return Manufacturer.northPoleEngineering;
      case 67:
        return Manufacturer.bkool;
      case 68:
        return Manufacturer.cateye;
      case 69:
        return Manufacturer.stagesCycling;
      case 70:
        return Manufacturer.sigmasport;
      case 71:
        return Manufacturer.tomtom;
      case 72:
        return Manufacturer.peripedal;
      case 73:
        return Manufacturer.wattbike;
      case 76:
        return Manufacturer.moxy;
      case 77:
        return Manufacturer.ciclosport;
      case 78:
        return Manufacturer.powerbahn;
      case 79:
        return Manufacturer.acornProjectsAps;
      case 80:
        return Manufacturer.lifebeam;
      case 81:
        return Manufacturer.bontrager;
      case 82:
        return Manufacturer.wellgo;
      case 83:
        return Manufacturer.scosche;
      case 84:
        return Manufacturer.magura;
      case 85:
        return Manufacturer.woodway;
      case 86:
        return Manufacturer.elite;
      case 87:
        return Manufacturer.nielsenKellerman;
      case 88:
        return Manufacturer.dkCity;
      case 89:
        return Manufacturer.tacx;
      case 90:
        return Manufacturer.directionTechnology;
      case 91:
        return Manufacturer.magtonic;
      case 92:
        return Manufacturer.n1partcarbon;
      case 93:
        return Manufacturer.insideRideTechnologies;
      case 94:
        return Manufacturer.soundOfMotion;
      case 95:
        return Manufacturer.stryd;
      case 96:
        return Manufacturer.icg;
      case 97:
        return Manufacturer.miPulse;
      case 98:
        return Manufacturer.bsxAthletics;
      case 99:
        return Manufacturer.look;
      case 100:
        return Manufacturer.campagnoloSrl;
      case 101:
        return Manufacturer.bodyBikeSmart;
      case 102:
        return Manufacturer.praxisworks;
      case 103:
        return Manufacturer.limitsTechnology;
      case 104:
        return Manufacturer.topactionTechnology;
      case 105:
        return Manufacturer.cosinuss;
      case 106:
        return Manufacturer.fitcare;
      case 107:
        return Manufacturer.magene;
      case 108:
        return Manufacturer.giantManufacturingCo;
      case 109:
        return Manufacturer.tigrasport;
      case 110:
        return Manufacturer.salutron;
      case 111:
        return Manufacturer.technogym;
      case 112:
        return Manufacturer.brytonSensors;
      case 113:
        return Manufacturer.latitudeLimited;
      case 114:
        return Manufacturer.soaringTechnology;
      case 115:
        return Manufacturer.igpsport;
      case 116:
        return Manufacturer.thinkrider;
      case 117:
        return Manufacturer.gopherSport;
      case 118:
        return Manufacturer.waterrower;
      case 119:
        return Manufacturer.orangetheory;
      case 120:
        return Manufacturer.inpeak;
      case 121:
        return Manufacturer.kinetic;
      case 122:
        return Manufacturer.johnsonHealthTech;
      case 123:
        return Manufacturer.polarElectro;
      case 124:
        return Manufacturer.seesense;
      case 125:
        return Manufacturer.nciTechnology;
      case 126:
        return Manufacturer.iqsquare;
      case 127:
        return Manufacturer.leomo;
      case 128:
        return Manufacturer.ifitCom;
      case 129:
        return Manufacturer.corosByte;
      case 130:
        return Manufacturer.versaDesign;
      case 131:
        return Manufacturer.chileaf;
      case 132:
        return Manufacturer.cycplus;
      case 133:
        return Manufacturer.gravaaByte;
      case 134:
        return Manufacturer.sigeyi;
      case 135:
        return Manufacturer.coospo;
      case 255:
        return Manufacturer.development;
      case 257:
        return Manufacturer.healthandlife;
      case 258:
        return Manufacturer.lezyne;
      case 259:
        return Manufacturer.scribeLabs;
      case 260:
        return Manufacturer.zwift;
      case 261:
        return Manufacturer.watteam;
      case 262:
        return Manufacturer.recon;
      case 263:
        return Manufacturer.faveroElectronics;
      case 264:
        return Manufacturer.dynovelo;
      case 265:
        return Manufacturer.strava;
      case 266:
        return Manufacturer.precor;
      case 267:
        return Manufacturer.bryton;
      case 268:
        return Manufacturer.sram;
      case 269:
        return Manufacturer.navman;
      case 270:
        return Manufacturer.cobi;
      case 271:
        return Manufacturer.spivi;
      case 272:
        return Manufacturer.mioMagellan;
      case 273:
        return Manufacturer.evesports;
      case 274:
        return Manufacturer.sensitivusGauge;
      case 275:
        return Manufacturer.podoon;
      case 276:
        return Manufacturer.lifeTimeFitness;
      case 277:
        return Manufacturer.falcoEMotors;
      case 278:
        return Manufacturer.minoura;
      case 279:
        return Manufacturer.cycliq;
      case 280:
        return Manufacturer.luxottica;
      case 281:
        return Manufacturer.trainerRoad;
      case 282:
        return Manufacturer.theSufferfest;
      case 283:
        return Manufacturer.fullspeedahead;
      case 284:
        return Manufacturer.virtualtraining;
      case 285:
        return Manufacturer.feedbacksports;
      case 286:
        return Manufacturer.omata;
      case 287:
        return Manufacturer.vdo;
      case 288:
        return Manufacturer.magneticdays;
      case 289:
        return Manufacturer.hammerhead;
      case 290:
        return Manufacturer.kineticByKurt;
      case 291:
        return Manufacturer.shapelog;
      case 292:
        return Manufacturer.dabuziduo;
      case 293:
        return Manufacturer.jetblack;
      case 294:
        return Manufacturer.coros;
      case 295:
        return Manufacturer.virtugo;
      case 296:
        return Manufacturer.velosense;
      case 297:
        return Manufacturer.cycligentinc;
      case 298:
        return Manufacturer.trailforks;
      case 299:
        return Manufacturer.mahleEbikemotion;
      case 300:
        return Manufacturer.nurvv;
      case 301:
        return Manufacturer.microprogram;
      case 302:
        return Manufacturer.zone5cloud;
      case 303:
        return Manufacturer.greenteg;
      case 304:
        return Manufacturer.yamahaMotors;
      case 305:
        return Manufacturer.whoop;
      case 306:
        return Manufacturer.gravaa;
      case 307:
        return Manufacturer.onelap;
      case 308:
        return Manufacturer.monarkExercise;
      case 309:
        return Manufacturer.form;
      case 310:
        return Manufacturer.decathlon;
      case 311:
        return Manufacturer.syncros;
      case 5759:
        return Manufacturer.actigraphcorp;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum GarminProduct {
  hrm1,
  axh01,
  axb01,
  axb02,
  hrm2ss,
  dsiAlf02,
  hrm3ss,
  hrmRunSingleByteProductId,
  bsm,
  bcm,
  axs01,
  hrmTriSingleByteProductId,
  hrm4RunSingleByteProductId,
  fr225SingleByteProductId,
  gen3BsmSingleByteProductId,
  gen3BcmSingleByteProductId,
  fr301China,
  fr301Japan,
  fr301Korea,
  fr301Taiwan,
  fr405,
  fr50,
  fr405Japan,
  fr60,
  dsiAlf01,
  fr310xt,
  edge500,
  fr110,
  edge800,
  edge500Taiwan,
  edge500Japan,
  chirp,
  fr110Japan,
  edge200,
  fr910xt,
  edge800Taiwan,
  edge800Japan,
  alf04,
  fr610,
  fr210Japan,
  vectorSs,
  vectorCp,
  edge800China,
  edge500China,
  approachG10,
  fr610Japan,
  edge500Korea,
  fr70,
  fr310xt4t,
  amx,
  fr10,
  edge800Korea,
  swim,
  fr910xtChina,
  fenix,
  edge200Taiwan,
  edge510,
  edge810,
  tempe,
  fr910xtJapan,
  fr620,
  fr220,
  fr910xtKorea,
  fr10Japan,
  edge810Japan,
  virbElite,
  edgeTouring,
  edge510Japan,
  hrmTri,
  hrmRun,
  fr920xt,
  edge510Asia,
  edge810China,
  edge810Taiwan,
  edge1000,
  vivoFit,
  virbRemote,
  vivoKi,
  fr15,
  vivoActive,
  edge510Korea,
  fr620Japan,
  fr620China,
  fr220Japan,
  fr220China,
  approachS6,
  vivoSmart,
  fenix2,
  epix,
  fenix3,
  edge1000Taiwan,
  edge1000Japan,
  fr15Japan,
  edge520,
  edge1000China,
  fr620Russia,
  fr220Russia,
  vectorS,
  edge1000Korea,
  fr920xtTaiwan,
  fr920xtChina,
  fr920xtJapan,
  virbx,
  vivoSmartApac,
  etrexTouch,
  edge25,
  fr25,
  vivoFit2,
  fr225,
  fr630,
  fr230,
  fr735xt,
  vivoActiveApac,
  vector2,
  vector2s,
  virbxe,
  fr620Taiwan,
  fr220Taiwan,
  truswing,
  d2airvenu,
  fenix3China,
  fenix3Twn,
  variaHeadlight,
  variaTaillightOld,
  edgeExplore1000,
  fr225Asia,
  variaRadarTaillight,
  variaRadarDisplay,
  edge20,
  edge520Asia,
  edge520Japan,
  d2Bravo,
  approachS20,
  vivoSmart2,
  edge1000Thai,
  variaRemote,
  edge25Asia,
  edge25Jpn,
  edge20Asia,
  approachX40,
  fenix3Japan,
  vivoSmartEmea,
  fr630Asia,
  fr630Jpn,
  fr230Jpn,
  hrm4Run,
  epixJapan,
  vivoActiveHr,
  vivoSmartGpsHr,
  vivoSmartHr,
  vivoSmartHrAsia,
  vivoSmartGpsHrAsia,
  vivoMove,
  variaTaillight,
  fr235Asia,
  fr235Japan,
  variaVision,
  vivoFit3,
  fenix3Korea,
  fenix3Sea,
  fenix3Hr,
  virbUltra30,
  indexSmartScale,
  fr235,
  fenix3Chronos,
  oregon7xx,
  rino7xx,
  epixKorea,
  fenix3HrChn,
  fenix3HrTwn,
  fenix3HrJpn,
  fenix3HrSea,
  fenix3HrKor,
  nautix,
  vivoActiveHrApac,
  oregon7xxWw,
  edge820,
  edgeExplore820,
  fr735xtApac,
  fr735xtJapan,
  fenix5s,
  d2BravoTitanium,
  variaUt800,
  runningDynamicsPod,
  edge820China,
  edge820Japan,
  fenix5x,
  vivoFitJr,
  vivoSmart3,
  vivoSport,
  edge820Taiwan,
  edge820Korea,
  edge820Sea,
  fr35Hebrew,
  approachS60,
  fr35Apac,
  fr35Japan,
  fenix3ChronosAsia,
  virb360,
  fr935,
  fenix5,
  vivoactive3,
  fr235ChinaNfc,
  foretrex601701,
  vivoMoveHr,
  edge1030,
  vector3,
  fenix5Asia,
  fenix5sAsia,
  fenix5xAsia,
  approachZ80,
  fr35Korea,
  d2charlie,
  vivoSmart3Apac,
  vivoSportApac,
  fr935Asia,
  descent,
  vivoFit4,
  fr645,
  fr645m,
  fr30,
  fenix5sPlus,
  edge130,
  edge1030Asia,
  vivosmart4,
  vivoMoveHrAsia,
  approachX10,
  fr30Asia,
  vivoactive3mW,
  fr645Asia,
  fr645mAsia,
  edgeExplore,
  gpsmap66,
  approachS10,
  vivoactive3mL,
  approachG80,
  edge130Asia,
  edge1030Bontrager,
  fenix5Plus,
  fenix5xPlus,
  edge520Plus,
  fr945,
  edge530,
  edge830,
  instinctEsports,
  fenix5sPlusApac,
  fenix5xPlusApac,
  edge520PlusApac,
  fr235lAsia,
  fr245Asia,
  vivoActive3mApac,
  gen3Bsm,
  gen3Bcm,
  vivoSmart4Asia,
  vivoactive4Small,
  vivoactive4Large,
  venu,
  marqDriver,
  marqAviator,
  marqCaptain,
  marqCommander,
  marqExpedition,
  marqAthlete,
  descentMk2,
  gpsmap66i,
  fenix6SSport,
  fenix6S,
  fenix6Sport,
  fenix6,
  fenix6x,
  hrmDual,
  hrmPro,
  vivoMove3Premium,
  approachS40,
  fr245mAsia,
  edge530Apac,
  edge830Apac,
  vivoMove3,
  vivoActive4SmallAsia,
  vivoActive4LargeAsia,
  vivoActive4OledAsia,
  swim2,
  marqDriverAsia,
  marqAviatorAsia,
  vivoMove3Asia,
  fr945Asia,
  vivoActive3tChn,
  marqCaptainAsia,
  marqCommanderAsia,
  marqExpeditionAsia,
  marqAthleteAsia,
  fr45Asia,
  vivoactive3Daimler,
  legacyRey,
  legacyDarthVader,
  legacyCaptainMarvel,
  legacyFirstAvenger,
  fenix6sSportAsia,
  fenix6sAsia,
  fenix6SportAsia,
  fenix6Asia,
  fenix6xAsia,
  legacyCaptainMarvelAsia,
  legacyFirstAvengerAsia,
  legacyReyAsia,
  legacyDarthVaderAsia,
  descentMk2s,
  edge130Plus,
  edge1030Plus,
  rally200,
  fr745,
  venusq,
  lily,
  marqAdventurer,
  enduro,
  marqAdventurerAsia,
  swim2Apac,
  descentMk2Asia,
  venu2,
  venu2s,
  venuDaimlerAsia,
  marqGolfer,
  venuDaimler,
  fr745Asia,
  lilyAsia,
  edge1030PlusAsia,
  edge130PlusAsia,
  approachS12,
  enduroAsia,
  venusqAsia,
  marqGolferAsia,
  approachG12,
  descentMk2sAsia,
  approachS42,
  venu2sAsia,
  venu2Asia,
  approachS12Asia,
  approachG12Asia,
  approachS42Asia,
  sdm4,
  edgeRemote,
  tacxTrainingAppWin,
  tacxTrainingAppMac,
  trainingCenter,
  tacxTrainingAppAndroid,
  tacxTrainingAppIos,
  tacxTrainingAppLegacy,
  connectiqSimulator,
  androidAntplusPlugin,
  connect
}

extension GarminProductExt on GarminProduct {
  int get value {
    switch (this) {
      case GarminProduct.hrm1:
        return 1;
      case GarminProduct.axh01:
        return 2;
      case GarminProduct.axb01:
        return 3;
      case GarminProduct.axb02:
        return 4;
      case GarminProduct.hrm2ss:
        return 5;
      case GarminProduct.dsiAlf02:
        return 6;
      case GarminProduct.hrm3ss:
        return 7;
      case GarminProduct.hrmRunSingleByteProductId:
        return 8;
      case GarminProduct.bsm:
        return 9;
      case GarminProduct.bcm:
        return 10;
      case GarminProduct.axs01:
        return 11;
      case GarminProduct.hrmTriSingleByteProductId:
        return 12;
      case GarminProduct.hrm4RunSingleByteProductId:
        return 13;
      case GarminProduct.fr225SingleByteProductId:
        return 14;
      case GarminProduct.gen3BsmSingleByteProductId:
        return 15;
      case GarminProduct.gen3BcmSingleByteProductId:
        return 16;
      case GarminProduct.fr301China:
        return 473;
      case GarminProduct.fr301Japan:
        return 474;
      case GarminProduct.fr301Korea:
        return 475;
      case GarminProduct.fr301Taiwan:
        return 494;
      case GarminProduct.fr405:
        return 717;
      case GarminProduct.fr50:
        return 782;
      case GarminProduct.fr405Japan:
        return 987;
      case GarminProduct.fr60:
        return 988;
      case GarminProduct.dsiAlf01:
        return 1011;
      case GarminProduct.fr310xt:
        return 1018;
      case GarminProduct.edge500:
        return 1036;
      case GarminProduct.fr110:
        return 1124;
      case GarminProduct.edge800:
        return 1169;
      case GarminProduct.edge500Taiwan:
        return 1199;
      case GarminProduct.edge500Japan:
        return 1213;
      case GarminProduct.chirp:
        return 1253;
      case GarminProduct.fr110Japan:
        return 1274;
      case GarminProduct.edge200:
        return 1325;
      case GarminProduct.fr910xt:
        return 1328;
      case GarminProduct.edge800Taiwan:
        return 1333;
      case GarminProduct.edge800Japan:
        return 1334;
      case GarminProduct.alf04:
        return 1341;
      case GarminProduct.fr610:
        return 1345;
      case GarminProduct.fr210Japan:
        return 1360;
      case GarminProduct.vectorSs:
        return 1380;
      case GarminProduct.vectorCp:
        return 1381;
      case GarminProduct.edge800China:
        return 1386;
      case GarminProduct.edge500China:
        return 1387;
      case GarminProduct.approachG10:
        return 1405;
      case GarminProduct.fr610Japan:
        return 1410;
      case GarminProduct.edge500Korea:
        return 1422;
      case GarminProduct.fr70:
        return 1436;
      case GarminProduct.fr310xt4t:
        return 1446;
      case GarminProduct.amx:
        return 1461;
      case GarminProduct.fr10:
        return 1482;
      case GarminProduct.edge800Korea:
        return 1497;
      case GarminProduct.swim:
        return 1499;
      case GarminProduct.fr910xtChina:
        return 1537;
      case GarminProduct.fenix:
        return 1551;
      case GarminProduct.edge200Taiwan:
        return 1555;
      case GarminProduct.edge510:
        return 1561;
      case GarminProduct.edge810:
        return 1567;
      case GarminProduct.tempe:
        return 1570;
      case GarminProduct.fr910xtJapan:
        return 1600;
      case GarminProduct.fr620:
        return 1623;
      case GarminProduct.fr220:
        return 1632;
      case GarminProduct.fr910xtKorea:
        return 1664;
      case GarminProduct.fr10Japan:
        return 1688;
      case GarminProduct.edge810Japan:
        return 1721;
      case GarminProduct.virbElite:
        return 1735;
      case GarminProduct.edgeTouring:
        return 1736;
      case GarminProduct.edge510Japan:
        return 1742;
      case GarminProduct.hrmTri:
        return 1743;
      case GarminProduct.hrmRun:
        return 1752;
      case GarminProduct.fr920xt:
        return 1765;
      case GarminProduct.edge510Asia:
        return 1821;
      case GarminProduct.edge810China:
        return 1822;
      case GarminProduct.edge810Taiwan:
        return 1823;
      case GarminProduct.edge1000:
        return 1836;
      case GarminProduct.vivoFit:
        return 1837;
      case GarminProduct.virbRemote:
        return 1853;
      case GarminProduct.vivoKi:
        return 1885;
      case GarminProduct.fr15:
        return 1903;
      case GarminProduct.vivoActive:
        return 1907;
      case GarminProduct.edge510Korea:
        return 1918;
      case GarminProduct.fr620Japan:
        return 1928;
      case GarminProduct.fr620China:
        return 1929;
      case GarminProduct.fr220Japan:
        return 1930;
      case GarminProduct.fr220China:
        return 1931;
      case GarminProduct.approachS6:
        return 1936;
      case GarminProduct.vivoSmart:
        return 1956;
      case GarminProduct.fenix2:
        return 1967;
      case GarminProduct.epix:
        return 1988;
      case GarminProduct.fenix3:
        return 2050;
      case GarminProduct.edge1000Taiwan:
        return 2052;
      case GarminProduct.edge1000Japan:
        return 2053;
      case GarminProduct.fr15Japan:
        return 2061;
      case GarminProduct.edge520:
        return 2067;
      case GarminProduct.edge1000China:
        return 2070;
      case GarminProduct.fr620Russia:
        return 2072;
      case GarminProduct.fr220Russia:
        return 2073;
      case GarminProduct.vectorS:
        return 2079;
      case GarminProduct.edge1000Korea:
        return 2100;
      case GarminProduct.fr920xtTaiwan:
        return 2130;
      case GarminProduct.fr920xtChina:
        return 2131;
      case GarminProduct.fr920xtJapan:
        return 2132;
      case GarminProduct.virbx:
        return 2134;
      case GarminProduct.vivoSmartApac:
        return 2135;
      case GarminProduct.etrexTouch:
        return 2140;
      case GarminProduct.edge25:
        return 2147;
      case GarminProduct.fr25:
        return 2148;
      case GarminProduct.vivoFit2:
        return 2150;
      case GarminProduct.fr225:
        return 2153;
      case GarminProduct.fr630:
        return 2156;
      case GarminProduct.fr230:
        return 2157;
      case GarminProduct.fr735xt:
        return 2158;
      case GarminProduct.vivoActiveApac:
        return 2160;
      case GarminProduct.vector2:
        return 2161;
      case GarminProduct.vector2s:
        return 2162;
      case GarminProduct.virbxe:
        return 2172;
      case GarminProduct.fr620Taiwan:
        return 2173;
      case GarminProduct.fr220Taiwan:
        return 2174;
      case GarminProduct.truswing:
        return 2175;
      case GarminProduct.d2airvenu:
        return 2187;
      case GarminProduct.fenix3China:
        return 2188;
      case GarminProduct.fenix3Twn:
        return 2189;
      case GarminProduct.variaHeadlight:
        return 2192;
      case GarminProduct.variaTaillightOld:
        return 2193;
      case GarminProduct.edgeExplore1000:
        return 2204;
      case GarminProduct.fr225Asia:
        return 2219;
      case GarminProduct.variaRadarTaillight:
        return 2225;
      case GarminProduct.variaRadarDisplay:
        return 2226;
      case GarminProduct.edge20:
        return 2238;
      case GarminProduct.edge520Asia:
        return 2260;
      case GarminProduct.edge520Japan:
        return 2261;
      case GarminProduct.d2Bravo:
        return 2262;
      case GarminProduct.approachS20:
        return 2266;
      case GarminProduct.vivoSmart2:
        return 2271;
      case GarminProduct.edge1000Thai:
        return 2274;
      case GarminProduct.variaRemote:
        return 2276;
      case GarminProduct.edge25Asia:
        return 2288;
      case GarminProduct.edge25Jpn:
        return 2289;
      case GarminProduct.edge20Asia:
        return 2290;
      case GarminProduct.approachX40:
        return 2292;
      case GarminProduct.fenix3Japan:
        return 2293;
      case GarminProduct.vivoSmartEmea:
        return 2294;
      case GarminProduct.fr630Asia:
        return 2310;
      case GarminProduct.fr630Jpn:
        return 2311;
      case GarminProduct.fr230Jpn:
        return 2313;
      case GarminProduct.hrm4Run:
        return 2327;
      case GarminProduct.epixJapan:
        return 2332;
      case GarminProduct.vivoActiveHr:
        return 2337;
      case GarminProduct.vivoSmartGpsHr:
        return 2347;
      case GarminProduct.vivoSmartHr:
        return 2348;
      case GarminProduct.vivoSmartHrAsia:
        return 2361;
      case GarminProduct.vivoSmartGpsHrAsia:
        return 2362;
      case GarminProduct.vivoMove:
        return 2368;
      case GarminProduct.variaTaillight:
        return 2379;
      case GarminProduct.fr235Asia:
        return 2396;
      case GarminProduct.fr235Japan:
        return 2397;
      case GarminProduct.variaVision:
        return 2398;
      case GarminProduct.vivoFit3:
        return 2406;
      case GarminProduct.fenix3Korea:
        return 2407;
      case GarminProduct.fenix3Sea:
        return 2408;
      case GarminProduct.fenix3Hr:
        return 2413;
      case GarminProduct.virbUltra30:
        return 2417;
      case GarminProduct.indexSmartScale:
        return 2429;
      case GarminProduct.fr235:
        return 2431;
      case GarminProduct.fenix3Chronos:
        return 2432;
      case GarminProduct.oregon7xx:
        return 2441;
      case GarminProduct.rino7xx:
        return 2444;
      case GarminProduct.epixKorea:
        return 2457;
      case GarminProduct.fenix3HrChn:
        return 2473;
      case GarminProduct.fenix3HrTwn:
        return 2474;
      case GarminProduct.fenix3HrJpn:
        return 2475;
      case GarminProduct.fenix3HrSea:
        return 2476;
      case GarminProduct.fenix3HrKor:
        return 2477;
      case GarminProduct.nautix:
        return 2496;
      case GarminProduct.vivoActiveHrApac:
        return 2497;
      case GarminProduct.oregon7xxWw:
        return 2512;
      case GarminProduct.edge820:
        return 2530;
      case GarminProduct.edgeExplore820:
        return 2531;
      case GarminProduct.fr735xtApac:
        return 2533;
      case GarminProduct.fr735xtJapan:
        return 2534;
      case GarminProduct.fenix5s:
        return 2544;
      case GarminProduct.d2BravoTitanium:
        return 2547;
      case GarminProduct.variaUt800:
        return 2567;
      case GarminProduct.runningDynamicsPod:
        return 2593;
      case GarminProduct.edge820China:
        return 2599;
      case GarminProduct.edge820Japan:
        return 2600;
      case GarminProduct.fenix5x:
        return 2604;
      case GarminProduct.vivoFitJr:
        return 2606;
      case GarminProduct.vivoSmart3:
        return 2622;
      case GarminProduct.vivoSport:
        return 2623;
      case GarminProduct.edge820Taiwan:
        return 2628;
      case GarminProduct.edge820Korea:
        return 2629;
      case GarminProduct.edge820Sea:
        return 2630;
      case GarminProduct.fr35Hebrew:
        return 2650;
      case GarminProduct.approachS60:
        return 2656;
      case GarminProduct.fr35Apac:
        return 2667;
      case GarminProduct.fr35Japan:
        return 2668;
      case GarminProduct.fenix3ChronosAsia:
        return 2675;
      case GarminProduct.virb360:
        return 2687;
      case GarminProduct.fr935:
        return 2691;
      case GarminProduct.fenix5:
        return 2697;
      case GarminProduct.vivoactive3:
        return 2700;
      case GarminProduct.fr235ChinaNfc:
        return 2733;
      case GarminProduct.foretrex601701:
        return 2769;
      case GarminProduct.vivoMoveHr:
        return 2772;
      case GarminProduct.edge1030:
        return 2713;
      case GarminProduct.vector3:
        return 2787;
      case GarminProduct.fenix5Asia:
        return 2796;
      case GarminProduct.fenix5sAsia:
        return 2797;
      case GarminProduct.fenix5xAsia:
        return 2798;
      case GarminProduct.approachZ80:
        return 2806;
      case GarminProduct.fr35Korea:
        return 2814;
      case GarminProduct.d2charlie:
        return 2819;
      case GarminProduct.vivoSmart3Apac:
        return 2831;
      case GarminProduct.vivoSportApac:
        return 2832;
      case GarminProduct.fr935Asia:
        return 2833;
      case GarminProduct.descent:
        return 2859;
      case GarminProduct.vivoFit4:
        return 2878;
      case GarminProduct.fr645:
        return 2886;
      case GarminProduct.fr645m:
        return 2888;
      case GarminProduct.fr30:
        return 2891;
      case GarminProduct.fenix5sPlus:
        return 2900;
      case GarminProduct.edge130:
        return 2909;
      case GarminProduct.edge1030Asia:
        return 2924;
      case GarminProduct.vivosmart4:
        return 2927;
      case GarminProduct.vivoMoveHrAsia:
        return 2945;
      case GarminProduct.approachX10:
        return 2962;
      case GarminProduct.fr30Asia:
        return 2977;
      case GarminProduct.vivoactive3mW:
        return 2988;
      case GarminProduct.fr645Asia:
        return 3003;
      case GarminProduct.fr645mAsia:
        return 3004;
      case GarminProduct.edgeExplore:
        return 3011;
      case GarminProduct.gpsmap66:
        return 3028;
      case GarminProduct.approachS10:
        return 3049;
      case GarminProduct.vivoactive3mL:
        return 3066;
      case GarminProduct.approachG80:
        return 3085;
      case GarminProduct.edge130Asia:
        return 3092;
      case GarminProduct.edge1030Bontrager:
        return 3095;
      case GarminProduct.fenix5Plus:
        return 3110;
      case GarminProduct.fenix5xPlus:
        return 3111;
      case GarminProduct.edge520Plus:
        return 3112;
      case GarminProduct.fr945:
        return 3113;
      case GarminProduct.edge530:
        return 3121;
      case GarminProduct.edge830:
        return 3122;
      case GarminProduct.instinctEsports:
        return 3126;
      case GarminProduct.fenix5sPlusApac:
        return 3134;
      case GarminProduct.fenix5xPlusApac:
        return 3135;
      case GarminProduct.edge520PlusApac:
        return 3142;
      case GarminProduct.fr235lAsia:
        return 3144;
      case GarminProduct.fr245Asia:
        return 3145;
      case GarminProduct.vivoActive3mApac:
        return 3163;
      case GarminProduct.gen3Bsm:
        return 3192;
      case GarminProduct.gen3Bcm:
        return 3193;
      case GarminProduct.vivoSmart4Asia:
        return 3218;
      case GarminProduct.vivoactive4Small:
        return 3224;
      case GarminProduct.vivoactive4Large:
        return 3225;
      case GarminProduct.venu:
        return 3226;
      case GarminProduct.marqDriver:
        return 3246;
      case GarminProduct.marqAviator:
        return 3247;
      case GarminProduct.marqCaptain:
        return 3248;
      case GarminProduct.marqCommander:
        return 3249;
      case GarminProduct.marqExpedition:
        return 3250;
      case GarminProduct.marqAthlete:
        return 3251;
      case GarminProduct.descentMk2:
        return 3258;
      case GarminProduct.gpsmap66i:
        return 3284;
      case GarminProduct.fenix6SSport:
        return 3287;
      case GarminProduct.fenix6S:
        return 3288;
      case GarminProduct.fenix6Sport:
        return 3289;
      case GarminProduct.fenix6:
        return 3290;
      case GarminProduct.fenix6x:
        return 3291;
      case GarminProduct.hrmDual:
        return 3299;
      case GarminProduct.hrmPro:
        return 3300;
      case GarminProduct.vivoMove3Premium:
        return 3308;
      case GarminProduct.approachS40:
        return 3314;
      case GarminProduct.fr245mAsia:
        return 3321;
      case GarminProduct.edge530Apac:
        return 3349;
      case GarminProduct.edge830Apac:
        return 3350;
      case GarminProduct.vivoMove3:
        return 3378;
      case GarminProduct.vivoActive4SmallAsia:
        return 3387;
      case GarminProduct.vivoActive4LargeAsia:
        return 3388;
      case GarminProduct.vivoActive4OledAsia:
        return 3389;
      case GarminProduct.swim2:
        return 3405;
      case GarminProduct.marqDriverAsia:
        return 3420;
      case GarminProduct.marqAviatorAsia:
        return 3421;
      case GarminProduct.vivoMove3Asia:
        return 3422;
      case GarminProduct.fr945Asia:
        return 3441;
      case GarminProduct.vivoActive3tChn:
        return 3446;
      case GarminProduct.marqCaptainAsia:
        return 3448;
      case GarminProduct.marqCommanderAsia:
        return 3449;
      case GarminProduct.marqExpeditionAsia:
        return 3450;
      case GarminProduct.marqAthleteAsia:
        return 3451;
      case GarminProduct.fr45Asia:
        return 3469;
      case GarminProduct.vivoactive3Daimler:
        return 3473;
      case GarminProduct.legacyRey:
        return 3498;
      case GarminProduct.legacyDarthVader:
        return 3499;
      case GarminProduct.legacyCaptainMarvel:
        return 3500;
      case GarminProduct.legacyFirstAvenger:
        return 3501;
      case GarminProduct.fenix6sSportAsia:
        return 3512;
      case GarminProduct.fenix6sAsia:
        return 3513;
      case GarminProduct.fenix6SportAsia:
        return 3514;
      case GarminProduct.fenix6Asia:
        return 3515;
      case GarminProduct.fenix6xAsia:
        return 3516;
      case GarminProduct.legacyCaptainMarvelAsia:
        return 3535;
      case GarminProduct.legacyFirstAvengerAsia:
        return 3536;
      case GarminProduct.legacyReyAsia:
        return 3537;
      case GarminProduct.legacyDarthVaderAsia:
        return 3538;
      case GarminProduct.descentMk2s:
        return 3542;
      case GarminProduct.edge130Plus:
        return 3558;
      case GarminProduct.edge1030Plus:
        return 3570;
      case GarminProduct.rally200:
        return 3578;
      case GarminProduct.fr745:
        return 3589;
      case GarminProduct.venusq:
        return 3600;
      case GarminProduct.lily:
        return 3615;
      case GarminProduct.marqAdventurer:
        return 3624;
      case GarminProduct.enduro:
        return 3638;
      case GarminProduct.marqAdventurerAsia:
        return 3648;
      case GarminProduct.swim2Apac:
        return 3639;
      case GarminProduct.descentMk2Asia:
        return 3702;
      case GarminProduct.venu2:
        return 3703;
      case GarminProduct.venu2s:
        return 3704;
      case GarminProduct.venuDaimlerAsia:
        return 3737;
      case GarminProduct.marqGolfer:
        return 3739;
      case GarminProduct.venuDaimler:
        return 3740;
      case GarminProduct.fr745Asia:
        return 3794;
      case GarminProduct.lilyAsia:
        return 3809;
      case GarminProduct.edge1030PlusAsia:
        return 3812;
      case GarminProduct.edge130PlusAsia:
        return 3813;
      case GarminProduct.approachS12:
        return 3823;
      case GarminProduct.enduroAsia:
        return 3872;
      case GarminProduct.venusqAsia:
        return 3837;
      case GarminProduct.marqGolferAsia:
        return 3850;
      case GarminProduct.approachG12:
        return 3927;
      case GarminProduct.descentMk2sAsia:
        return 3930;
      case GarminProduct.approachS42:
        return 3934;
      case GarminProduct.venu2sAsia:
        return 3949;
      case GarminProduct.venu2Asia:
        return 3950;
      case GarminProduct.approachS12Asia:
        return 3986;
      case GarminProduct.approachG12Asia:
        return 4001;
      case GarminProduct.approachS42Asia:
        return 4002;
      case GarminProduct.sdm4:
        return 10007;
      case GarminProduct.edgeRemote:
        return 10014;
      case GarminProduct.tacxTrainingAppWin:
        return 20533;
      case GarminProduct.tacxTrainingAppMac:
        return 20534;
      case GarminProduct.trainingCenter:
        return 20119;
      case GarminProduct.tacxTrainingAppAndroid:
        return 30045;
      case GarminProduct.tacxTrainingAppIos:
        return 30046;
      case GarminProduct.tacxTrainingAppLegacy:
        return 30047;
      case GarminProduct.connectiqSimulator:
        return 65531;
      case GarminProduct.androidAntplusPlugin:
        return 65532;
      case GarminProduct.connect:
        return 65534;
    }
  }

  static GarminProduct fromValue(int value) {
    switch (value) {
      case 1:
        return GarminProduct.hrm1;
      case 2:
        return GarminProduct.axh01;
      case 3:
        return GarminProduct.axb01;
      case 4:
        return GarminProduct.axb02;
      case 5:
        return GarminProduct.hrm2ss;
      case 6:
        return GarminProduct.dsiAlf02;
      case 7:
        return GarminProduct.hrm3ss;
      case 8:
        return GarminProduct.hrmRunSingleByteProductId;
      case 9:
        return GarminProduct.bsm;
      case 10:
        return GarminProduct.bcm;
      case 11:
        return GarminProduct.axs01;
      case 12:
        return GarminProduct.hrmTriSingleByteProductId;
      case 13:
        return GarminProduct.hrm4RunSingleByteProductId;
      case 14:
        return GarminProduct.fr225SingleByteProductId;
      case 15:
        return GarminProduct.gen3BsmSingleByteProductId;
      case 16:
        return GarminProduct.gen3BcmSingleByteProductId;
      case 473:
        return GarminProduct.fr301China;
      case 474:
        return GarminProduct.fr301Japan;
      case 475:
        return GarminProduct.fr301Korea;
      case 494:
        return GarminProduct.fr301Taiwan;
      case 717:
        return GarminProduct.fr405;
      case 782:
        return GarminProduct.fr50;
      case 987:
        return GarminProduct.fr405Japan;
      case 988:
        return GarminProduct.fr60;
      case 1011:
        return GarminProduct.dsiAlf01;
      case 1018:
        return GarminProduct.fr310xt;
      case 1036:
        return GarminProduct.edge500;
      case 1124:
        return GarminProduct.fr110;
      case 1169:
        return GarminProduct.edge800;
      case 1199:
        return GarminProduct.edge500Taiwan;
      case 1213:
        return GarminProduct.edge500Japan;
      case 1253:
        return GarminProduct.chirp;
      case 1274:
        return GarminProduct.fr110Japan;
      case 1325:
        return GarminProduct.edge200;
      case 1328:
        return GarminProduct.fr910xt;
      case 1333:
        return GarminProduct.edge800Taiwan;
      case 1334:
        return GarminProduct.edge800Japan;
      case 1341:
        return GarminProduct.alf04;
      case 1345:
        return GarminProduct.fr610;
      case 1360:
        return GarminProduct.fr210Japan;
      case 1380:
        return GarminProduct.vectorSs;
      case 1381:
        return GarminProduct.vectorCp;
      case 1386:
        return GarminProduct.edge800China;
      case 1387:
        return GarminProduct.edge500China;
      case 1405:
        return GarminProduct.approachG10;
      case 1410:
        return GarminProduct.fr610Japan;
      case 1422:
        return GarminProduct.edge500Korea;
      case 1436:
        return GarminProduct.fr70;
      case 1446:
        return GarminProduct.fr310xt4t;
      case 1461:
        return GarminProduct.amx;
      case 1482:
        return GarminProduct.fr10;
      case 1497:
        return GarminProduct.edge800Korea;
      case 1499:
        return GarminProduct.swim;
      case 1537:
        return GarminProduct.fr910xtChina;
      case 1551:
        return GarminProduct.fenix;
      case 1555:
        return GarminProduct.edge200Taiwan;
      case 1561:
        return GarminProduct.edge510;
      case 1567:
        return GarminProduct.edge810;
      case 1570:
        return GarminProduct.tempe;
      case 1600:
        return GarminProduct.fr910xtJapan;
      case 1623:
        return GarminProduct.fr620;
      case 1632:
        return GarminProduct.fr220;
      case 1664:
        return GarminProduct.fr910xtKorea;
      case 1688:
        return GarminProduct.fr10Japan;
      case 1721:
        return GarminProduct.edge810Japan;
      case 1735:
        return GarminProduct.virbElite;
      case 1736:
        return GarminProduct.edgeTouring;
      case 1742:
        return GarminProduct.edge510Japan;
      case 1743:
        return GarminProduct.hrmTri;
      case 1752:
        return GarminProduct.hrmRun;
      case 1765:
        return GarminProduct.fr920xt;
      case 1821:
        return GarminProduct.edge510Asia;
      case 1822:
        return GarminProduct.edge810China;
      case 1823:
        return GarminProduct.edge810Taiwan;
      case 1836:
        return GarminProduct.edge1000;
      case 1837:
        return GarminProduct.vivoFit;
      case 1853:
        return GarminProduct.virbRemote;
      case 1885:
        return GarminProduct.vivoKi;
      case 1903:
        return GarminProduct.fr15;
      case 1907:
        return GarminProduct.vivoActive;
      case 1918:
        return GarminProduct.edge510Korea;
      case 1928:
        return GarminProduct.fr620Japan;
      case 1929:
        return GarminProduct.fr620China;
      case 1930:
        return GarminProduct.fr220Japan;
      case 1931:
        return GarminProduct.fr220China;
      case 1936:
        return GarminProduct.approachS6;
      case 1956:
        return GarminProduct.vivoSmart;
      case 1967:
        return GarminProduct.fenix2;
      case 1988:
        return GarminProduct.epix;
      case 2050:
        return GarminProduct.fenix3;
      case 2052:
        return GarminProduct.edge1000Taiwan;
      case 2053:
        return GarminProduct.edge1000Japan;
      case 2061:
        return GarminProduct.fr15Japan;
      case 2067:
        return GarminProduct.edge520;
      case 2070:
        return GarminProduct.edge1000China;
      case 2072:
        return GarminProduct.fr620Russia;
      case 2073:
        return GarminProduct.fr220Russia;
      case 2079:
        return GarminProduct.vectorS;
      case 2100:
        return GarminProduct.edge1000Korea;
      case 2130:
        return GarminProduct.fr920xtTaiwan;
      case 2131:
        return GarminProduct.fr920xtChina;
      case 2132:
        return GarminProduct.fr920xtJapan;
      case 2134:
        return GarminProduct.virbx;
      case 2135:
        return GarminProduct.vivoSmartApac;
      case 2140:
        return GarminProduct.etrexTouch;
      case 2147:
        return GarminProduct.edge25;
      case 2148:
        return GarminProduct.fr25;
      case 2150:
        return GarminProduct.vivoFit2;
      case 2153:
        return GarminProduct.fr225;
      case 2156:
        return GarminProduct.fr630;
      case 2157:
        return GarminProduct.fr230;
      case 2158:
        return GarminProduct.fr735xt;
      case 2160:
        return GarminProduct.vivoActiveApac;
      case 2161:
        return GarminProduct.vector2;
      case 2162:
        return GarminProduct.vector2s;
      case 2172:
        return GarminProduct.virbxe;
      case 2173:
        return GarminProduct.fr620Taiwan;
      case 2174:
        return GarminProduct.fr220Taiwan;
      case 2175:
        return GarminProduct.truswing;
      case 2187:
        return GarminProduct.d2airvenu;
      case 2188:
        return GarminProduct.fenix3China;
      case 2189:
        return GarminProduct.fenix3Twn;
      case 2192:
        return GarminProduct.variaHeadlight;
      case 2193:
        return GarminProduct.variaTaillightOld;
      case 2204:
        return GarminProduct.edgeExplore1000;
      case 2219:
        return GarminProduct.fr225Asia;
      case 2225:
        return GarminProduct.variaRadarTaillight;
      case 2226:
        return GarminProduct.variaRadarDisplay;
      case 2238:
        return GarminProduct.edge20;
      case 2260:
        return GarminProduct.edge520Asia;
      case 2261:
        return GarminProduct.edge520Japan;
      case 2262:
        return GarminProduct.d2Bravo;
      case 2266:
        return GarminProduct.approachS20;
      case 2271:
        return GarminProduct.vivoSmart2;
      case 2274:
        return GarminProduct.edge1000Thai;
      case 2276:
        return GarminProduct.variaRemote;
      case 2288:
        return GarminProduct.edge25Asia;
      case 2289:
        return GarminProduct.edge25Jpn;
      case 2290:
        return GarminProduct.edge20Asia;
      case 2292:
        return GarminProduct.approachX40;
      case 2293:
        return GarminProduct.fenix3Japan;
      case 2294:
        return GarminProduct.vivoSmartEmea;
      case 2310:
        return GarminProduct.fr630Asia;
      case 2311:
        return GarminProduct.fr630Jpn;
      case 2313:
        return GarminProduct.fr230Jpn;
      case 2327:
        return GarminProduct.hrm4Run;
      case 2332:
        return GarminProduct.epixJapan;
      case 2337:
        return GarminProduct.vivoActiveHr;
      case 2347:
        return GarminProduct.vivoSmartGpsHr;
      case 2348:
        return GarminProduct.vivoSmartHr;
      case 2361:
        return GarminProduct.vivoSmartHrAsia;
      case 2362:
        return GarminProduct.vivoSmartGpsHrAsia;
      case 2368:
        return GarminProduct.vivoMove;
      case 2379:
        return GarminProduct.variaTaillight;
      case 2396:
        return GarminProduct.fr235Asia;
      case 2397:
        return GarminProduct.fr235Japan;
      case 2398:
        return GarminProduct.variaVision;
      case 2406:
        return GarminProduct.vivoFit3;
      case 2407:
        return GarminProduct.fenix3Korea;
      case 2408:
        return GarminProduct.fenix3Sea;
      case 2413:
        return GarminProduct.fenix3Hr;
      case 2417:
        return GarminProduct.virbUltra30;
      case 2429:
        return GarminProduct.indexSmartScale;
      case 2431:
        return GarminProduct.fr235;
      case 2432:
        return GarminProduct.fenix3Chronos;
      case 2441:
        return GarminProduct.oregon7xx;
      case 2444:
        return GarminProduct.rino7xx;
      case 2457:
        return GarminProduct.epixKorea;
      case 2473:
        return GarminProduct.fenix3HrChn;
      case 2474:
        return GarminProduct.fenix3HrTwn;
      case 2475:
        return GarminProduct.fenix3HrJpn;
      case 2476:
        return GarminProduct.fenix3HrSea;
      case 2477:
        return GarminProduct.fenix3HrKor;
      case 2496:
        return GarminProduct.nautix;
      case 2497:
        return GarminProduct.vivoActiveHrApac;
      case 2512:
        return GarminProduct.oregon7xxWw;
      case 2530:
        return GarminProduct.edge820;
      case 2531:
        return GarminProduct.edgeExplore820;
      case 2533:
        return GarminProduct.fr735xtApac;
      case 2534:
        return GarminProduct.fr735xtJapan;
      case 2544:
        return GarminProduct.fenix5s;
      case 2547:
        return GarminProduct.d2BravoTitanium;
      case 2567:
        return GarminProduct.variaUt800;
      case 2593:
        return GarminProduct.runningDynamicsPod;
      case 2599:
        return GarminProduct.edge820China;
      case 2600:
        return GarminProduct.edge820Japan;
      case 2604:
        return GarminProduct.fenix5x;
      case 2606:
        return GarminProduct.vivoFitJr;
      case 2622:
        return GarminProduct.vivoSmart3;
      case 2623:
        return GarminProduct.vivoSport;
      case 2628:
        return GarminProduct.edge820Taiwan;
      case 2629:
        return GarminProduct.edge820Korea;
      case 2630:
        return GarminProduct.edge820Sea;
      case 2650:
        return GarminProduct.fr35Hebrew;
      case 2656:
        return GarminProduct.approachS60;
      case 2667:
        return GarminProduct.fr35Apac;
      case 2668:
        return GarminProduct.fr35Japan;
      case 2675:
        return GarminProduct.fenix3ChronosAsia;
      case 2687:
        return GarminProduct.virb360;
      case 2691:
        return GarminProduct.fr935;
      case 2697:
        return GarminProduct.fenix5;
      case 2700:
        return GarminProduct.vivoactive3;
      case 2733:
        return GarminProduct.fr235ChinaNfc;
      case 2769:
        return GarminProduct.foretrex601701;
      case 2772:
        return GarminProduct.vivoMoveHr;
      case 2713:
        return GarminProduct.edge1030;
      case 2787:
        return GarminProduct.vector3;
      case 2796:
        return GarminProduct.fenix5Asia;
      case 2797:
        return GarminProduct.fenix5sAsia;
      case 2798:
        return GarminProduct.fenix5xAsia;
      case 2806:
        return GarminProduct.approachZ80;
      case 2814:
        return GarminProduct.fr35Korea;
      case 2819:
        return GarminProduct.d2charlie;
      case 2831:
        return GarminProduct.vivoSmart3Apac;
      case 2832:
        return GarminProduct.vivoSportApac;
      case 2833:
        return GarminProduct.fr935Asia;
      case 2859:
        return GarminProduct.descent;
      case 2878:
        return GarminProduct.vivoFit4;
      case 2886:
        return GarminProduct.fr645;
      case 2888:
        return GarminProduct.fr645m;
      case 2891:
        return GarminProduct.fr30;
      case 2900:
        return GarminProduct.fenix5sPlus;
      case 2909:
        return GarminProduct.edge130;
      case 2924:
        return GarminProduct.edge1030Asia;
      case 2927:
        return GarminProduct.vivosmart4;
      case 2945:
        return GarminProduct.vivoMoveHrAsia;
      case 2962:
        return GarminProduct.approachX10;
      case 2977:
        return GarminProduct.fr30Asia;
      case 2988:
        return GarminProduct.vivoactive3mW;
      case 3003:
        return GarminProduct.fr645Asia;
      case 3004:
        return GarminProduct.fr645mAsia;
      case 3011:
        return GarminProduct.edgeExplore;
      case 3028:
        return GarminProduct.gpsmap66;
      case 3049:
        return GarminProduct.approachS10;
      case 3066:
        return GarminProduct.vivoactive3mL;
      case 3085:
        return GarminProduct.approachG80;
      case 3092:
        return GarminProduct.edge130Asia;
      case 3095:
        return GarminProduct.edge1030Bontrager;
      case 3110:
        return GarminProduct.fenix5Plus;
      case 3111:
        return GarminProduct.fenix5xPlus;
      case 3112:
        return GarminProduct.edge520Plus;
      case 3113:
        return GarminProduct.fr945;
      case 3121:
        return GarminProduct.edge530;
      case 3122:
        return GarminProduct.edge830;
      case 3126:
        return GarminProduct.instinctEsports;
      case 3134:
        return GarminProduct.fenix5sPlusApac;
      case 3135:
        return GarminProduct.fenix5xPlusApac;
      case 3142:
        return GarminProduct.edge520PlusApac;
      case 3144:
        return GarminProduct.fr235lAsia;
      case 3145:
        return GarminProduct.fr245Asia;
      case 3163:
        return GarminProduct.vivoActive3mApac;
      case 3192:
        return GarminProduct.gen3Bsm;
      case 3193:
        return GarminProduct.gen3Bcm;
      case 3218:
        return GarminProduct.vivoSmart4Asia;
      case 3224:
        return GarminProduct.vivoactive4Small;
      case 3225:
        return GarminProduct.vivoactive4Large;
      case 3226:
        return GarminProduct.venu;
      case 3246:
        return GarminProduct.marqDriver;
      case 3247:
        return GarminProduct.marqAviator;
      case 3248:
        return GarminProduct.marqCaptain;
      case 3249:
        return GarminProduct.marqCommander;
      case 3250:
        return GarminProduct.marqExpedition;
      case 3251:
        return GarminProduct.marqAthlete;
      case 3258:
        return GarminProduct.descentMk2;
      case 3284:
        return GarminProduct.gpsmap66i;
      case 3287:
        return GarminProduct.fenix6SSport;
      case 3288:
        return GarminProduct.fenix6S;
      case 3289:
        return GarminProduct.fenix6Sport;
      case 3290:
        return GarminProduct.fenix6;
      case 3291:
        return GarminProduct.fenix6x;
      case 3299:
        return GarminProduct.hrmDual;
      case 3300:
        return GarminProduct.hrmPro;
      case 3308:
        return GarminProduct.vivoMove3Premium;
      case 3314:
        return GarminProduct.approachS40;
      case 3321:
        return GarminProduct.fr245mAsia;
      case 3349:
        return GarminProduct.edge530Apac;
      case 3350:
        return GarminProduct.edge830Apac;
      case 3378:
        return GarminProduct.vivoMove3;
      case 3387:
        return GarminProduct.vivoActive4SmallAsia;
      case 3388:
        return GarminProduct.vivoActive4LargeAsia;
      case 3389:
        return GarminProduct.vivoActive4OledAsia;
      case 3405:
        return GarminProduct.swim2;
      case 3420:
        return GarminProduct.marqDriverAsia;
      case 3421:
        return GarminProduct.marqAviatorAsia;
      case 3422:
        return GarminProduct.vivoMove3Asia;
      case 3441:
        return GarminProduct.fr945Asia;
      case 3446:
        return GarminProduct.vivoActive3tChn;
      case 3448:
        return GarminProduct.marqCaptainAsia;
      case 3449:
        return GarminProduct.marqCommanderAsia;
      case 3450:
        return GarminProduct.marqExpeditionAsia;
      case 3451:
        return GarminProduct.marqAthleteAsia;
      case 3469:
        return GarminProduct.fr45Asia;
      case 3473:
        return GarminProduct.vivoactive3Daimler;
      case 3498:
        return GarminProduct.legacyRey;
      case 3499:
        return GarminProduct.legacyDarthVader;
      case 3500:
        return GarminProduct.legacyCaptainMarvel;
      case 3501:
        return GarminProduct.legacyFirstAvenger;
      case 3512:
        return GarminProduct.fenix6sSportAsia;
      case 3513:
        return GarminProduct.fenix6sAsia;
      case 3514:
        return GarminProduct.fenix6SportAsia;
      case 3515:
        return GarminProduct.fenix6Asia;
      case 3516:
        return GarminProduct.fenix6xAsia;
      case 3535:
        return GarminProduct.legacyCaptainMarvelAsia;
      case 3536:
        return GarminProduct.legacyFirstAvengerAsia;
      case 3537:
        return GarminProduct.legacyReyAsia;
      case 3538:
        return GarminProduct.legacyDarthVaderAsia;
      case 3542:
        return GarminProduct.descentMk2s;
      case 3558:
        return GarminProduct.edge130Plus;
      case 3570:
        return GarminProduct.edge1030Plus;
      case 3578:
        return GarminProduct.rally200;
      case 3589:
        return GarminProduct.fr745;
      case 3600:
        return GarminProduct.venusq;
      case 3615:
        return GarminProduct.lily;
      case 3624:
        return GarminProduct.marqAdventurer;
      case 3638:
        return GarminProduct.enduro;
      case 3648:
        return GarminProduct.marqAdventurerAsia;
      case 3639:
        return GarminProduct.swim2Apac;
      case 3702:
        return GarminProduct.descentMk2Asia;
      case 3703:
        return GarminProduct.venu2;
      case 3704:
        return GarminProduct.venu2s;
      case 3737:
        return GarminProduct.venuDaimlerAsia;
      case 3739:
        return GarminProduct.marqGolfer;
      case 3740:
        return GarminProduct.venuDaimler;
      case 3794:
        return GarminProduct.fr745Asia;
      case 3809:
        return GarminProduct.lilyAsia;
      case 3812:
        return GarminProduct.edge1030PlusAsia;
      case 3813:
        return GarminProduct.edge130PlusAsia;
      case 3823:
        return GarminProduct.approachS12;
      case 3872:
        return GarminProduct.enduroAsia;
      case 3837:
        return GarminProduct.venusqAsia;
      case 3850:
        return GarminProduct.marqGolferAsia;
      case 3927:
        return GarminProduct.approachG12;
      case 3930:
        return GarminProduct.descentMk2sAsia;
      case 3934:
        return GarminProduct.approachS42;
      case 3949:
        return GarminProduct.venu2sAsia;
      case 3950:
        return GarminProduct.venu2Asia;
      case 3986:
        return GarminProduct.approachS12Asia;
      case 4001:
        return GarminProduct.approachG12Asia;
      case 4002:
        return GarminProduct.approachS42Asia;
      case 10007:
        return GarminProduct.sdm4;
      case 10014:
        return GarminProduct.edgeRemote;
      case 20533:
        return GarminProduct.tacxTrainingAppWin;
      case 20534:
        return GarminProduct.tacxTrainingAppMac;
      case 20119:
        return GarminProduct.trainingCenter;
      case 30045:
        return GarminProduct.tacxTrainingAppAndroid;
      case 30046:
        return GarminProduct.tacxTrainingAppIos;
      case 30047:
        return GarminProduct.tacxTrainingAppLegacy;
      case 65531:
        return GarminProduct.connectiqSimulator;
      case 65532:
        return GarminProduct.androidAntplusPlugin;
      case 65534:
        return GarminProduct.connect;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AntplusDeviceType {
  antfs,
  bikePower,
  environmentSensorLegacy,
  multiSportSpeedDistance,
  control,
  fitnessEquipment,
  bloodPressure,
  geocacheNode,
  lightElectricVehicle,
  envSensor,
  racquet,
  controlHub,
  muscleOxygen,
  bikeLightMain,
  bikeLightShared,
  exd,
  bikeRadar,
  bikeAero,
  weightScale,
  heartRate,
  bikeSpeedCadence,
  bikeCadence,
  bikeSpeed,
  strideSpeedDistance
}

extension AntplusDeviceTypeExt on AntplusDeviceType {
  int get value {
    switch (this) {
      case AntplusDeviceType.antfs:
        return 1;
      case AntplusDeviceType.bikePower:
        return 11;
      case AntplusDeviceType.environmentSensorLegacy:
        return 12;
      case AntplusDeviceType.multiSportSpeedDistance:
        return 15;
      case AntplusDeviceType.control:
        return 16;
      case AntplusDeviceType.fitnessEquipment:
        return 17;
      case AntplusDeviceType.bloodPressure:
        return 18;
      case AntplusDeviceType.geocacheNode:
        return 19;
      case AntplusDeviceType.lightElectricVehicle:
        return 20;
      case AntplusDeviceType.envSensor:
        return 25;
      case AntplusDeviceType.racquet:
        return 26;
      case AntplusDeviceType.controlHub:
        return 27;
      case AntplusDeviceType.muscleOxygen:
        return 31;
      case AntplusDeviceType.bikeLightMain:
        return 35;
      case AntplusDeviceType.bikeLightShared:
        return 36;
      case AntplusDeviceType.exd:
        return 38;
      case AntplusDeviceType.bikeRadar:
        return 40;
      case AntplusDeviceType.bikeAero:
        return 46;
      case AntplusDeviceType.weightScale:
        return 119;
      case AntplusDeviceType.heartRate:
        return 120;
      case AntplusDeviceType.bikeSpeedCadence:
        return 121;
      case AntplusDeviceType.bikeCadence:
        return 122;
      case AntplusDeviceType.bikeSpeed:
        return 123;
      case AntplusDeviceType.strideSpeedDistance:
        return 124;
    }
  }

  static AntplusDeviceType fromValue(int value) {
    switch (value) {
      case 1:
        return AntplusDeviceType.antfs;
      case 11:
        return AntplusDeviceType.bikePower;
      case 12:
        return AntplusDeviceType.environmentSensorLegacy;
      case 15:
        return AntplusDeviceType.multiSportSpeedDistance;
      case 16:
        return AntplusDeviceType.control;
      case 17:
        return AntplusDeviceType.fitnessEquipment;
      case 18:
        return AntplusDeviceType.bloodPressure;
      case 19:
        return AntplusDeviceType.geocacheNode;
      case 20:
        return AntplusDeviceType.lightElectricVehicle;
      case 25:
        return AntplusDeviceType.envSensor;
      case 26:
        return AntplusDeviceType.racquet;
      case 27:
        return AntplusDeviceType.controlHub;
      case 31:
        return AntplusDeviceType.muscleOxygen;
      case 35:
        return AntplusDeviceType.bikeLightMain;
      case 36:
        return AntplusDeviceType.bikeLightShared;
      case 38:
        return AntplusDeviceType.exd;
      case 40:
        return AntplusDeviceType.bikeRadar;
      case 46:
        return AntplusDeviceType.bikeAero;
      case 119:
        return AntplusDeviceType.weightScale;
      case 120:
        return AntplusDeviceType.heartRate;
      case 121:
        return AntplusDeviceType.bikeSpeedCadence;
      case 122:
        return AntplusDeviceType.bikeCadence;
      case 123:
        return AntplusDeviceType.bikeSpeed;
      case 124:
        return AntplusDeviceType.strideSpeedDistance;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AntNetwork { public, antplus, antfs, private }

extension AntNetworkExt on AntNetwork {
  int get value {
    switch (this) {
      case AntNetwork.public:
        return 0;
      case AntNetwork.antplus:
        return 1;
      case AntNetwork.antfs:
        return 2;
      case AntNetwork.private:
        return 3;
    }
  }

  static AntNetwork fromValue(int value) {
    switch (value) {
      case 0:
        return AntNetwork.public;
      case 1:
        return AntNetwork.antplus;
      case 2:
        return AntNetwork.antfs;
      case 3:
        return AntNetwork.private;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WorkoutCapabilities {
  interval,
  custom,
  fitnessEquipment,
  firstbeat,
  newLeaf,
  tcx,
  speed,
  heartRate,
  distance,
  cadence,
  power,
  grade,
  resistance,
  protected
}

extension WorkoutCapabilitiesExt on WorkoutCapabilities {
  int get value {
    switch (this) {
      case WorkoutCapabilities.interval:
        return 1;
      case WorkoutCapabilities.custom:
        return 2;
      case WorkoutCapabilities.fitnessEquipment:
        return 4;
      case WorkoutCapabilities.firstbeat:
        return 8;
      case WorkoutCapabilities.newLeaf:
        return 16;
      case WorkoutCapabilities.tcx:
        return 32;
      case WorkoutCapabilities.speed:
        return 128;
      case WorkoutCapabilities.heartRate:
        return 256;
      case WorkoutCapabilities.distance:
        return 512;
      case WorkoutCapabilities.cadence:
        return 1024;
      case WorkoutCapabilities.power:
        return 2048;
      case WorkoutCapabilities.grade:
        return 4096;
      case WorkoutCapabilities.resistance:
        return 8192;
      case WorkoutCapabilities.protected:
        return 16384;
    }
  }

  static WorkoutCapabilities fromValue(int value) {
    switch (value) {
      case 1:
        return WorkoutCapabilities.interval;
      case 2:
        return WorkoutCapabilities.custom;
      case 4:
        return WorkoutCapabilities.fitnessEquipment;
      case 8:
        return WorkoutCapabilities.firstbeat;
      case 16:
        return WorkoutCapabilities.newLeaf;
      case 32:
        return WorkoutCapabilities.tcx;
      case 128:
        return WorkoutCapabilities.speed;
      case 256:
        return WorkoutCapabilities.heartRate;
      case 512:
        return WorkoutCapabilities.distance;
      case 1024:
        return WorkoutCapabilities.cadence;
      case 2048:
        return WorkoutCapabilities.power;
      case 4096:
        return WorkoutCapabilities.grade;
      case 8192:
        return WorkoutCapabilities.resistance;
      case 16384:
        return WorkoutCapabilities.protected;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BatteryStatus { new_, good, ok, low, critical, charging, unknown }

extension BatteryStatusExt on BatteryStatus {
  int get value {
    switch (this) {
      case BatteryStatus.new_:
        return 1;
      case BatteryStatus.good:
        return 2;
      case BatteryStatus.ok:
        return 3;
      case BatteryStatus.low:
        return 4;
      case BatteryStatus.critical:
        return 5;
      case BatteryStatus.charging:
        return 6;
      case BatteryStatus.unknown:
        return 7;
    }
  }

  static BatteryStatus fromValue(int value) {
    switch (value) {
      case 1:
        return BatteryStatus.new_;
      case 2:
        return BatteryStatus.good;
      case 3:
        return BatteryStatus.ok;
      case 4:
        return BatteryStatus.low;
      case 5:
        return BatteryStatus.critical;
      case 6:
        return BatteryStatus.charging;
      case 7:
        return BatteryStatus.unknown;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum HrType { normal, irregular }

extension HrTypeExt on HrType {
  int get value {
    switch (this) {
      case HrType.normal:
        return 0;
      case HrType.irregular:
        return 1;
    }
  }

  static HrType fromValue(int value) {
    switch (value) {
      case 0:
        return HrType.normal;
      case 1:
        return HrType.irregular;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CourseCapabilities {
  processed,
  valid,
  time,
  distance,
  position,
  heartRate,
  power,
  cadence,
  training,
  navigation,
  bikeway
}

extension CourseCapabilitiesExt on CourseCapabilities {
  int get value {
    switch (this) {
      case CourseCapabilities.processed:
        return 1;
      case CourseCapabilities.valid:
        return 2;
      case CourseCapabilities.time:
        return 4;
      case CourseCapabilities.distance:
        return 8;
      case CourseCapabilities.position:
        return 16;
      case CourseCapabilities.heartRate:
        return 32;
      case CourseCapabilities.power:
        return 64;
      case CourseCapabilities.cadence:
        return 128;
      case CourseCapabilities.training:
        return 256;
      case CourseCapabilities.navigation:
        return 512;
      case CourseCapabilities.bikeway:
        return 1024;
    }
  }

  static CourseCapabilities fromValue(int value) {
    switch (value) {
      case 1:
        return CourseCapabilities.processed;
      case 2:
        return CourseCapabilities.valid;
      case 4:
        return CourseCapabilities.time;
      case 8:
        return CourseCapabilities.distance;
      case 16:
        return CourseCapabilities.position;
      case 32:
        return CourseCapabilities.heartRate;
      case 64:
        return CourseCapabilities.power;
      case 128:
        return CourseCapabilities.cadence;
      case 256:
        return CourseCapabilities.training;
      case 512:
        return CourseCapabilities.navigation;
      case 1024:
        return CourseCapabilities.bikeway;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Weight { calculating }

extension WeightExt on Weight {
  int get value {
    switch (this) {
      case Weight.calculating:
        return 65534;
    }
  }

  static Weight fromValue(int value) {
    switch (value) {
      case 65534:
        return Weight.calculating;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WorkoutHr { bpmOffset }

extension WorkoutHrExt on WorkoutHr {
  int get value {
    switch (this) {
      case WorkoutHr.bpmOffset:
        return 100;
    }
  }

  static WorkoutHr fromValue(int value) {
    switch (value) {
      case 100:
        return WorkoutHr.bpmOffset;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WorkoutPower { wattsOffset }

extension WorkoutPowerExt on WorkoutPower {
  int get value {
    switch (this) {
      case WorkoutPower.wattsOffset:
        return 1000;
    }
  }

  static WorkoutPower fromValue(int value) {
    switch (value) {
      case 1000:
        return WorkoutPower.wattsOffset;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BpStatus {
  noError,
  errorIncompleteData,
  errorNoMeasurement,
  errorDataOutOfRange,
  errorIrregularHeartRate
}

extension BpStatusExt on BpStatus {
  int get value {
    switch (this) {
      case BpStatus.noError:
        return 0;
      case BpStatus.errorIncompleteData:
        return 1;
      case BpStatus.errorNoMeasurement:
        return 2;
      case BpStatus.errorDataOutOfRange:
        return 3;
      case BpStatus.errorIrregularHeartRate:
        return 4;
    }
  }

  static BpStatus fromValue(int value) {
    switch (value) {
      case 0:
        return BpStatus.noError;
      case 1:
        return BpStatus.errorIncompleteData;
      case 2:
        return BpStatus.errorNoMeasurement;
      case 3:
        return BpStatus.errorDataOutOfRange;
      case 4:
        return BpStatus.errorIrregularHeartRate;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum UserLocalId {
  localMin,
  localMax,
  stationaryMin,
  stationaryMax,
  portableMin,
  portableMax
}

extension UserLocalIdExt on UserLocalId {
  int get value {
    switch (this) {
      case UserLocalId.localMin:
        return 0;
      case UserLocalId.localMax:
        return 15;
      case UserLocalId.stationaryMin:
        return 16;
      case UserLocalId.stationaryMax:
        return 255;
      case UserLocalId.portableMin:
        return 256;
      case UserLocalId.portableMax:
        return 65534;
    }
  }

  static UserLocalId fromValue(int value) {
    switch (value) {
      case 0:
        return UserLocalId.localMin;
      case 15:
        return UserLocalId.localMax;
      case 16:
        return UserLocalId.stationaryMin;
      case 255:
        return UserLocalId.stationaryMax;
      case 256:
        return UserLocalId.portableMin;
      case 65534:
        return UserLocalId.portableMax;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SwimStroke {
  freestyle,
  backstroke,
  breaststroke,
  butterfly,
  drill,
  mixed,
  im
}

extension SwimStrokeExt on SwimStroke {
  int get value {
    switch (this) {
      case SwimStroke.freestyle:
        return 0;
      case SwimStroke.backstroke:
        return 1;
      case SwimStroke.breaststroke:
        return 2;
      case SwimStroke.butterfly:
        return 3;
      case SwimStroke.drill:
        return 4;
      case SwimStroke.mixed:
        return 5;
      case SwimStroke.im:
        return 6;
    }
  }

  static SwimStroke fromValue(int value) {
    switch (value) {
      case 0:
        return SwimStroke.freestyle;
      case 1:
        return SwimStroke.backstroke;
      case 2:
        return SwimStroke.breaststroke;
      case 3:
        return SwimStroke.butterfly;
      case 4:
        return SwimStroke.drill;
      case 5:
        return SwimStroke.mixed;
      case 6:
        return SwimStroke.im;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ActivityType {
  generic,
  running,
  cycling,
  transition,
  fitnessEquipment,
  swimming,
  walking,
  sedentary,
  all
}

extension ActivityTypeExt on ActivityType {
  int get value {
    switch (this) {
      case ActivityType.generic:
        return 0;
      case ActivityType.running:
        return 1;
      case ActivityType.cycling:
        return 2;
      case ActivityType.transition:
        return 3;
      case ActivityType.fitnessEquipment:
        return 4;
      case ActivityType.swimming:
        return 5;
      case ActivityType.walking:
        return 6;
      case ActivityType.sedentary:
        return 8;
      case ActivityType.all:
        return 254;
    }
  }

  static ActivityType fromValue(int value) {
    switch (value) {
      case 0:
        return ActivityType.generic;
      case 1:
        return ActivityType.running;
      case 2:
        return ActivityType.cycling;
      case 3:
        return ActivityType.transition;
      case 4:
        return ActivityType.fitnessEquipment;
      case 5:
        return ActivityType.swimming;
      case 6:
        return ActivityType.walking;
      case 8:
        return ActivityType.sedentary;
      case 254:
        return ActivityType.all;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ActivitySubtype {
  generic,
  treadmill,
  street,
  trail,
  track,
  spin,
  indoorCycling,
  road,
  mountain,
  downhill,
  recumbent,
  cyclocross,
  handCycling,
  trackCycling,
  indoorRowing,
  elliptical,
  stairClimbing,
  lapSwimming,
  openWater,
  all
}

extension ActivitySubtypeExt on ActivitySubtype {
  int get value {
    switch (this) {
      case ActivitySubtype.generic:
        return 0;
      case ActivitySubtype.treadmill:
        return 1;
      case ActivitySubtype.street:
        return 2;
      case ActivitySubtype.trail:
        return 3;
      case ActivitySubtype.track:
        return 4;
      case ActivitySubtype.spin:
        return 5;
      case ActivitySubtype.indoorCycling:
        return 6;
      case ActivitySubtype.road:
        return 7;
      case ActivitySubtype.mountain:
        return 8;
      case ActivitySubtype.downhill:
        return 9;
      case ActivitySubtype.recumbent:
        return 10;
      case ActivitySubtype.cyclocross:
        return 11;
      case ActivitySubtype.handCycling:
        return 12;
      case ActivitySubtype.trackCycling:
        return 13;
      case ActivitySubtype.indoorRowing:
        return 14;
      case ActivitySubtype.elliptical:
        return 15;
      case ActivitySubtype.stairClimbing:
        return 16;
      case ActivitySubtype.lapSwimming:
        return 17;
      case ActivitySubtype.openWater:
        return 18;
      case ActivitySubtype.all:
        return 254;
    }
  }

  static ActivitySubtype fromValue(int value) {
    switch (value) {
      case 0:
        return ActivitySubtype.generic;
      case 1:
        return ActivitySubtype.treadmill;
      case 2:
        return ActivitySubtype.street;
      case 3:
        return ActivitySubtype.trail;
      case 4:
        return ActivitySubtype.track;
      case 5:
        return ActivitySubtype.spin;
      case 6:
        return ActivitySubtype.indoorCycling;
      case 7:
        return ActivitySubtype.road;
      case 8:
        return ActivitySubtype.mountain;
      case 9:
        return ActivitySubtype.downhill;
      case 10:
        return ActivitySubtype.recumbent;
      case 11:
        return ActivitySubtype.cyclocross;
      case 12:
        return ActivitySubtype.handCycling;
      case 13:
        return ActivitySubtype.trackCycling;
      case 14:
        return ActivitySubtype.indoorRowing;
      case 15:
        return ActivitySubtype.elliptical;
      case 16:
        return ActivitySubtype.stairClimbing;
      case 17:
        return ActivitySubtype.lapSwimming;
      case 18:
        return ActivitySubtype.openWater;
      case 254:
        return ActivitySubtype.all;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ActivityLevel { low, medium, high }

extension ActivityLevelExt on ActivityLevel {
  int get value {
    switch (this) {
      case ActivityLevel.low:
        return 0;
      case ActivityLevel.medium:
        return 1;
      case ActivityLevel.high:
        return 2;
    }
  }

  static ActivityLevel fromValue(int value) {
    switch (value) {
      case 0:
        return ActivityLevel.low;
      case 1:
        return ActivityLevel.medium;
      case 2:
        return ActivityLevel.high;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum Side { right, left }

extension SideExt on Side {
  int get value {
    switch (this) {
      case Side.right:
        return 0;
      case Side.left:
        return 1;
    }
  }

  static Side fromValue(int value) {
    switch (value) {
      case 0:
        return Side.right;
      case 1:
        return Side.left;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LeftRightBalance { mask, right }

extension LeftRightBalanceExt on LeftRightBalance {
  int get value {
    switch (this) {
      case LeftRightBalance.mask:
        return 127;
      case LeftRightBalance.right:
        return 128;
    }
  }

  static LeftRightBalance fromValue(int value) {
    switch (value) {
      case 127:
        return LeftRightBalance.mask;
      case 128:
        return LeftRightBalance.right;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LeftRightBalance100 { mask, right }

extension LeftRightBalance100Ext on LeftRightBalance100 {
  int get value {
    switch (this) {
      case LeftRightBalance100.mask:
        return 16383;
      case LeftRightBalance100.right:
        return 32768;
    }
  }

  static LeftRightBalance100 fromValue(int value) {
    switch (value) {
      case 16383:
        return LeftRightBalance100.mask;
      case 32768:
        return LeftRightBalance100.right;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LengthType { idle, active }

extension LengthTypeExt on LengthType {
  int get value {
    switch (this) {
      case LengthType.idle:
        return 0;
      case LengthType.active:
        return 1;
    }
  }

  static LengthType fromValue(int value) {
    switch (value) {
      case 0:
        return LengthType.idle;
      case 1:
        return LengthType.active;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DayOfWeek {
  sunday,
  monday,
  tuesday,
  wednesday,
  thursday,
  friday,
  saturday
}

extension DayOfWeekExt on DayOfWeek {
  int get value {
    switch (this) {
      case DayOfWeek.sunday:
        return 0;
      case DayOfWeek.monday:
        return 1;
      case DayOfWeek.tuesday:
        return 2;
      case DayOfWeek.wednesday:
        return 3;
      case DayOfWeek.thursday:
        return 4;
      case DayOfWeek.friday:
        return 5;
      case DayOfWeek.saturday:
        return 6;
    }
  }

  static DayOfWeek fromValue(int value) {
    switch (value) {
      case 0:
        return DayOfWeek.sunday;
      case 1:
        return DayOfWeek.monday;
      case 2:
        return DayOfWeek.tuesday;
      case 3:
        return DayOfWeek.wednesday;
      case 4:
        return DayOfWeek.thursday;
      case 5:
        return DayOfWeek.friday;
      case 6:
        return DayOfWeek.saturday;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ConnectivityCapabilities {
  bluetooth,
  bluetoothLe,
  ant,
  activityUpload,
  courseDownload,
  workoutDownload,
  liveTrack,
  weatherConditions,
  weatherAlerts,
  gpsEphemerisDownload,
  explicitArchive,
  setupIncomplete,
  continueSyncAfterSoftwareUpdate,
  connectIqAppDownload,
  golfCourseDownload,
  deviceInitiatesSync,
  connectIqWatchAppDownload,
  connectIqWidgetDownload,
  connectIqWatchFaceDownload,
  connectIqDataFieldDownload,
  connectIqAppManagment,
  swingSensor,
  swingSensorRemote,
  incidentDetection,
  audioPrompts,
  wifiVerification,
  trueUp,
  findMyWatch,
  remoteManualSync,
  liveTrackAutoStart,
  liveTrackMessaging,
  instantInput
}

extension ConnectivityCapabilitiesExt on ConnectivityCapabilities {
  int get value {
    switch (this) {
      case ConnectivityCapabilities.bluetooth:
        return 1;
      case ConnectivityCapabilities.bluetoothLe:
        return 2;
      case ConnectivityCapabilities.ant:
        return 4;
      case ConnectivityCapabilities.activityUpload:
        return 8;
      case ConnectivityCapabilities.courseDownload:
        return 16;
      case ConnectivityCapabilities.workoutDownload:
        return 32;
      case ConnectivityCapabilities.liveTrack:
        return 64;
      case ConnectivityCapabilities.weatherConditions:
        return 128;
      case ConnectivityCapabilities.weatherAlerts:
        return 256;
      case ConnectivityCapabilities.gpsEphemerisDownload:
        return 512;
      case ConnectivityCapabilities.explicitArchive:
        return 1024;
      case ConnectivityCapabilities.setupIncomplete:
        return 2048;
      case ConnectivityCapabilities.continueSyncAfterSoftwareUpdate:
        return 4096;
      case ConnectivityCapabilities.connectIqAppDownload:
        return 8192;
      case ConnectivityCapabilities.golfCourseDownload:
        return 16384;
      case ConnectivityCapabilities.deviceInitiatesSync:
        return 32768;
      case ConnectivityCapabilities.connectIqWatchAppDownload:
        return 65536;
      case ConnectivityCapabilities.connectIqWidgetDownload:
        return 131072;
      case ConnectivityCapabilities.connectIqWatchFaceDownload:
        return 262144;
      case ConnectivityCapabilities.connectIqDataFieldDownload:
        return 524288;
      case ConnectivityCapabilities.connectIqAppManagment:
        return 1048576;
      case ConnectivityCapabilities.swingSensor:
        return 2097152;
      case ConnectivityCapabilities.swingSensorRemote:
        return 4194304;
      case ConnectivityCapabilities.incidentDetection:
        return 8388608;
      case ConnectivityCapabilities.audioPrompts:
        return 16777216;
      case ConnectivityCapabilities.wifiVerification:
        return 33554432;
      case ConnectivityCapabilities.trueUp:
        return 67108864;
      case ConnectivityCapabilities.findMyWatch:
        return 134217728;
      case ConnectivityCapabilities.remoteManualSync:
        return 268435456;
      case ConnectivityCapabilities.liveTrackAutoStart:
        return 536870912;
      case ConnectivityCapabilities.liveTrackMessaging:
        return 1073741824;
      case ConnectivityCapabilities.instantInput:
        return 2147483648;
    }
  }

  static ConnectivityCapabilities fromValue(int value) {
    switch (value) {
      case 1:
        return ConnectivityCapabilities.bluetooth;
      case 2:
        return ConnectivityCapabilities.bluetoothLe;
      case 4:
        return ConnectivityCapabilities.ant;
      case 8:
        return ConnectivityCapabilities.activityUpload;
      case 16:
        return ConnectivityCapabilities.courseDownload;
      case 32:
        return ConnectivityCapabilities.workoutDownload;
      case 64:
        return ConnectivityCapabilities.liveTrack;
      case 128:
        return ConnectivityCapabilities.weatherConditions;
      case 256:
        return ConnectivityCapabilities.weatherAlerts;
      case 512:
        return ConnectivityCapabilities.gpsEphemerisDownload;
      case 1024:
        return ConnectivityCapabilities.explicitArchive;
      case 2048:
        return ConnectivityCapabilities.setupIncomplete;
      case 4096:
        return ConnectivityCapabilities.continueSyncAfterSoftwareUpdate;
      case 8192:
        return ConnectivityCapabilities.connectIqAppDownload;
      case 16384:
        return ConnectivityCapabilities.golfCourseDownload;
      case 32768:
        return ConnectivityCapabilities.deviceInitiatesSync;
      case 65536:
        return ConnectivityCapabilities.connectIqWatchAppDownload;
      case 131072:
        return ConnectivityCapabilities.connectIqWidgetDownload;
      case 262144:
        return ConnectivityCapabilities.connectIqWatchFaceDownload;
      case 524288:
        return ConnectivityCapabilities.connectIqDataFieldDownload;
      case 1048576:
        return ConnectivityCapabilities.connectIqAppManagment;
      case 2097152:
        return ConnectivityCapabilities.swingSensor;
      case 4194304:
        return ConnectivityCapabilities.swingSensorRemote;
      case 8388608:
        return ConnectivityCapabilities.incidentDetection;
      case 16777216:
        return ConnectivityCapabilities.audioPrompts;
      case 33554432:
        return ConnectivityCapabilities.wifiVerification;
      case 67108864:
        return ConnectivityCapabilities.trueUp;
      case 134217728:
        return ConnectivityCapabilities.findMyWatch;
      case 268435456:
        return ConnectivityCapabilities.remoteManualSync;
      case 536870912:
        return ConnectivityCapabilities.liveTrackAutoStart;
      case 1073741824:
        return ConnectivityCapabilities.liveTrackMessaging;
      case 2147483648:
        return ConnectivityCapabilities.instantInput;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WeatherReport { current, hourlyForecast, dailyForecast }

extension WeatherReportExt on WeatherReport {
  int get value {
    switch (this) {
      case WeatherReport.current:
        return 0;
      case WeatherReport.hourlyForecast:
        return 1;
      case WeatherReport.dailyForecast:
        return 2;
    }
  }

  static WeatherReport fromValue(int value) {
    switch (value) {
      case 0:
        return WeatherReport.current;
      case 1:
        return WeatherReport.hourlyForecast;
      case 2:
        return WeatherReport.dailyForecast;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WeatherStatus {
  clear,
  partlyCloudy,
  mostlyCloudy,
  rain,
  snow,
  windy,
  thunderstorms,
  wintryMix,
  fog,
  hazy,
  hail,
  scatteredShowers,
  scatteredThunderstorms,
  unknownPrecipitation,
  lightRain,
  heavyRain,
  lightSnow,
  heavySnow,
  lightRainSnow,
  heavyRainSnow,
  cloudy
}

extension WeatherStatusExt on WeatherStatus {
  int get value {
    switch (this) {
      case WeatherStatus.clear:
        return 0;
      case WeatherStatus.partlyCloudy:
        return 1;
      case WeatherStatus.mostlyCloudy:
        return 2;
      case WeatherStatus.rain:
        return 3;
      case WeatherStatus.snow:
        return 4;
      case WeatherStatus.windy:
        return 5;
      case WeatherStatus.thunderstorms:
        return 6;
      case WeatherStatus.wintryMix:
        return 7;
      case WeatherStatus.fog:
        return 8;
      case WeatherStatus.hazy:
        return 11;
      case WeatherStatus.hail:
        return 12;
      case WeatherStatus.scatteredShowers:
        return 13;
      case WeatherStatus.scatteredThunderstorms:
        return 14;
      case WeatherStatus.unknownPrecipitation:
        return 15;
      case WeatherStatus.lightRain:
        return 16;
      case WeatherStatus.heavyRain:
        return 17;
      case WeatherStatus.lightSnow:
        return 18;
      case WeatherStatus.heavySnow:
        return 19;
      case WeatherStatus.lightRainSnow:
        return 20;
      case WeatherStatus.heavyRainSnow:
        return 21;
      case WeatherStatus.cloudy:
        return 22;
    }
  }

  static WeatherStatus fromValue(int value) {
    switch (value) {
      case 0:
        return WeatherStatus.clear;
      case 1:
        return WeatherStatus.partlyCloudy;
      case 2:
        return WeatherStatus.mostlyCloudy;
      case 3:
        return WeatherStatus.rain;
      case 4:
        return WeatherStatus.snow;
      case 5:
        return WeatherStatus.windy;
      case 6:
        return WeatherStatus.thunderstorms;
      case 7:
        return WeatherStatus.wintryMix;
      case 8:
        return WeatherStatus.fog;
      case 11:
        return WeatherStatus.hazy;
      case 12:
        return WeatherStatus.hail;
      case 13:
        return WeatherStatus.scatteredShowers;
      case 14:
        return WeatherStatus.scatteredThunderstorms;
      case 15:
        return WeatherStatus.unknownPrecipitation;
      case 16:
        return WeatherStatus.lightRain;
      case 17:
        return WeatherStatus.heavyRain;
      case 18:
        return WeatherStatus.lightSnow;
      case 19:
        return WeatherStatus.heavySnow;
      case 20:
        return WeatherStatus.lightRainSnow;
      case 21:
        return WeatherStatus.heavyRainSnow;
      case 22:
        return WeatherStatus.cloudy;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WeatherSeverity { unknown, warning, watch, advisory, statement }

extension WeatherSeverityExt on WeatherSeverity {
  int get value {
    switch (this) {
      case WeatherSeverity.unknown:
        return 0;
      case WeatherSeverity.warning:
        return 1;
      case WeatherSeverity.watch:
        return 2;
      case WeatherSeverity.advisory:
        return 3;
      case WeatherSeverity.statement:
        return 4;
    }
  }

  static WeatherSeverity fromValue(int value) {
    switch (value) {
      case 0:
        return WeatherSeverity.unknown;
      case 1:
        return WeatherSeverity.warning;
      case 2:
        return WeatherSeverity.watch;
      case 3:
        return WeatherSeverity.advisory;
      case 4:
        return WeatherSeverity.statement;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WeatherSevereType {
  unspecified,
  tornado,
  tsunami,
  hurricane,
  extremeWind,
  typhoon,
  inlandHurricane,
  hurricaneForceWind,
  waterspout,
  severeThunderstorm,
  wreckhouseWinds,
  lesSuetesWind,
  avalanche,
  flashFlood,
  tropicalStorm,
  inlandTropicalStorm,
  blizzard,
  iceStorm,
  freezingRain,
  debrisFlow,
  flashFreeze,
  dustStorm,
  highWind,
  winterStorm,
  heavyFreezingSpray,
  extremeCold,
  windChill,
  coldWave,
  heavySnowAlert,
  lakeEffectBlowingSnow,
  snowSquall,
  lakeEffectSnow,
  winterWeather,
  sleet,
  snowfall,
  snowAndBlowingSnow,
  blowingSnow,
  snowAlert,
  arcticOutflow,
  freezingDrizzle,
  storm,
  stormSurge,
  rainfall,
  arealFlood,
  coastalFlood,
  lakeshoreFlood,
  excessiveHeat,
  heat,
  weather,
  highHeatAndHumidity,
  humidexAndHealth,
  humidex,
  gale,
  freezingSpray,
  specialMarine,
  squall,
  strongWind,
  lakeWind,
  marineWeather,
  wind,
  smallCraftHazardousSeas,
  hazardousSeas,
  smallCraft,
  smallCraftWinds,
  smallCraftRoughBar,
  highWaterLevel,
  ashfall,
  freezingFog,
  denseFog,
  denseSmoke,
  blowingDust,
  hardFreeze,
  freeze,
  frost,
  fireWeather,
  flood,
  ripTide,
  highSurf,
  smog,
  airQuality,
  briskWind,
  airStagnation,
  lowWater,
  hydrological,
  specialWeather
}

extension WeatherSevereTypeExt on WeatherSevereType {
  int get value {
    switch (this) {
      case WeatherSevereType.unspecified:
        return 0;
      case WeatherSevereType.tornado:
        return 1;
      case WeatherSevereType.tsunami:
        return 2;
      case WeatherSevereType.hurricane:
        return 3;
      case WeatherSevereType.extremeWind:
        return 4;
      case WeatherSevereType.typhoon:
        return 5;
      case WeatherSevereType.inlandHurricane:
        return 6;
      case WeatherSevereType.hurricaneForceWind:
        return 7;
      case WeatherSevereType.waterspout:
        return 8;
      case WeatherSevereType.severeThunderstorm:
        return 9;
      case WeatherSevereType.wreckhouseWinds:
        return 10;
      case WeatherSevereType.lesSuetesWind:
        return 11;
      case WeatherSevereType.avalanche:
        return 12;
      case WeatherSevereType.flashFlood:
        return 13;
      case WeatherSevereType.tropicalStorm:
        return 14;
      case WeatherSevereType.inlandTropicalStorm:
        return 15;
      case WeatherSevereType.blizzard:
        return 16;
      case WeatherSevereType.iceStorm:
        return 17;
      case WeatherSevereType.freezingRain:
        return 18;
      case WeatherSevereType.debrisFlow:
        return 19;
      case WeatherSevereType.flashFreeze:
        return 20;
      case WeatherSevereType.dustStorm:
        return 21;
      case WeatherSevereType.highWind:
        return 22;
      case WeatherSevereType.winterStorm:
        return 23;
      case WeatherSevereType.heavyFreezingSpray:
        return 24;
      case WeatherSevereType.extremeCold:
        return 25;
      case WeatherSevereType.windChill:
        return 26;
      case WeatherSevereType.coldWave:
        return 27;
      case WeatherSevereType.heavySnowAlert:
        return 28;
      case WeatherSevereType.lakeEffectBlowingSnow:
        return 29;
      case WeatherSevereType.snowSquall:
        return 30;
      case WeatherSevereType.lakeEffectSnow:
        return 31;
      case WeatherSevereType.winterWeather:
        return 32;
      case WeatherSevereType.sleet:
        return 33;
      case WeatherSevereType.snowfall:
        return 34;
      case WeatherSevereType.snowAndBlowingSnow:
        return 35;
      case WeatherSevereType.blowingSnow:
        return 36;
      case WeatherSevereType.snowAlert:
        return 37;
      case WeatherSevereType.arcticOutflow:
        return 38;
      case WeatherSevereType.freezingDrizzle:
        return 39;
      case WeatherSevereType.storm:
        return 40;
      case WeatherSevereType.stormSurge:
        return 41;
      case WeatherSevereType.rainfall:
        return 42;
      case WeatherSevereType.arealFlood:
        return 43;
      case WeatherSevereType.coastalFlood:
        return 44;
      case WeatherSevereType.lakeshoreFlood:
        return 45;
      case WeatherSevereType.excessiveHeat:
        return 46;
      case WeatherSevereType.heat:
        return 47;
      case WeatherSevereType.weather:
        return 48;
      case WeatherSevereType.highHeatAndHumidity:
        return 49;
      case WeatherSevereType.humidexAndHealth:
        return 50;
      case WeatherSevereType.humidex:
        return 51;
      case WeatherSevereType.gale:
        return 52;
      case WeatherSevereType.freezingSpray:
        return 53;
      case WeatherSevereType.specialMarine:
        return 54;
      case WeatherSevereType.squall:
        return 55;
      case WeatherSevereType.strongWind:
        return 56;
      case WeatherSevereType.lakeWind:
        return 57;
      case WeatherSevereType.marineWeather:
        return 58;
      case WeatherSevereType.wind:
        return 59;
      case WeatherSevereType.smallCraftHazardousSeas:
        return 60;
      case WeatherSevereType.hazardousSeas:
        return 61;
      case WeatherSevereType.smallCraft:
        return 62;
      case WeatherSevereType.smallCraftWinds:
        return 63;
      case WeatherSevereType.smallCraftRoughBar:
        return 64;
      case WeatherSevereType.highWaterLevel:
        return 65;
      case WeatherSevereType.ashfall:
        return 66;
      case WeatherSevereType.freezingFog:
        return 67;
      case WeatherSevereType.denseFog:
        return 68;
      case WeatherSevereType.denseSmoke:
        return 69;
      case WeatherSevereType.blowingDust:
        return 70;
      case WeatherSevereType.hardFreeze:
        return 71;
      case WeatherSevereType.freeze:
        return 72;
      case WeatherSevereType.frost:
        return 73;
      case WeatherSevereType.fireWeather:
        return 74;
      case WeatherSevereType.flood:
        return 75;
      case WeatherSevereType.ripTide:
        return 76;
      case WeatherSevereType.highSurf:
        return 77;
      case WeatherSevereType.smog:
        return 78;
      case WeatherSevereType.airQuality:
        return 79;
      case WeatherSevereType.briskWind:
        return 80;
      case WeatherSevereType.airStagnation:
        return 81;
      case WeatherSevereType.lowWater:
        return 82;
      case WeatherSevereType.hydrological:
        return 83;
      case WeatherSevereType.specialWeather:
        return 84;
    }
  }

  static WeatherSevereType fromValue(int value) {
    switch (value) {
      case 0:
        return WeatherSevereType.unspecified;
      case 1:
        return WeatherSevereType.tornado;
      case 2:
        return WeatherSevereType.tsunami;
      case 3:
        return WeatherSevereType.hurricane;
      case 4:
        return WeatherSevereType.extremeWind;
      case 5:
        return WeatherSevereType.typhoon;
      case 6:
        return WeatherSevereType.inlandHurricane;
      case 7:
        return WeatherSevereType.hurricaneForceWind;
      case 8:
        return WeatherSevereType.waterspout;
      case 9:
        return WeatherSevereType.severeThunderstorm;
      case 10:
        return WeatherSevereType.wreckhouseWinds;
      case 11:
        return WeatherSevereType.lesSuetesWind;
      case 12:
        return WeatherSevereType.avalanche;
      case 13:
        return WeatherSevereType.flashFlood;
      case 14:
        return WeatherSevereType.tropicalStorm;
      case 15:
        return WeatherSevereType.inlandTropicalStorm;
      case 16:
        return WeatherSevereType.blizzard;
      case 17:
        return WeatherSevereType.iceStorm;
      case 18:
        return WeatherSevereType.freezingRain;
      case 19:
        return WeatherSevereType.debrisFlow;
      case 20:
        return WeatherSevereType.flashFreeze;
      case 21:
        return WeatherSevereType.dustStorm;
      case 22:
        return WeatherSevereType.highWind;
      case 23:
        return WeatherSevereType.winterStorm;
      case 24:
        return WeatherSevereType.heavyFreezingSpray;
      case 25:
        return WeatherSevereType.extremeCold;
      case 26:
        return WeatherSevereType.windChill;
      case 27:
        return WeatherSevereType.coldWave;
      case 28:
        return WeatherSevereType.heavySnowAlert;
      case 29:
        return WeatherSevereType.lakeEffectBlowingSnow;
      case 30:
        return WeatherSevereType.snowSquall;
      case 31:
        return WeatherSevereType.lakeEffectSnow;
      case 32:
        return WeatherSevereType.winterWeather;
      case 33:
        return WeatherSevereType.sleet;
      case 34:
        return WeatherSevereType.snowfall;
      case 35:
        return WeatherSevereType.snowAndBlowingSnow;
      case 36:
        return WeatherSevereType.blowingSnow;
      case 37:
        return WeatherSevereType.snowAlert;
      case 38:
        return WeatherSevereType.arcticOutflow;
      case 39:
        return WeatherSevereType.freezingDrizzle;
      case 40:
        return WeatherSevereType.storm;
      case 41:
        return WeatherSevereType.stormSurge;
      case 42:
        return WeatherSevereType.rainfall;
      case 43:
        return WeatherSevereType.arealFlood;
      case 44:
        return WeatherSevereType.coastalFlood;
      case 45:
        return WeatherSevereType.lakeshoreFlood;
      case 46:
        return WeatherSevereType.excessiveHeat;
      case 47:
        return WeatherSevereType.heat;
      case 48:
        return WeatherSevereType.weather;
      case 49:
        return WeatherSevereType.highHeatAndHumidity;
      case 50:
        return WeatherSevereType.humidexAndHealth;
      case 51:
        return WeatherSevereType.humidex;
      case 52:
        return WeatherSevereType.gale;
      case 53:
        return WeatherSevereType.freezingSpray;
      case 54:
        return WeatherSevereType.specialMarine;
      case 55:
        return WeatherSevereType.squall;
      case 56:
        return WeatherSevereType.strongWind;
      case 57:
        return WeatherSevereType.lakeWind;
      case 58:
        return WeatherSevereType.marineWeather;
      case 59:
        return WeatherSevereType.wind;
      case 60:
        return WeatherSevereType.smallCraftHazardousSeas;
      case 61:
        return WeatherSevereType.hazardousSeas;
      case 62:
        return WeatherSevereType.smallCraft;
      case 63:
        return WeatherSevereType.smallCraftWinds;
      case 64:
        return WeatherSevereType.smallCraftRoughBar;
      case 65:
        return WeatherSevereType.highWaterLevel;
      case 66:
        return WeatherSevereType.ashfall;
      case 67:
        return WeatherSevereType.freezingFog;
      case 68:
        return WeatherSevereType.denseFog;
      case 69:
        return WeatherSevereType.denseSmoke;
      case 70:
        return WeatherSevereType.blowingDust;
      case 71:
        return WeatherSevereType.hardFreeze;
      case 72:
        return WeatherSevereType.freeze;
      case 73:
        return WeatherSevereType.frost;
      case 74:
        return WeatherSevereType.fireWeather;
      case 75:
        return WeatherSevereType.flood;
      case 76:
        return WeatherSevereType.ripTide;
      case 77:
        return WeatherSevereType.highSurf;
      case 78:
        return WeatherSevereType.smog;
      case 79:
        return WeatherSevereType.airQuality;
      case 80:
        return WeatherSevereType.briskWind;
      case 81:
        return WeatherSevereType.airStagnation;
      case 82:
        return WeatherSevereType.lowWater;
      case 83:
        return WeatherSevereType.hydrological;
      case 84:
        return WeatherSevereType.specialWeather;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum StrokeType { noEvent, other, serve, forehand, backhand, smash }

extension StrokeTypeExt on StrokeType {
  int get value {
    switch (this) {
      case StrokeType.noEvent:
        return 0;
      case StrokeType.other:
        return 1;
      case StrokeType.serve:
        return 2;
      case StrokeType.forehand:
        return 3;
      case StrokeType.backhand:
        return 4;
      case StrokeType.smash:
        return 5;
    }
  }

  static StrokeType fromValue(int value) {
    switch (value) {
      case 0:
        return StrokeType.noEvent;
      case 1:
        return StrokeType.other;
      case 2:
        return StrokeType.serve;
      case 3:
        return StrokeType.forehand;
      case 4:
        return StrokeType.backhand;
      case 5:
        return StrokeType.smash;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BodyLocation {
  leftLeg,
  leftCalf,
  leftShin,
  leftHamstring,
  leftQuad,
  leftGlute,
  rightLeg,
  rightCalf,
  rightShin,
  rightHamstring,
  rightQuad,
  rightGlute,
  torsoBack,
  leftLowerBack,
  leftUpperBack,
  rightLowerBack,
  rightUpperBack,
  torsoFront,
  leftAbdomen,
  leftChest,
  rightAbdomen,
  rightChest,
  leftArm,
  leftShoulder,
  leftBicep,
  leftTricep,
  leftBrachioradialis,
  leftForearmExtensors,
  rightArm,
  rightShoulder,
  rightBicep,
  rightTricep,
  rightBrachioradialis,
  rightForearmExtensors,
  neck,
  throat,
  waistMidBack,
  waistFront,
  waistLeft,
  waistRight
}

extension BodyLocationExt on BodyLocation {
  int get value {
    switch (this) {
      case BodyLocation.leftLeg:
        return 0;
      case BodyLocation.leftCalf:
        return 1;
      case BodyLocation.leftShin:
        return 2;
      case BodyLocation.leftHamstring:
        return 3;
      case BodyLocation.leftQuad:
        return 4;
      case BodyLocation.leftGlute:
        return 5;
      case BodyLocation.rightLeg:
        return 6;
      case BodyLocation.rightCalf:
        return 7;
      case BodyLocation.rightShin:
        return 8;
      case BodyLocation.rightHamstring:
        return 9;
      case BodyLocation.rightQuad:
        return 10;
      case BodyLocation.rightGlute:
        return 11;
      case BodyLocation.torsoBack:
        return 12;
      case BodyLocation.leftLowerBack:
        return 13;
      case BodyLocation.leftUpperBack:
        return 14;
      case BodyLocation.rightLowerBack:
        return 15;
      case BodyLocation.rightUpperBack:
        return 16;
      case BodyLocation.torsoFront:
        return 17;
      case BodyLocation.leftAbdomen:
        return 18;
      case BodyLocation.leftChest:
        return 19;
      case BodyLocation.rightAbdomen:
        return 20;
      case BodyLocation.rightChest:
        return 21;
      case BodyLocation.leftArm:
        return 22;
      case BodyLocation.leftShoulder:
        return 23;
      case BodyLocation.leftBicep:
        return 24;
      case BodyLocation.leftTricep:
        return 25;
      case BodyLocation.leftBrachioradialis:
        return 26;
      case BodyLocation.leftForearmExtensors:
        return 27;
      case BodyLocation.rightArm:
        return 28;
      case BodyLocation.rightShoulder:
        return 29;
      case BodyLocation.rightBicep:
        return 30;
      case BodyLocation.rightTricep:
        return 31;
      case BodyLocation.rightBrachioradialis:
        return 32;
      case BodyLocation.rightForearmExtensors:
        return 33;
      case BodyLocation.neck:
        return 34;
      case BodyLocation.throat:
        return 35;
      case BodyLocation.waistMidBack:
        return 36;
      case BodyLocation.waistFront:
        return 37;
      case BodyLocation.waistLeft:
        return 38;
      case BodyLocation.waistRight:
        return 39;
    }
  }

  static BodyLocation fromValue(int value) {
    switch (value) {
      case 0:
        return BodyLocation.leftLeg;
      case 1:
        return BodyLocation.leftCalf;
      case 2:
        return BodyLocation.leftShin;
      case 3:
        return BodyLocation.leftHamstring;
      case 4:
        return BodyLocation.leftQuad;
      case 5:
        return BodyLocation.leftGlute;
      case 6:
        return BodyLocation.rightLeg;
      case 7:
        return BodyLocation.rightCalf;
      case 8:
        return BodyLocation.rightShin;
      case 9:
        return BodyLocation.rightHamstring;
      case 10:
        return BodyLocation.rightQuad;
      case 11:
        return BodyLocation.rightGlute;
      case 12:
        return BodyLocation.torsoBack;
      case 13:
        return BodyLocation.leftLowerBack;
      case 14:
        return BodyLocation.leftUpperBack;
      case 15:
        return BodyLocation.rightLowerBack;
      case 16:
        return BodyLocation.rightUpperBack;
      case 17:
        return BodyLocation.torsoFront;
      case 18:
        return BodyLocation.leftAbdomen;
      case 19:
        return BodyLocation.leftChest;
      case 20:
        return BodyLocation.rightAbdomen;
      case 21:
        return BodyLocation.rightChest;
      case 22:
        return BodyLocation.leftArm;
      case 23:
        return BodyLocation.leftShoulder;
      case 24:
        return BodyLocation.leftBicep;
      case 25:
        return BodyLocation.leftTricep;
      case 26:
        return BodyLocation.leftBrachioradialis;
      case 27:
        return BodyLocation.leftForearmExtensors;
      case 28:
        return BodyLocation.rightArm;
      case 29:
        return BodyLocation.rightShoulder;
      case 30:
        return BodyLocation.rightBicep;
      case 31:
        return BodyLocation.rightTricep;
      case 32:
        return BodyLocation.rightBrachioradialis;
      case 33:
        return BodyLocation.rightForearmExtensors;
      case 34:
        return BodyLocation.neck;
      case 35:
        return BodyLocation.throat;
      case 36:
        return BodyLocation.waistMidBack;
      case 37:
        return BodyLocation.waistFront;
      case 38:
        return BodyLocation.waistLeft;
      case 39:
        return BodyLocation.waistRight;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SegmentLapStatus { end, fail }

extension SegmentLapStatusExt on SegmentLapStatus {
  int get value {
    switch (this) {
      case SegmentLapStatus.end:
        return 0;
      case SegmentLapStatus.fail:
        return 1;
    }
  }

  static SegmentLapStatus fromValue(int value) {
    switch (value) {
      case 0:
        return SegmentLapStatus.end;
      case 1:
        return SegmentLapStatus.fail;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SegmentLeaderboardType {
  overall,
  personalBest,
  connections,
  group,
  challenger,
  kom,
  qom,
  pr,
  goal,
  rival,
  clubLeader
}

extension SegmentLeaderboardTypeExt on SegmentLeaderboardType {
  int get value {
    switch (this) {
      case SegmentLeaderboardType.overall:
        return 0;
      case SegmentLeaderboardType.personalBest:
        return 1;
      case SegmentLeaderboardType.connections:
        return 2;
      case SegmentLeaderboardType.group:
        return 3;
      case SegmentLeaderboardType.challenger:
        return 4;
      case SegmentLeaderboardType.kom:
        return 5;
      case SegmentLeaderboardType.qom:
        return 6;
      case SegmentLeaderboardType.pr:
        return 7;
      case SegmentLeaderboardType.goal:
        return 8;
      case SegmentLeaderboardType.rival:
        return 9;
      case SegmentLeaderboardType.clubLeader:
        return 10;
    }
  }

  static SegmentLeaderboardType fromValue(int value) {
    switch (value) {
      case 0:
        return SegmentLeaderboardType.overall;
      case 1:
        return SegmentLeaderboardType.personalBest;
      case 2:
        return SegmentLeaderboardType.connections;
      case 3:
        return SegmentLeaderboardType.group;
      case 4:
        return SegmentLeaderboardType.challenger;
      case 5:
        return SegmentLeaderboardType.kom;
      case 6:
        return SegmentLeaderboardType.qom;
      case 7:
        return SegmentLeaderboardType.pr;
      case 8:
        return SegmentLeaderboardType.goal;
      case 9:
        return SegmentLeaderboardType.rival;
      case 10:
        return SegmentLeaderboardType.clubLeader;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SegmentDeleteStatus { doNotDelete, deleteOne, deleteAll }

extension SegmentDeleteStatusExt on SegmentDeleteStatus {
  int get value {
    switch (this) {
      case SegmentDeleteStatus.doNotDelete:
        return 0;
      case SegmentDeleteStatus.deleteOne:
        return 1;
      case SegmentDeleteStatus.deleteAll:
        return 2;
    }
  }

  static SegmentDeleteStatus fromValue(int value) {
    switch (value) {
      case 0:
        return SegmentDeleteStatus.doNotDelete;
      case 1:
        return SegmentDeleteStatus.deleteOne;
      case 2:
        return SegmentDeleteStatus.deleteAll;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SegmentSelectionType { starred, suggested }

extension SegmentSelectionTypeExt on SegmentSelectionType {
  int get value {
    switch (this) {
      case SegmentSelectionType.starred:
        return 0;
      case SegmentSelectionType.suggested:
        return 1;
    }
  }

  static SegmentSelectionType fromValue(int value) {
    switch (value) {
      case 0:
        return SegmentSelectionType.starred;
      case 1:
        return SegmentSelectionType.suggested;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SourceType { ant, antplus, bluetooth, bluetoothLowEnergy, wifi, local }

extension SourceTypeExt on SourceType {
  int get value {
    switch (this) {
      case SourceType.ant:
        return 0;
      case SourceType.antplus:
        return 1;
      case SourceType.bluetooth:
        return 2;
      case SourceType.bluetoothLowEnergy:
        return 3;
      case SourceType.wifi:
        return 4;
      case SourceType.local:
        return 5;
    }
  }

  static SourceType fromValue(int value) {
    switch (value) {
      case 0:
        return SourceType.ant;
      case 1:
        return SourceType.antplus;
      case 2:
        return SourceType.bluetooth;
      case 3:
        return SourceType.bluetoothLowEnergy;
      case 4:
        return SourceType.wifi;
      case 5:
        return SourceType.local;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DisplayOrientation {
  auto,
  portrait,
  landscape,
  portraitFlipped,
  landscapeFlipped
}

extension DisplayOrientationExt on DisplayOrientation {
  int get value {
    switch (this) {
      case DisplayOrientation.auto:
        return 0;
      case DisplayOrientation.portrait:
        return 1;
      case DisplayOrientation.landscape:
        return 2;
      case DisplayOrientation.portraitFlipped:
        return 3;
      case DisplayOrientation.landscapeFlipped:
        return 4;
    }
  }

  static DisplayOrientation fromValue(int value) {
    switch (value) {
      case 0:
        return DisplayOrientation.auto;
      case 1:
        return DisplayOrientation.portrait;
      case 2:
        return DisplayOrientation.landscape;
      case 3:
        return DisplayOrientation.portraitFlipped;
      case 4:
        return DisplayOrientation.landscapeFlipped;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WorkoutEquipment {
  none,
  swimFins,
  swimKickboard,
  swimPaddles,
  swimPullBuoy,
  swimSnorkel
}

extension WorkoutEquipmentExt on WorkoutEquipment {
  int get value {
    switch (this) {
      case WorkoutEquipment.none:
        return 0;
      case WorkoutEquipment.swimFins:
        return 1;
      case WorkoutEquipment.swimKickboard:
        return 2;
      case WorkoutEquipment.swimPaddles:
        return 3;
      case WorkoutEquipment.swimPullBuoy:
        return 4;
      case WorkoutEquipment.swimSnorkel:
        return 5;
    }
  }

  static WorkoutEquipment fromValue(int value) {
    switch (value) {
      case 0:
        return WorkoutEquipment.none;
      case 1:
        return WorkoutEquipment.swimFins;
      case 2:
        return WorkoutEquipment.swimKickboard;
      case 3:
        return WorkoutEquipment.swimPaddles;
      case 4:
        return WorkoutEquipment.swimPullBuoy;
      case 5:
        return WorkoutEquipment.swimSnorkel;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WatchfaceMode { digital, analog, connectIq, disabled }

extension WatchfaceModeExt on WatchfaceMode {
  int get value {
    switch (this) {
      case WatchfaceMode.digital:
        return 0;
      case WatchfaceMode.analog:
        return 1;
      case WatchfaceMode.connectIq:
        return 2;
      case WatchfaceMode.disabled:
        return 3;
    }
  }

  static WatchfaceMode fromValue(int value) {
    switch (value) {
      case 0:
        return WatchfaceMode.digital;
      case 1:
        return WatchfaceMode.analog;
      case 2:
        return WatchfaceMode.connectIq;
      case 3:
        return WatchfaceMode.disabled;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DigitalWatchfaceLayout { traditional, modern, bold }

extension DigitalWatchfaceLayoutExt on DigitalWatchfaceLayout {
  int get value {
    switch (this) {
      case DigitalWatchfaceLayout.traditional:
        return 0;
      case DigitalWatchfaceLayout.modern:
        return 1;
      case DigitalWatchfaceLayout.bold:
        return 2;
    }
  }

  static DigitalWatchfaceLayout fromValue(int value) {
    switch (value) {
      case 0:
        return DigitalWatchfaceLayout.traditional;
      case 1:
        return DigitalWatchfaceLayout.modern;
      case 2:
        return DigitalWatchfaceLayout.bold;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AnalogWatchfaceLayout { minimal, traditional, modern }

extension AnalogWatchfaceLayoutExt on AnalogWatchfaceLayout {
  int get value {
    switch (this) {
      case AnalogWatchfaceLayout.minimal:
        return 0;
      case AnalogWatchfaceLayout.traditional:
        return 1;
      case AnalogWatchfaceLayout.modern:
        return 2;
    }
  }

  static AnalogWatchfaceLayout fromValue(int value) {
    switch (value) {
      case 0:
        return AnalogWatchfaceLayout.minimal;
      case 1:
        return AnalogWatchfaceLayout.traditional;
      case 2:
        return AnalogWatchfaceLayout.modern;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum RiderPositionType {
  seated,
  standing,
  transitionToSeated,
  transitionToStanding
}

extension RiderPositionTypeExt on RiderPositionType {
  int get value {
    switch (this) {
      case RiderPositionType.seated:
        return 0;
      case RiderPositionType.standing:
        return 1;
      case RiderPositionType.transitionToSeated:
        return 2;
      case RiderPositionType.transitionToStanding:
        return 3;
    }
  }

  static RiderPositionType fromValue(int value) {
    switch (value) {
      case 0:
        return RiderPositionType.seated;
      case 1:
        return RiderPositionType.standing;
      case 2:
        return RiderPositionType.transitionToSeated;
      case 3:
        return RiderPositionType.transitionToStanding;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum PowerPhaseType {
  powerPhaseStartAngle,
  powerPhaseEndAngle,
  powerPhaseArcLength,
  powerPhaseCenter
}

extension PowerPhaseTypeExt on PowerPhaseType {
  int get value {
    switch (this) {
      case PowerPhaseType.powerPhaseStartAngle:
        return 0;
      case PowerPhaseType.powerPhaseEndAngle:
        return 1;
      case PowerPhaseType.powerPhaseArcLength:
        return 2;
      case PowerPhaseType.powerPhaseCenter:
        return 3;
    }
  }

  static PowerPhaseType fromValue(int value) {
    switch (value) {
      case 0:
        return PowerPhaseType.powerPhaseStartAngle;
      case 1:
        return PowerPhaseType.powerPhaseEndAngle;
      case 2:
        return PowerPhaseType.powerPhaseArcLength;
      case 3:
        return PowerPhaseType.powerPhaseCenter;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CameraEventType {
  videoStart,
  videoSplit,
  videoEnd,
  photoTaken,
  videoSecondStreamStart,
  videoSecondStreamSplit,
  videoSecondStreamEnd,
  videoSplitStart,
  videoSecondStreamSplitStart,
  videoPause,
  videoSecondStreamPause,
  videoResume,
  videoSecondStreamResume
}

extension CameraEventTypeExt on CameraEventType {
  int get value {
    switch (this) {
      case CameraEventType.videoStart:
        return 0;
      case CameraEventType.videoSplit:
        return 1;
      case CameraEventType.videoEnd:
        return 2;
      case CameraEventType.photoTaken:
        return 3;
      case CameraEventType.videoSecondStreamStart:
        return 4;
      case CameraEventType.videoSecondStreamSplit:
        return 5;
      case CameraEventType.videoSecondStreamEnd:
        return 6;
      case CameraEventType.videoSplitStart:
        return 7;
      case CameraEventType.videoSecondStreamSplitStart:
        return 8;
      case CameraEventType.videoPause:
        return 11;
      case CameraEventType.videoSecondStreamPause:
        return 12;
      case CameraEventType.videoResume:
        return 13;
      case CameraEventType.videoSecondStreamResume:
        return 14;
    }
  }

  static CameraEventType fromValue(int value) {
    switch (value) {
      case 0:
        return CameraEventType.videoStart;
      case 1:
        return CameraEventType.videoSplit;
      case 2:
        return CameraEventType.videoEnd;
      case 3:
        return CameraEventType.photoTaken;
      case 4:
        return CameraEventType.videoSecondStreamStart;
      case 5:
        return CameraEventType.videoSecondStreamSplit;
      case 6:
        return CameraEventType.videoSecondStreamEnd;
      case 7:
        return CameraEventType.videoSplitStart;
      case 8:
        return CameraEventType.videoSecondStreamSplitStart;
      case 11:
        return CameraEventType.videoPause;
      case 12:
        return CameraEventType.videoSecondStreamPause;
      case 13:
        return CameraEventType.videoResume;
      case 14:
        return CameraEventType.videoSecondStreamResume;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SensorType { accelerometer, gyroscope, compass, barometer }

extension SensorTypeExt on SensorType {
  int get value {
    switch (this) {
      case SensorType.accelerometer:
        return 0;
      case SensorType.gyroscope:
        return 1;
      case SensorType.compass:
        return 2;
      case SensorType.barometer:
        return 3;
    }
  }

  static SensorType fromValue(int value) {
    switch (value) {
      case 0:
        return SensorType.accelerometer;
      case 1:
        return SensorType.gyroscope;
      case 2:
        return SensorType.compass;
      case 3:
        return SensorType.barometer;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BikeLightNetworkConfigType { auto, individual, highVisibility, trail }

extension BikeLightNetworkConfigTypeExt on BikeLightNetworkConfigType {
  int get value {
    switch (this) {
      case BikeLightNetworkConfigType.auto:
        return 0;
      case BikeLightNetworkConfigType.individual:
        return 4;
      case BikeLightNetworkConfigType.highVisibility:
        return 5;
      case BikeLightNetworkConfigType.trail:
        return 6;
    }
  }

  static BikeLightNetworkConfigType fromValue(int value) {
    switch (value) {
      case 0:
        return BikeLightNetworkConfigType.auto;
      case 4:
        return BikeLightNetworkConfigType.individual;
      case 5:
        return BikeLightNetworkConfigType.highVisibility;
      case 6:
        return BikeLightNetworkConfigType.trail;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CommTimeoutType {
  wildcardPairingTimeout,
  pairingTimeout,
  connectionLost,
  connectionTimeout
}

extension CommTimeoutTypeExt on CommTimeoutType {
  int get value {
    switch (this) {
      case CommTimeoutType.wildcardPairingTimeout:
        return 0;
      case CommTimeoutType.pairingTimeout:
        return 1;
      case CommTimeoutType.connectionLost:
        return 2;
      case CommTimeoutType.connectionTimeout:
        return 3;
    }
  }

  static CommTimeoutType fromValue(int value) {
    switch (value) {
      case 0:
        return CommTimeoutType.wildcardPairingTimeout;
      case 1:
        return CommTimeoutType.pairingTimeout;
      case 2:
        return CommTimeoutType.connectionLost;
      case 3:
        return CommTimeoutType.connectionTimeout;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CameraOrientationType {
  cameraOrientation0,
  cameraOrientation90,
  cameraOrientation180,
  cameraOrientation270
}

extension CameraOrientationTypeExt on CameraOrientationType {
  int get value {
    switch (this) {
      case CameraOrientationType.cameraOrientation0:
        return 0;
      case CameraOrientationType.cameraOrientation90:
        return 1;
      case CameraOrientationType.cameraOrientation180:
        return 2;
      case CameraOrientationType.cameraOrientation270:
        return 3;
    }
  }

  static CameraOrientationType fromValue(int value) {
    switch (value) {
      case 0:
        return CameraOrientationType.cameraOrientation0;
      case 1:
        return CameraOrientationType.cameraOrientation90;
      case 2:
        return CameraOrientationType.cameraOrientation180;
      case 3:
        return CameraOrientationType.cameraOrientation270;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AttitudeStage { failed, aligning, degraded, valid }

extension AttitudeStageExt on AttitudeStage {
  int get value {
    switch (this) {
      case AttitudeStage.failed:
        return 0;
      case AttitudeStage.aligning:
        return 1;
      case AttitudeStage.degraded:
        return 2;
      case AttitudeStage.valid:
        return 3;
    }
  }

  static AttitudeStage fromValue(int value) {
    switch (value) {
      case 0:
        return AttitudeStage.failed;
      case 1:
        return AttitudeStage.aligning;
      case 2:
        return AttitudeStage.degraded;
      case 3:
        return AttitudeStage.valid;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AttitudeValidity {
  trackAngleHeadingValid,
  pitchValid,
  rollValid,
  lateralBodyAccelValid,
  normalBodyAccelValid,
  turnRateValid,
  hwFail,
  magInvalid,
  noGps,
  gpsInvalid,
  solutionCoasting,
  trueTrackAngle,
  magneticHeading
}

extension AttitudeValidityExt on AttitudeValidity {
  int get value {
    switch (this) {
      case AttitudeValidity.trackAngleHeadingValid:
        return 1;
      case AttitudeValidity.pitchValid:
        return 2;
      case AttitudeValidity.rollValid:
        return 4;
      case AttitudeValidity.lateralBodyAccelValid:
        return 8;
      case AttitudeValidity.normalBodyAccelValid:
        return 16;
      case AttitudeValidity.turnRateValid:
        return 32;
      case AttitudeValidity.hwFail:
        return 64;
      case AttitudeValidity.magInvalid:
        return 128;
      case AttitudeValidity.noGps:
        return 256;
      case AttitudeValidity.gpsInvalid:
        return 512;
      case AttitudeValidity.solutionCoasting:
        return 1024;
      case AttitudeValidity.trueTrackAngle:
        return 2048;
      case AttitudeValidity.magneticHeading:
        return 4096;
    }
  }

  static AttitudeValidity fromValue(int value) {
    switch (value) {
      case 1:
        return AttitudeValidity.trackAngleHeadingValid;
      case 2:
        return AttitudeValidity.pitchValid;
      case 4:
        return AttitudeValidity.rollValid;
      case 8:
        return AttitudeValidity.lateralBodyAccelValid;
      case 16:
        return AttitudeValidity.normalBodyAccelValid;
      case 32:
        return AttitudeValidity.turnRateValid;
      case 64:
        return AttitudeValidity.hwFail;
      case 128:
        return AttitudeValidity.magInvalid;
      case 256:
        return AttitudeValidity.noGps;
      case 512:
        return AttitudeValidity.gpsInvalid;
      case 1024:
        return AttitudeValidity.solutionCoasting;
      case 2048:
        return AttitudeValidity.trueTrackAngle;
      case 4096:
        return AttitudeValidity.magneticHeading;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AutoSyncFrequency { never, occasionally, frequent, onceADay, remote }

extension AutoSyncFrequencyExt on AutoSyncFrequency {
  int get value {
    switch (this) {
      case AutoSyncFrequency.never:
        return 0;
      case AutoSyncFrequency.occasionally:
        return 1;
      case AutoSyncFrequency.frequent:
        return 2;
      case AutoSyncFrequency.onceADay:
        return 3;
      case AutoSyncFrequency.remote:
        return 4;
    }
  }

  static AutoSyncFrequency fromValue(int value) {
    switch (value) {
      case 0:
        return AutoSyncFrequency.never;
      case 1:
        return AutoSyncFrequency.occasionally;
      case 2:
        return AutoSyncFrequency.frequent;
      case 3:
        return AutoSyncFrequency.onceADay;
      case 4:
        return AutoSyncFrequency.remote;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ExdLayout {
  fullScreen,
  halfVertical,
  halfHorizontal,
  halfVerticalRightSplit,
  halfHorizontalBottomSplit,
  fullQuarterSplit,
  halfVerticalLeftSplit,
  halfHorizontalTopSplit,
  dynamic
}

extension ExdLayoutExt on ExdLayout {
  int get value {
    switch (this) {
      case ExdLayout.fullScreen:
        return 0;
      case ExdLayout.halfVertical:
        return 1;
      case ExdLayout.halfHorizontal:
        return 2;
      case ExdLayout.halfVerticalRightSplit:
        return 3;
      case ExdLayout.halfHorizontalBottomSplit:
        return 4;
      case ExdLayout.fullQuarterSplit:
        return 5;
      case ExdLayout.halfVerticalLeftSplit:
        return 6;
      case ExdLayout.halfHorizontalTopSplit:
        return 7;
      case ExdLayout.dynamic:
        return 8;
    }
  }

  static ExdLayout fromValue(int value) {
    switch (value) {
      case 0:
        return ExdLayout.fullScreen;
      case 1:
        return ExdLayout.halfVertical;
      case 2:
        return ExdLayout.halfHorizontal;
      case 3:
        return ExdLayout.halfVerticalRightSplit;
      case 4:
        return ExdLayout.halfHorizontalBottomSplit;
      case 5:
        return ExdLayout.fullQuarterSplit;
      case 6:
        return ExdLayout.halfVerticalLeftSplit;
      case 7:
        return ExdLayout.halfHorizontalTopSplit;
      case 8:
        return ExdLayout.dynamic;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ExdDisplayType {
  numerical,
  simple,
  graph,
  bar,
  circleGraph,
  virtualPartner,
  balance,
  stringList,
  string,
  simpleDynamicIcon,
  gauge
}

extension ExdDisplayTypeExt on ExdDisplayType {
  int get value {
    switch (this) {
      case ExdDisplayType.numerical:
        return 0;
      case ExdDisplayType.simple:
        return 1;
      case ExdDisplayType.graph:
        return 2;
      case ExdDisplayType.bar:
        return 3;
      case ExdDisplayType.circleGraph:
        return 4;
      case ExdDisplayType.virtualPartner:
        return 5;
      case ExdDisplayType.balance:
        return 6;
      case ExdDisplayType.stringList:
        return 7;
      case ExdDisplayType.string:
        return 8;
      case ExdDisplayType.simpleDynamicIcon:
        return 9;
      case ExdDisplayType.gauge:
        return 10;
    }
  }

  static ExdDisplayType fromValue(int value) {
    switch (value) {
      case 0:
        return ExdDisplayType.numerical;
      case 1:
        return ExdDisplayType.simple;
      case 2:
        return ExdDisplayType.graph;
      case 3:
        return ExdDisplayType.bar;
      case 4:
        return ExdDisplayType.circleGraph;
      case 5:
        return ExdDisplayType.virtualPartner;
      case 6:
        return ExdDisplayType.balance;
      case 7:
        return ExdDisplayType.stringList;
      case 8:
        return ExdDisplayType.string;
      case 9:
        return ExdDisplayType.simpleDynamicIcon;
      case 10:
        return ExdDisplayType.gauge;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ExdDataUnits {
  noUnits,
  laps,
  milesPerHour,
  kilometersPerHour,
  feetPerHour,
  metersPerHour,
  degreesCelsius,
  degreesFarenheit,
  zone,
  gear,
  rpm,
  bpm,
  degrees,
  millimeters,
  meters,
  kilometers,
  feet,
  yards,
  kilofeet,
  miles,
  time,
  enumTurnType,
  percent,
  watts,
  wattsPerKilogram,
  enumBatteryStatus,
  enumBikeLightBeamAngleMode,
  enumBikeLightBatteryStatus,
  enumBikeLightNetworkConfigType,
  lights,
  seconds,
  minutes,
  hours,
  calories,
  kilojoules,
  milliseconds,
  secondPerMile,
  secondPerKilometer,
  centimeter,
  enumCoursePoint,
  bradians,
  enumSport,
  inchesHg,
  mmHg,
  mbars,
  hectoPascals,
  feetPerMin,
  metersPerMin,
  metersPerSec,
  eightCardinal
}

extension ExdDataUnitsExt on ExdDataUnits {
  int get value {
    switch (this) {
      case ExdDataUnits.noUnits:
        return 0;
      case ExdDataUnits.laps:
        return 1;
      case ExdDataUnits.milesPerHour:
        return 2;
      case ExdDataUnits.kilometersPerHour:
        return 3;
      case ExdDataUnits.feetPerHour:
        return 4;
      case ExdDataUnits.metersPerHour:
        return 5;
      case ExdDataUnits.degreesCelsius:
        return 6;
      case ExdDataUnits.degreesFarenheit:
        return 7;
      case ExdDataUnits.zone:
        return 8;
      case ExdDataUnits.gear:
        return 9;
      case ExdDataUnits.rpm:
        return 10;
      case ExdDataUnits.bpm:
        return 11;
      case ExdDataUnits.degrees:
        return 12;
      case ExdDataUnits.millimeters:
        return 13;
      case ExdDataUnits.meters:
        return 14;
      case ExdDataUnits.kilometers:
        return 15;
      case ExdDataUnits.feet:
        return 16;
      case ExdDataUnits.yards:
        return 17;
      case ExdDataUnits.kilofeet:
        return 18;
      case ExdDataUnits.miles:
        return 19;
      case ExdDataUnits.time:
        return 20;
      case ExdDataUnits.enumTurnType:
        return 21;
      case ExdDataUnits.percent:
        return 22;
      case ExdDataUnits.watts:
        return 23;
      case ExdDataUnits.wattsPerKilogram:
        return 24;
      case ExdDataUnits.enumBatteryStatus:
        return 25;
      case ExdDataUnits.enumBikeLightBeamAngleMode:
        return 26;
      case ExdDataUnits.enumBikeLightBatteryStatus:
        return 27;
      case ExdDataUnits.enumBikeLightNetworkConfigType:
        return 28;
      case ExdDataUnits.lights:
        return 29;
      case ExdDataUnits.seconds:
        return 30;
      case ExdDataUnits.minutes:
        return 31;
      case ExdDataUnits.hours:
        return 32;
      case ExdDataUnits.calories:
        return 33;
      case ExdDataUnits.kilojoules:
        return 34;
      case ExdDataUnits.milliseconds:
        return 35;
      case ExdDataUnits.secondPerMile:
        return 36;
      case ExdDataUnits.secondPerKilometer:
        return 37;
      case ExdDataUnits.centimeter:
        return 38;
      case ExdDataUnits.enumCoursePoint:
        return 39;
      case ExdDataUnits.bradians:
        return 40;
      case ExdDataUnits.enumSport:
        return 41;
      case ExdDataUnits.inchesHg:
        return 42;
      case ExdDataUnits.mmHg:
        return 43;
      case ExdDataUnits.mbars:
        return 44;
      case ExdDataUnits.hectoPascals:
        return 45;
      case ExdDataUnits.feetPerMin:
        return 46;
      case ExdDataUnits.metersPerMin:
        return 47;
      case ExdDataUnits.metersPerSec:
        return 48;
      case ExdDataUnits.eightCardinal:
        return 49;
    }
  }

  static ExdDataUnits fromValue(int value) {
    switch (value) {
      case 0:
        return ExdDataUnits.noUnits;
      case 1:
        return ExdDataUnits.laps;
      case 2:
        return ExdDataUnits.milesPerHour;
      case 3:
        return ExdDataUnits.kilometersPerHour;
      case 4:
        return ExdDataUnits.feetPerHour;
      case 5:
        return ExdDataUnits.metersPerHour;
      case 6:
        return ExdDataUnits.degreesCelsius;
      case 7:
        return ExdDataUnits.degreesFarenheit;
      case 8:
        return ExdDataUnits.zone;
      case 9:
        return ExdDataUnits.gear;
      case 10:
        return ExdDataUnits.rpm;
      case 11:
        return ExdDataUnits.bpm;
      case 12:
        return ExdDataUnits.degrees;
      case 13:
        return ExdDataUnits.millimeters;
      case 14:
        return ExdDataUnits.meters;
      case 15:
        return ExdDataUnits.kilometers;
      case 16:
        return ExdDataUnits.feet;
      case 17:
        return ExdDataUnits.yards;
      case 18:
        return ExdDataUnits.kilofeet;
      case 19:
        return ExdDataUnits.miles;
      case 20:
        return ExdDataUnits.time;
      case 21:
        return ExdDataUnits.enumTurnType;
      case 22:
        return ExdDataUnits.percent;
      case 23:
        return ExdDataUnits.watts;
      case 24:
        return ExdDataUnits.wattsPerKilogram;
      case 25:
        return ExdDataUnits.enumBatteryStatus;
      case 26:
        return ExdDataUnits.enumBikeLightBeamAngleMode;
      case 27:
        return ExdDataUnits.enumBikeLightBatteryStatus;
      case 28:
        return ExdDataUnits.enumBikeLightNetworkConfigType;
      case 29:
        return ExdDataUnits.lights;
      case 30:
        return ExdDataUnits.seconds;
      case 31:
        return ExdDataUnits.minutes;
      case 32:
        return ExdDataUnits.hours;
      case 33:
        return ExdDataUnits.calories;
      case 34:
        return ExdDataUnits.kilojoules;
      case 35:
        return ExdDataUnits.milliseconds;
      case 36:
        return ExdDataUnits.secondPerMile;
      case 37:
        return ExdDataUnits.secondPerKilometer;
      case 38:
        return ExdDataUnits.centimeter;
      case 39:
        return ExdDataUnits.enumCoursePoint;
      case 40:
        return ExdDataUnits.bradians;
      case 41:
        return ExdDataUnits.enumSport;
      case 42:
        return ExdDataUnits.inchesHg;
      case 43:
        return ExdDataUnits.mmHg;
      case 44:
        return ExdDataUnits.mbars;
      case 45:
        return ExdDataUnits.hectoPascals;
      case 46:
        return ExdDataUnits.feetPerMin;
      case 47:
        return ExdDataUnits.metersPerMin;
      case 48:
        return ExdDataUnits.metersPerSec;
      case 49:
        return ExdDataUnits.eightCardinal;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ExdQualifiers {
  noQualifier,
  instantaneous,
  average,
  lap,
  maximum,
  maximumAverage,
  maximumLap,
  lastLap,
  averageLap,
  toDestination,
  toGo,
  toNext,
  nextCoursePoint,
  total,
  threeSecondAverage,
  tenSecondAverage,
  thirtySecondAverage,
  percentMaximum,
  percentMaximumAverage,
  lapPercentMaximum,
  elapsed,
  sunrise,
  sunset,
  comparedToVirtualPartner,
  maximum24h,
  minimum24h,
  minimum,
  first,
  second,
  third,
  shifter,
  lastSport,
  moving,
  stopped,
  estimatedTotal,
  zone9,
  zone8,
  zone7,
  zone6,
  zone5,
  zone4,
  zone3,
  zone2,
  zone1
}

extension ExdQualifiersExt on ExdQualifiers {
  int get value {
    switch (this) {
      case ExdQualifiers.noQualifier:
        return 0;
      case ExdQualifiers.instantaneous:
        return 1;
      case ExdQualifiers.average:
        return 2;
      case ExdQualifiers.lap:
        return 3;
      case ExdQualifiers.maximum:
        return 4;
      case ExdQualifiers.maximumAverage:
        return 5;
      case ExdQualifiers.maximumLap:
        return 6;
      case ExdQualifiers.lastLap:
        return 7;
      case ExdQualifiers.averageLap:
        return 8;
      case ExdQualifiers.toDestination:
        return 9;
      case ExdQualifiers.toGo:
        return 10;
      case ExdQualifiers.toNext:
        return 11;
      case ExdQualifiers.nextCoursePoint:
        return 12;
      case ExdQualifiers.total:
        return 13;
      case ExdQualifiers.threeSecondAverage:
        return 14;
      case ExdQualifiers.tenSecondAverage:
        return 15;
      case ExdQualifiers.thirtySecondAverage:
        return 16;
      case ExdQualifiers.percentMaximum:
        return 17;
      case ExdQualifiers.percentMaximumAverage:
        return 18;
      case ExdQualifiers.lapPercentMaximum:
        return 19;
      case ExdQualifiers.elapsed:
        return 20;
      case ExdQualifiers.sunrise:
        return 21;
      case ExdQualifiers.sunset:
        return 22;
      case ExdQualifiers.comparedToVirtualPartner:
        return 23;
      case ExdQualifiers.maximum24h:
        return 24;
      case ExdQualifiers.minimum24h:
        return 25;
      case ExdQualifiers.minimum:
        return 26;
      case ExdQualifiers.first:
        return 27;
      case ExdQualifiers.second:
        return 28;
      case ExdQualifiers.third:
        return 29;
      case ExdQualifiers.shifter:
        return 30;
      case ExdQualifiers.lastSport:
        return 31;
      case ExdQualifiers.moving:
        return 32;
      case ExdQualifiers.stopped:
        return 33;
      case ExdQualifiers.estimatedTotal:
        return 34;
      case ExdQualifiers.zone9:
        return 242;
      case ExdQualifiers.zone8:
        return 243;
      case ExdQualifiers.zone7:
        return 244;
      case ExdQualifiers.zone6:
        return 245;
      case ExdQualifiers.zone5:
        return 246;
      case ExdQualifiers.zone4:
        return 247;
      case ExdQualifiers.zone3:
        return 248;
      case ExdQualifiers.zone2:
        return 249;
      case ExdQualifiers.zone1:
        return 250;
    }
  }

  static ExdQualifiers fromValue(int value) {
    switch (value) {
      case 0:
        return ExdQualifiers.noQualifier;
      case 1:
        return ExdQualifiers.instantaneous;
      case 2:
        return ExdQualifiers.average;
      case 3:
        return ExdQualifiers.lap;
      case 4:
        return ExdQualifiers.maximum;
      case 5:
        return ExdQualifiers.maximumAverage;
      case 6:
        return ExdQualifiers.maximumLap;
      case 7:
        return ExdQualifiers.lastLap;
      case 8:
        return ExdQualifiers.averageLap;
      case 9:
        return ExdQualifiers.toDestination;
      case 10:
        return ExdQualifiers.toGo;
      case 11:
        return ExdQualifiers.toNext;
      case 12:
        return ExdQualifiers.nextCoursePoint;
      case 13:
        return ExdQualifiers.total;
      case 14:
        return ExdQualifiers.threeSecondAverage;
      case 15:
        return ExdQualifiers.tenSecondAverage;
      case 16:
        return ExdQualifiers.thirtySecondAverage;
      case 17:
        return ExdQualifiers.percentMaximum;
      case 18:
        return ExdQualifiers.percentMaximumAverage;
      case 19:
        return ExdQualifiers.lapPercentMaximum;
      case 20:
        return ExdQualifiers.elapsed;
      case 21:
        return ExdQualifiers.sunrise;
      case 22:
        return ExdQualifiers.sunset;
      case 23:
        return ExdQualifiers.comparedToVirtualPartner;
      case 24:
        return ExdQualifiers.maximum24h;
      case 25:
        return ExdQualifiers.minimum24h;
      case 26:
        return ExdQualifiers.minimum;
      case 27:
        return ExdQualifiers.first;
      case 28:
        return ExdQualifiers.second;
      case 29:
        return ExdQualifiers.third;
      case 30:
        return ExdQualifiers.shifter;
      case 31:
        return ExdQualifiers.lastSport;
      case 32:
        return ExdQualifiers.moving;
      case 33:
        return ExdQualifiers.stopped;
      case 34:
        return ExdQualifiers.estimatedTotal;
      case 242:
        return ExdQualifiers.zone9;
      case 243:
        return ExdQualifiers.zone8;
      case 244:
        return ExdQualifiers.zone7;
      case 245:
        return ExdQualifiers.zone6;
      case 246:
        return ExdQualifiers.zone5;
      case 247:
        return ExdQualifiers.zone4;
      case 248:
        return ExdQualifiers.zone3;
      case 249:
        return ExdQualifiers.zone2;
      case 250:
        return ExdQualifiers.zone1;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ExdDescriptors {
  bikeLightBatteryStatus,
  beamAngleStatus,
  bateryLevel,
  lightNetworkMode,
  numberLightsConnected,
  cadence,
  distance,
  estimatedTimeOfArrival,
  heading,
  time,
  batteryLevel,
  trainerResistance,
  trainerTargetPower,
  timeSeated,
  timeStanding,
  elevation,
  grade,
  ascent,
  descent,
  verticalSpeed,
  di2BatteryLevel,
  frontGear,
  rearGear,
  gearRatio,
  heartRate,
  heartRateZone,
  timeInHeartRateZone,
  heartRateReserve,
  calories,
  gpsAccuracy,
  gpsSignalStrength,
  temperature,
  timeOfDay,
  balance,
  pedalSmoothness,
  power,
  functionalThresholdPower,
  intensityFactor,
  work,
  powerRatio,
  normalizedPower,
  trainingStressScore,
  timeOnZone,
  speed,
  laps,
  reps,
  workoutStep,
  courseDistance,
  navigationDistance,
  courseEstimatedTimeOfArrival,
  navigationEstimatedTimeOfArrival,
  courseTime,
  navigationTime,
  courseHeading,
  navigationHeading,
  powerZone,
  torqueEffectiveness,
  timerTime,
  powerWeightRatio,
  leftPlatformCenterOffset,
  rightPlatformCenterOffset,
  leftPowerPhaseStartAngle,
  rightPowerPhaseStartAngle,
  leftPowerPhaseFinishAngle,
  rightPowerPhaseFinishAngle,
  gears,
  pace,
  trainingEffect,
  verticalOscillation,
  verticalRatio,
  groundContactTime,
  leftGroundContactTimeBalance,
  rightGroundContactTimeBalance,
  strideLength,
  runningCadence,
  performanceCondition,
  courseType,
  timeInPowerZone,
  navigationTurn,
  courseLocation,
  navigationLocation,
  compass,
  gearCombo,
  muscleOxygen,
  icon,
  compassHeading,
  gpsHeading,
  gpsElevation,
  anaerobicTrainingEffect,
  course,
  offCourse,
  glideRatio,
  verticalDistance,
  vmg,
  ambientPressure,
  pressure,
  vam
}

extension ExdDescriptorsExt on ExdDescriptors {
  int get value {
    switch (this) {
      case ExdDescriptors.bikeLightBatteryStatus:
        return 0;
      case ExdDescriptors.beamAngleStatus:
        return 1;
      case ExdDescriptors.bateryLevel:
        return 2;
      case ExdDescriptors.lightNetworkMode:
        return 3;
      case ExdDescriptors.numberLightsConnected:
        return 4;
      case ExdDescriptors.cadence:
        return 5;
      case ExdDescriptors.distance:
        return 6;
      case ExdDescriptors.estimatedTimeOfArrival:
        return 7;
      case ExdDescriptors.heading:
        return 8;
      case ExdDescriptors.time:
        return 9;
      case ExdDescriptors.batteryLevel:
        return 10;
      case ExdDescriptors.trainerResistance:
        return 11;
      case ExdDescriptors.trainerTargetPower:
        return 12;
      case ExdDescriptors.timeSeated:
        return 13;
      case ExdDescriptors.timeStanding:
        return 14;
      case ExdDescriptors.elevation:
        return 15;
      case ExdDescriptors.grade:
        return 16;
      case ExdDescriptors.ascent:
        return 17;
      case ExdDescriptors.descent:
        return 18;
      case ExdDescriptors.verticalSpeed:
        return 19;
      case ExdDescriptors.di2BatteryLevel:
        return 20;
      case ExdDescriptors.frontGear:
        return 21;
      case ExdDescriptors.rearGear:
        return 22;
      case ExdDescriptors.gearRatio:
        return 23;
      case ExdDescriptors.heartRate:
        return 24;
      case ExdDescriptors.heartRateZone:
        return 25;
      case ExdDescriptors.timeInHeartRateZone:
        return 26;
      case ExdDescriptors.heartRateReserve:
        return 27;
      case ExdDescriptors.calories:
        return 28;
      case ExdDescriptors.gpsAccuracy:
        return 29;
      case ExdDescriptors.gpsSignalStrength:
        return 30;
      case ExdDescriptors.temperature:
        return 31;
      case ExdDescriptors.timeOfDay:
        return 32;
      case ExdDescriptors.balance:
        return 33;
      case ExdDescriptors.pedalSmoothness:
        return 34;
      case ExdDescriptors.power:
        return 35;
      case ExdDescriptors.functionalThresholdPower:
        return 36;
      case ExdDescriptors.intensityFactor:
        return 37;
      case ExdDescriptors.work:
        return 38;
      case ExdDescriptors.powerRatio:
        return 39;
      case ExdDescriptors.normalizedPower:
        return 40;
      case ExdDescriptors.trainingStressScore:
        return 41;
      case ExdDescriptors.timeOnZone:
        return 42;
      case ExdDescriptors.speed:
        return 43;
      case ExdDescriptors.laps:
        return 44;
      case ExdDescriptors.reps:
        return 45;
      case ExdDescriptors.workoutStep:
        return 46;
      case ExdDescriptors.courseDistance:
        return 47;
      case ExdDescriptors.navigationDistance:
        return 48;
      case ExdDescriptors.courseEstimatedTimeOfArrival:
        return 49;
      case ExdDescriptors.navigationEstimatedTimeOfArrival:
        return 50;
      case ExdDescriptors.courseTime:
        return 51;
      case ExdDescriptors.navigationTime:
        return 52;
      case ExdDescriptors.courseHeading:
        return 53;
      case ExdDescriptors.navigationHeading:
        return 54;
      case ExdDescriptors.powerZone:
        return 55;
      case ExdDescriptors.torqueEffectiveness:
        return 56;
      case ExdDescriptors.timerTime:
        return 57;
      case ExdDescriptors.powerWeightRatio:
        return 58;
      case ExdDescriptors.leftPlatformCenterOffset:
        return 59;
      case ExdDescriptors.rightPlatformCenterOffset:
        return 60;
      case ExdDescriptors.leftPowerPhaseStartAngle:
        return 61;
      case ExdDescriptors.rightPowerPhaseStartAngle:
        return 62;
      case ExdDescriptors.leftPowerPhaseFinishAngle:
        return 63;
      case ExdDescriptors.rightPowerPhaseFinishAngle:
        return 64;
      case ExdDescriptors.gears:
        return 65;
      case ExdDescriptors.pace:
        return 66;
      case ExdDescriptors.trainingEffect:
        return 67;
      case ExdDescriptors.verticalOscillation:
        return 68;
      case ExdDescriptors.verticalRatio:
        return 69;
      case ExdDescriptors.groundContactTime:
        return 70;
      case ExdDescriptors.leftGroundContactTimeBalance:
        return 71;
      case ExdDescriptors.rightGroundContactTimeBalance:
        return 72;
      case ExdDescriptors.strideLength:
        return 73;
      case ExdDescriptors.runningCadence:
        return 74;
      case ExdDescriptors.performanceCondition:
        return 75;
      case ExdDescriptors.courseType:
        return 76;
      case ExdDescriptors.timeInPowerZone:
        return 77;
      case ExdDescriptors.navigationTurn:
        return 78;
      case ExdDescriptors.courseLocation:
        return 79;
      case ExdDescriptors.navigationLocation:
        return 80;
      case ExdDescriptors.compass:
        return 81;
      case ExdDescriptors.gearCombo:
        return 82;
      case ExdDescriptors.muscleOxygen:
        return 83;
      case ExdDescriptors.icon:
        return 84;
      case ExdDescriptors.compassHeading:
        return 85;
      case ExdDescriptors.gpsHeading:
        return 86;
      case ExdDescriptors.gpsElevation:
        return 87;
      case ExdDescriptors.anaerobicTrainingEffect:
        return 88;
      case ExdDescriptors.course:
        return 89;
      case ExdDescriptors.offCourse:
        return 90;
      case ExdDescriptors.glideRatio:
        return 91;
      case ExdDescriptors.verticalDistance:
        return 92;
      case ExdDescriptors.vmg:
        return 93;
      case ExdDescriptors.ambientPressure:
        return 94;
      case ExdDescriptors.pressure:
        return 95;
      case ExdDescriptors.vam:
        return 96;
    }
  }

  static ExdDescriptors fromValue(int value) {
    switch (value) {
      case 0:
        return ExdDescriptors.bikeLightBatteryStatus;
      case 1:
        return ExdDescriptors.beamAngleStatus;
      case 2:
        return ExdDescriptors.bateryLevel;
      case 3:
        return ExdDescriptors.lightNetworkMode;
      case 4:
        return ExdDescriptors.numberLightsConnected;
      case 5:
        return ExdDescriptors.cadence;
      case 6:
        return ExdDescriptors.distance;
      case 7:
        return ExdDescriptors.estimatedTimeOfArrival;
      case 8:
        return ExdDescriptors.heading;
      case 9:
        return ExdDescriptors.time;
      case 10:
        return ExdDescriptors.batteryLevel;
      case 11:
        return ExdDescriptors.trainerResistance;
      case 12:
        return ExdDescriptors.trainerTargetPower;
      case 13:
        return ExdDescriptors.timeSeated;
      case 14:
        return ExdDescriptors.timeStanding;
      case 15:
        return ExdDescriptors.elevation;
      case 16:
        return ExdDescriptors.grade;
      case 17:
        return ExdDescriptors.ascent;
      case 18:
        return ExdDescriptors.descent;
      case 19:
        return ExdDescriptors.verticalSpeed;
      case 20:
        return ExdDescriptors.di2BatteryLevel;
      case 21:
        return ExdDescriptors.frontGear;
      case 22:
        return ExdDescriptors.rearGear;
      case 23:
        return ExdDescriptors.gearRatio;
      case 24:
        return ExdDescriptors.heartRate;
      case 25:
        return ExdDescriptors.heartRateZone;
      case 26:
        return ExdDescriptors.timeInHeartRateZone;
      case 27:
        return ExdDescriptors.heartRateReserve;
      case 28:
        return ExdDescriptors.calories;
      case 29:
        return ExdDescriptors.gpsAccuracy;
      case 30:
        return ExdDescriptors.gpsSignalStrength;
      case 31:
        return ExdDescriptors.temperature;
      case 32:
        return ExdDescriptors.timeOfDay;
      case 33:
        return ExdDescriptors.balance;
      case 34:
        return ExdDescriptors.pedalSmoothness;
      case 35:
        return ExdDescriptors.power;
      case 36:
        return ExdDescriptors.functionalThresholdPower;
      case 37:
        return ExdDescriptors.intensityFactor;
      case 38:
        return ExdDescriptors.work;
      case 39:
        return ExdDescriptors.powerRatio;
      case 40:
        return ExdDescriptors.normalizedPower;
      case 41:
        return ExdDescriptors.trainingStressScore;
      case 42:
        return ExdDescriptors.timeOnZone;
      case 43:
        return ExdDescriptors.speed;
      case 44:
        return ExdDescriptors.laps;
      case 45:
        return ExdDescriptors.reps;
      case 46:
        return ExdDescriptors.workoutStep;
      case 47:
        return ExdDescriptors.courseDistance;
      case 48:
        return ExdDescriptors.navigationDistance;
      case 49:
        return ExdDescriptors.courseEstimatedTimeOfArrival;
      case 50:
        return ExdDescriptors.navigationEstimatedTimeOfArrival;
      case 51:
        return ExdDescriptors.courseTime;
      case 52:
        return ExdDescriptors.navigationTime;
      case 53:
        return ExdDescriptors.courseHeading;
      case 54:
        return ExdDescriptors.navigationHeading;
      case 55:
        return ExdDescriptors.powerZone;
      case 56:
        return ExdDescriptors.torqueEffectiveness;
      case 57:
        return ExdDescriptors.timerTime;
      case 58:
        return ExdDescriptors.powerWeightRatio;
      case 59:
        return ExdDescriptors.leftPlatformCenterOffset;
      case 60:
        return ExdDescriptors.rightPlatformCenterOffset;
      case 61:
        return ExdDescriptors.leftPowerPhaseStartAngle;
      case 62:
        return ExdDescriptors.rightPowerPhaseStartAngle;
      case 63:
        return ExdDescriptors.leftPowerPhaseFinishAngle;
      case 64:
        return ExdDescriptors.rightPowerPhaseFinishAngle;
      case 65:
        return ExdDescriptors.gears;
      case 66:
        return ExdDescriptors.pace;
      case 67:
        return ExdDescriptors.trainingEffect;
      case 68:
        return ExdDescriptors.verticalOscillation;
      case 69:
        return ExdDescriptors.verticalRatio;
      case 70:
        return ExdDescriptors.groundContactTime;
      case 71:
        return ExdDescriptors.leftGroundContactTimeBalance;
      case 72:
        return ExdDescriptors.rightGroundContactTimeBalance;
      case 73:
        return ExdDescriptors.strideLength;
      case 74:
        return ExdDescriptors.runningCadence;
      case 75:
        return ExdDescriptors.performanceCondition;
      case 76:
        return ExdDescriptors.courseType;
      case 77:
        return ExdDescriptors.timeInPowerZone;
      case 78:
        return ExdDescriptors.navigationTurn;
      case 79:
        return ExdDescriptors.courseLocation;
      case 80:
        return ExdDescriptors.navigationLocation;
      case 81:
        return ExdDescriptors.compass;
      case 82:
        return ExdDescriptors.gearCombo;
      case 83:
        return ExdDescriptors.muscleOxygen;
      case 84:
        return ExdDescriptors.icon;
      case 85:
        return ExdDescriptors.compassHeading;
      case 86:
        return ExdDescriptors.gpsHeading;
      case 87:
        return ExdDescriptors.gpsElevation;
      case 88:
        return ExdDescriptors.anaerobicTrainingEffect;
      case 89:
        return ExdDescriptors.course;
      case 90:
        return ExdDescriptors.offCourse;
      case 91:
        return ExdDescriptors.glideRatio;
      case 92:
        return ExdDescriptors.verticalDistance;
      case 93:
        return ExdDescriptors.vmg;
      case 94:
        return ExdDescriptors.ambientPressure;
      case 95:
        return ExdDescriptors.pressure;
      case 96:
        return ExdDescriptors.vam;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum AutoActivityDetect {
  none,
  running,
  cycling,
  swimming,
  walking,
  elliptical,
  sedentary
}

extension AutoActivityDetectExt on AutoActivityDetect {
  int get value {
    switch (this) {
      case AutoActivityDetect.none:
        return 0;
      case AutoActivityDetect.running:
        return 1;
      case AutoActivityDetect.cycling:
        return 2;
      case AutoActivityDetect.swimming:
        return 4;
      case AutoActivityDetect.walking:
        return 8;
      case AutoActivityDetect.elliptical:
        return 32;
      case AutoActivityDetect.sedentary:
        return 1024;
    }
  }

  static AutoActivityDetect fromValue(int value) {
    switch (value) {
      case 0:
        return AutoActivityDetect.none;
      case 1:
        return AutoActivityDetect.running;
      case 2:
        return AutoActivityDetect.cycling;
      case 4:
        return AutoActivityDetect.swimming;
      case 8:
        return AutoActivityDetect.walking;
      case 32:
        return AutoActivityDetect.elliptical;
      case 1024:
        return AutoActivityDetect.sedentary;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SupportedExdScreenLayouts {
  fullScreen,
  halfVertical,
  halfHorizontal,
  halfVerticalRightSplit,
  halfHorizontalBottomSplit,
  fullQuarterSplit,
  halfVerticalLeftSplit,
  halfHorizontalTopSplit
}

extension SupportedExdScreenLayoutsExt on SupportedExdScreenLayouts {
  int get value {
    switch (this) {
      case SupportedExdScreenLayouts.fullScreen:
        return 1;
      case SupportedExdScreenLayouts.halfVertical:
        return 2;
      case SupportedExdScreenLayouts.halfHorizontal:
        return 4;
      case SupportedExdScreenLayouts.halfVerticalRightSplit:
        return 8;
      case SupportedExdScreenLayouts.halfHorizontalBottomSplit:
        return 16;
      case SupportedExdScreenLayouts.fullQuarterSplit:
        return 32;
      case SupportedExdScreenLayouts.halfVerticalLeftSplit:
        return 64;
      case SupportedExdScreenLayouts.halfHorizontalTopSplit:
        return 128;
    }
  }

  static SupportedExdScreenLayouts fromValue(int value) {
    switch (value) {
      case 1:
        return SupportedExdScreenLayouts.fullScreen;
      case 2:
        return SupportedExdScreenLayouts.halfVertical;
      case 4:
        return SupportedExdScreenLayouts.halfHorizontal;
      case 8:
        return SupportedExdScreenLayouts.halfVerticalRightSplit;
      case 16:
        return SupportedExdScreenLayouts.halfHorizontalBottomSplit;
      case 32:
        return SupportedExdScreenLayouts.fullQuarterSplit;
      case 64:
        return SupportedExdScreenLayouts.halfVerticalLeftSplit;
      case 128:
        return SupportedExdScreenLayouts.halfHorizontalTopSplit;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TurnType {
  arrivingIdx,
  arrivingLeftIdx,
  arrivingRightIdx,
  arrivingViaIdx,
  arrivingViaLeftIdx,
  arrivingViaRightIdx,
  bearKeepLeftIdx,
  bearKeepRightIdx,
  continueIdx,
  exitLeftIdx,
  exitRightIdx,
  ferryIdx,
  roundabout45Idx,
  roundabout90Idx,
  roundabout135Idx,
  roundabout180Idx,
  roundabout225Idx,
  roundabout270Idx,
  roundabout315Idx,
  roundabout360Idx,
  roundaboutNeg45Idx,
  roundaboutNeg90Idx,
  roundaboutNeg135Idx,
  roundaboutNeg180Idx,
  roundaboutNeg225Idx,
  roundaboutNeg270Idx,
  roundaboutNeg315Idx,
  roundaboutNeg360Idx,
  roundaboutGenericIdx,
  roundaboutNegGenericIdx,
  sharpTurnLeftIdx,
  sharpTurnRightIdx,
  turnLeftIdx,
  turnRightIdx,
  uturnLeftIdx,
  uturnRightIdx,
  iconInvIdx,
  iconIdxCnt
}

extension TurnTypeExt on TurnType {
  int get value {
    switch (this) {
      case TurnType.arrivingIdx:
        return 0;
      case TurnType.arrivingLeftIdx:
        return 1;
      case TurnType.arrivingRightIdx:
        return 2;
      case TurnType.arrivingViaIdx:
        return 3;
      case TurnType.arrivingViaLeftIdx:
        return 4;
      case TurnType.arrivingViaRightIdx:
        return 5;
      case TurnType.bearKeepLeftIdx:
        return 6;
      case TurnType.bearKeepRightIdx:
        return 7;
      case TurnType.continueIdx:
        return 8;
      case TurnType.exitLeftIdx:
        return 9;
      case TurnType.exitRightIdx:
        return 10;
      case TurnType.ferryIdx:
        return 11;
      case TurnType.roundabout45Idx:
        return 12;
      case TurnType.roundabout90Idx:
        return 13;
      case TurnType.roundabout135Idx:
        return 14;
      case TurnType.roundabout180Idx:
        return 15;
      case TurnType.roundabout225Idx:
        return 16;
      case TurnType.roundabout270Idx:
        return 17;
      case TurnType.roundabout315Idx:
        return 18;
      case TurnType.roundabout360Idx:
        return 19;
      case TurnType.roundaboutNeg45Idx:
        return 20;
      case TurnType.roundaboutNeg90Idx:
        return 21;
      case TurnType.roundaboutNeg135Idx:
        return 22;
      case TurnType.roundaboutNeg180Idx:
        return 23;
      case TurnType.roundaboutNeg225Idx:
        return 24;
      case TurnType.roundaboutNeg270Idx:
        return 25;
      case TurnType.roundaboutNeg315Idx:
        return 26;
      case TurnType.roundaboutNeg360Idx:
        return 27;
      case TurnType.roundaboutGenericIdx:
        return 28;
      case TurnType.roundaboutNegGenericIdx:
        return 29;
      case TurnType.sharpTurnLeftIdx:
        return 30;
      case TurnType.sharpTurnRightIdx:
        return 31;
      case TurnType.turnLeftIdx:
        return 32;
      case TurnType.turnRightIdx:
        return 33;
      case TurnType.uturnLeftIdx:
        return 34;
      case TurnType.uturnRightIdx:
        return 35;
      case TurnType.iconInvIdx:
        return 36;
      case TurnType.iconIdxCnt:
        return 37;
    }
  }

  static TurnType fromValue(int value) {
    switch (value) {
      case 0:
        return TurnType.arrivingIdx;
      case 1:
        return TurnType.arrivingLeftIdx;
      case 2:
        return TurnType.arrivingRightIdx;
      case 3:
        return TurnType.arrivingViaIdx;
      case 4:
        return TurnType.arrivingViaLeftIdx;
      case 5:
        return TurnType.arrivingViaRightIdx;
      case 6:
        return TurnType.bearKeepLeftIdx;
      case 7:
        return TurnType.bearKeepRightIdx;
      case 8:
        return TurnType.continueIdx;
      case 9:
        return TurnType.exitLeftIdx;
      case 10:
        return TurnType.exitRightIdx;
      case 11:
        return TurnType.ferryIdx;
      case 12:
        return TurnType.roundabout45Idx;
      case 13:
        return TurnType.roundabout90Idx;
      case 14:
        return TurnType.roundabout135Idx;
      case 15:
        return TurnType.roundabout180Idx;
      case 16:
        return TurnType.roundabout225Idx;
      case 17:
        return TurnType.roundabout270Idx;
      case 18:
        return TurnType.roundabout315Idx;
      case 19:
        return TurnType.roundabout360Idx;
      case 20:
        return TurnType.roundaboutNeg45Idx;
      case 21:
        return TurnType.roundaboutNeg90Idx;
      case 22:
        return TurnType.roundaboutNeg135Idx;
      case 23:
        return TurnType.roundaboutNeg180Idx;
      case 24:
        return TurnType.roundaboutNeg225Idx;
      case 25:
        return TurnType.roundaboutNeg270Idx;
      case 26:
        return TurnType.roundaboutNeg315Idx;
      case 27:
        return TurnType.roundaboutNeg360Idx;
      case 28:
        return TurnType.roundaboutGenericIdx;
      case 29:
        return TurnType.roundaboutNegGenericIdx;
      case 30:
        return TurnType.sharpTurnLeftIdx;
      case 31:
        return TurnType.sharpTurnRightIdx;
      case 32:
        return TurnType.turnLeftIdx;
      case 33:
        return TurnType.turnRightIdx;
      case 34:
        return TurnType.uturnLeftIdx;
      case 35:
        return TurnType.uturnRightIdx;
      case 36:
        return TurnType.iconInvIdx;
      case 37:
        return TurnType.iconIdxCnt;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BikeLightBeamAngleMode { manual, auto }

extension BikeLightBeamAngleModeExt on BikeLightBeamAngleMode {
  int get value {
    switch (this) {
      case BikeLightBeamAngleMode.manual:
        return 0;
      case BikeLightBeamAngleMode.auto:
        return 1;
    }
  }

  static BikeLightBeamAngleMode fromValue(int value) {
    switch (value) {
      case 0:
        return BikeLightBeamAngleMode.manual;
      case 1:
        return BikeLightBeamAngleMode.auto;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum FitBaseUnit { other, kilogram, pound }

extension FitBaseUnitExt on FitBaseUnit {
  int get value {
    switch (this) {
      case FitBaseUnit.other:
        return 0;
      case FitBaseUnit.kilogram:
        return 1;
      case FitBaseUnit.pound:
        return 2;
    }
  }

  static FitBaseUnit fromValue(int value) {
    switch (value) {
      case 0:
        return FitBaseUnit.other;
      case 1:
        return FitBaseUnit.kilogram;
      case 2:
        return FitBaseUnit.pound;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SetType { rest, active }

extension SetTypeExt on SetType {
  int get value {
    switch (this) {
      case SetType.rest:
        return 0;
      case SetType.active:
        return 1;
    }
  }

  static SetType fromValue(int value) {
    switch (value) {
      case 0:
        return SetType.rest;
      case 1:
        return SetType.active;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ExerciseCategory {
  benchPress,
  calfRaise,
  cardio,
  carry,
  chop,
  core,
  crunch,
  curl,
  deadlift,
  flye,
  hipRaise,
  hipStability,
  hipSwing,
  hyperextension,
  lateralRaise,
  legCurl,
  legRaise,
  lunge,
  olympicLift,
  plank,
  plyo,
  pullUp,
  pushUp,
  row,
  shoulderPress,
  shoulderStability,
  shrug,
  sitUp,
  squat,
  totalBody,
  tricepsExtension,
  warmUp,
  run,
  unknown
}

extension ExerciseCategoryExt on ExerciseCategory {
  int get value {
    switch (this) {
      case ExerciseCategory.benchPress:
        return 0;
      case ExerciseCategory.calfRaise:
        return 1;
      case ExerciseCategory.cardio:
        return 2;
      case ExerciseCategory.carry:
        return 3;
      case ExerciseCategory.chop:
        return 4;
      case ExerciseCategory.core:
        return 5;
      case ExerciseCategory.crunch:
        return 6;
      case ExerciseCategory.curl:
        return 7;
      case ExerciseCategory.deadlift:
        return 8;
      case ExerciseCategory.flye:
        return 9;
      case ExerciseCategory.hipRaise:
        return 10;
      case ExerciseCategory.hipStability:
        return 11;
      case ExerciseCategory.hipSwing:
        return 12;
      case ExerciseCategory.hyperextension:
        return 13;
      case ExerciseCategory.lateralRaise:
        return 14;
      case ExerciseCategory.legCurl:
        return 15;
      case ExerciseCategory.legRaise:
        return 16;
      case ExerciseCategory.lunge:
        return 17;
      case ExerciseCategory.olympicLift:
        return 18;
      case ExerciseCategory.plank:
        return 19;
      case ExerciseCategory.plyo:
        return 20;
      case ExerciseCategory.pullUp:
        return 21;
      case ExerciseCategory.pushUp:
        return 22;
      case ExerciseCategory.row:
        return 23;
      case ExerciseCategory.shoulderPress:
        return 24;
      case ExerciseCategory.shoulderStability:
        return 25;
      case ExerciseCategory.shrug:
        return 26;
      case ExerciseCategory.sitUp:
        return 27;
      case ExerciseCategory.squat:
        return 28;
      case ExerciseCategory.totalBody:
        return 29;
      case ExerciseCategory.tricepsExtension:
        return 30;
      case ExerciseCategory.warmUp:
        return 31;
      case ExerciseCategory.run:
        return 32;
      case ExerciseCategory.unknown:
        return 65534;
    }
  }

  static ExerciseCategory fromValue(int value) {
    switch (value) {
      case 0:
        return ExerciseCategory.benchPress;
      case 1:
        return ExerciseCategory.calfRaise;
      case 2:
        return ExerciseCategory.cardio;
      case 3:
        return ExerciseCategory.carry;
      case 4:
        return ExerciseCategory.chop;
      case 5:
        return ExerciseCategory.core;
      case 6:
        return ExerciseCategory.crunch;
      case 7:
        return ExerciseCategory.curl;
      case 8:
        return ExerciseCategory.deadlift;
      case 9:
        return ExerciseCategory.flye;
      case 10:
        return ExerciseCategory.hipRaise;
      case 11:
        return ExerciseCategory.hipStability;
      case 12:
        return ExerciseCategory.hipSwing;
      case 13:
        return ExerciseCategory.hyperextension;
      case 14:
        return ExerciseCategory.lateralRaise;
      case 15:
        return ExerciseCategory.legCurl;
      case 16:
        return ExerciseCategory.legRaise;
      case 17:
        return ExerciseCategory.lunge;
      case 18:
        return ExerciseCategory.olympicLift;
      case 19:
        return ExerciseCategory.plank;
      case 20:
        return ExerciseCategory.plyo;
      case 21:
        return ExerciseCategory.pullUp;
      case 22:
        return ExerciseCategory.pushUp;
      case 23:
        return ExerciseCategory.row;
      case 24:
        return ExerciseCategory.shoulderPress;
      case 25:
        return ExerciseCategory.shoulderStability;
      case 26:
        return ExerciseCategory.shrug;
      case 27:
        return ExerciseCategory.sitUp;
      case 28:
        return ExerciseCategory.squat;
      case 29:
        return ExerciseCategory.totalBody;
      case 30:
        return ExerciseCategory.tricepsExtension;
      case 31:
        return ExerciseCategory.warmUp;
      case 32:
        return ExerciseCategory.run;
      case 65534:
        return ExerciseCategory.unknown;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum BenchPressExerciseName {
  alternatingDumbbellChestPressOnSwissBall,
  barbellBenchPress,
  barbellBoardBenchPress,
  barbellFloorPress,
  closeGripBarbellBenchPress,
  declineDumbbellBenchPress,
  dumbbellBenchPress,
  dumbbellFloorPress,
  inclineBarbellBenchPress,
  inclineDumbbellBenchPress,
  inclineSmithMachineBenchPress,
  isometricBarbellBenchPress,
  kettlebellChestPress,
  neutralGripDumbbellBenchPress,
  neutralGripDumbbellInclineBenchPress,
  oneArmFloorPress,
  weightedOneArmFloorPress,
  partialLockout,
  reverseGripBarbellBenchPress,
  reverseGripInclineBenchPress,
  singleArmCableChestPress,
  singleArmDumbbellBenchPress,
  smithMachineBenchPress,
  swissBallDumbbellChestPress,
  tripleStopBarbellBenchPress,
  wideGripBarbellBenchPress,
  alternatingDumbbellChestPress
}

extension BenchPressExerciseNameExt on BenchPressExerciseName {
  int get value {
    switch (this) {
      case BenchPressExerciseName.alternatingDumbbellChestPressOnSwissBall:
        return 0;
      case BenchPressExerciseName.barbellBenchPress:
        return 1;
      case BenchPressExerciseName.barbellBoardBenchPress:
        return 2;
      case BenchPressExerciseName.barbellFloorPress:
        return 3;
      case BenchPressExerciseName.closeGripBarbellBenchPress:
        return 4;
      case BenchPressExerciseName.declineDumbbellBenchPress:
        return 5;
      case BenchPressExerciseName.dumbbellBenchPress:
        return 6;
      case BenchPressExerciseName.dumbbellFloorPress:
        return 7;
      case BenchPressExerciseName.inclineBarbellBenchPress:
        return 8;
      case BenchPressExerciseName.inclineDumbbellBenchPress:
        return 9;
      case BenchPressExerciseName.inclineSmithMachineBenchPress:
        return 10;
      case BenchPressExerciseName.isometricBarbellBenchPress:
        return 11;
      case BenchPressExerciseName.kettlebellChestPress:
        return 12;
      case BenchPressExerciseName.neutralGripDumbbellBenchPress:
        return 13;
      case BenchPressExerciseName.neutralGripDumbbellInclineBenchPress:
        return 14;
      case BenchPressExerciseName.oneArmFloorPress:
        return 15;
      case BenchPressExerciseName.weightedOneArmFloorPress:
        return 16;
      case BenchPressExerciseName.partialLockout:
        return 17;
      case BenchPressExerciseName.reverseGripBarbellBenchPress:
        return 18;
      case BenchPressExerciseName.reverseGripInclineBenchPress:
        return 19;
      case BenchPressExerciseName.singleArmCableChestPress:
        return 20;
      case BenchPressExerciseName.singleArmDumbbellBenchPress:
        return 21;
      case BenchPressExerciseName.smithMachineBenchPress:
        return 22;
      case BenchPressExerciseName.swissBallDumbbellChestPress:
        return 23;
      case BenchPressExerciseName.tripleStopBarbellBenchPress:
        return 24;
      case BenchPressExerciseName.wideGripBarbellBenchPress:
        return 25;
      case BenchPressExerciseName.alternatingDumbbellChestPress:
        return 26;
    }
  }

  static BenchPressExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return BenchPressExerciseName.alternatingDumbbellChestPressOnSwissBall;
      case 1:
        return BenchPressExerciseName.barbellBenchPress;
      case 2:
        return BenchPressExerciseName.barbellBoardBenchPress;
      case 3:
        return BenchPressExerciseName.barbellFloorPress;
      case 4:
        return BenchPressExerciseName.closeGripBarbellBenchPress;
      case 5:
        return BenchPressExerciseName.declineDumbbellBenchPress;
      case 6:
        return BenchPressExerciseName.dumbbellBenchPress;
      case 7:
        return BenchPressExerciseName.dumbbellFloorPress;
      case 8:
        return BenchPressExerciseName.inclineBarbellBenchPress;
      case 9:
        return BenchPressExerciseName.inclineDumbbellBenchPress;
      case 10:
        return BenchPressExerciseName.inclineSmithMachineBenchPress;
      case 11:
        return BenchPressExerciseName.isometricBarbellBenchPress;
      case 12:
        return BenchPressExerciseName.kettlebellChestPress;
      case 13:
        return BenchPressExerciseName.neutralGripDumbbellBenchPress;
      case 14:
        return BenchPressExerciseName.neutralGripDumbbellInclineBenchPress;
      case 15:
        return BenchPressExerciseName.oneArmFloorPress;
      case 16:
        return BenchPressExerciseName.weightedOneArmFloorPress;
      case 17:
        return BenchPressExerciseName.partialLockout;
      case 18:
        return BenchPressExerciseName.reverseGripBarbellBenchPress;
      case 19:
        return BenchPressExerciseName.reverseGripInclineBenchPress;
      case 20:
        return BenchPressExerciseName.singleArmCableChestPress;
      case 21:
        return BenchPressExerciseName.singleArmDumbbellBenchPress;
      case 22:
        return BenchPressExerciseName.smithMachineBenchPress;
      case 23:
        return BenchPressExerciseName.swissBallDumbbellChestPress;
      case 24:
        return BenchPressExerciseName.tripleStopBarbellBenchPress;
      case 25:
        return BenchPressExerciseName.wideGripBarbellBenchPress;
      case 26:
        return BenchPressExerciseName.alternatingDumbbellChestPress;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CalfRaiseExerciseName {
  n3WayCalfRaise,
  n3WayWeightedCalfRaise,
  n3WaySingleLegCalfRaise,
  n3WayWeightedSingleLegCalfRaise,
  donkeyCalfRaise,
  weightedDonkeyCalfRaise,
  seatedCalfRaise,
  weightedSeatedCalfRaise,
  seatedDumbbellToeRaise,
  singleLegBentKneeCalfRaise,
  weightedSingleLegBentKneeCalfRaise,
  singleLegDeclinePushUp,
  singleLegDonkeyCalfRaise,
  weightedSingleLegDonkeyCalfRaise,
  singleLegHipRaiseWithKneeHold,
  singleLegStandingCalfRaise,
  singleLegStandingDumbbellCalfRaise,
  standingBarbellCalfRaise,
  standingCalfRaise,
  weightedStandingCalfRaise,
  standingDumbbellCalfRaise
}

extension CalfRaiseExerciseNameExt on CalfRaiseExerciseName {
  int get value {
    switch (this) {
      case CalfRaiseExerciseName.n3WayCalfRaise:
        return 0;
      case CalfRaiseExerciseName.n3WayWeightedCalfRaise:
        return 1;
      case CalfRaiseExerciseName.n3WaySingleLegCalfRaise:
        return 2;
      case CalfRaiseExerciseName.n3WayWeightedSingleLegCalfRaise:
        return 3;
      case CalfRaiseExerciseName.donkeyCalfRaise:
        return 4;
      case CalfRaiseExerciseName.weightedDonkeyCalfRaise:
        return 5;
      case CalfRaiseExerciseName.seatedCalfRaise:
        return 6;
      case CalfRaiseExerciseName.weightedSeatedCalfRaise:
        return 7;
      case CalfRaiseExerciseName.seatedDumbbellToeRaise:
        return 8;
      case CalfRaiseExerciseName.singleLegBentKneeCalfRaise:
        return 9;
      case CalfRaiseExerciseName.weightedSingleLegBentKneeCalfRaise:
        return 10;
      case CalfRaiseExerciseName.singleLegDeclinePushUp:
        return 11;
      case CalfRaiseExerciseName.singleLegDonkeyCalfRaise:
        return 12;
      case CalfRaiseExerciseName.weightedSingleLegDonkeyCalfRaise:
        return 13;
      case CalfRaiseExerciseName.singleLegHipRaiseWithKneeHold:
        return 14;
      case CalfRaiseExerciseName.singleLegStandingCalfRaise:
        return 15;
      case CalfRaiseExerciseName.singleLegStandingDumbbellCalfRaise:
        return 16;
      case CalfRaiseExerciseName.standingBarbellCalfRaise:
        return 17;
      case CalfRaiseExerciseName.standingCalfRaise:
        return 18;
      case CalfRaiseExerciseName.weightedStandingCalfRaise:
        return 19;
      case CalfRaiseExerciseName.standingDumbbellCalfRaise:
        return 20;
    }
  }

  static CalfRaiseExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return CalfRaiseExerciseName.n3WayCalfRaise;
      case 1:
        return CalfRaiseExerciseName.n3WayWeightedCalfRaise;
      case 2:
        return CalfRaiseExerciseName.n3WaySingleLegCalfRaise;
      case 3:
        return CalfRaiseExerciseName.n3WayWeightedSingleLegCalfRaise;
      case 4:
        return CalfRaiseExerciseName.donkeyCalfRaise;
      case 5:
        return CalfRaiseExerciseName.weightedDonkeyCalfRaise;
      case 6:
        return CalfRaiseExerciseName.seatedCalfRaise;
      case 7:
        return CalfRaiseExerciseName.weightedSeatedCalfRaise;
      case 8:
        return CalfRaiseExerciseName.seatedDumbbellToeRaise;
      case 9:
        return CalfRaiseExerciseName.singleLegBentKneeCalfRaise;
      case 10:
        return CalfRaiseExerciseName.weightedSingleLegBentKneeCalfRaise;
      case 11:
        return CalfRaiseExerciseName.singleLegDeclinePushUp;
      case 12:
        return CalfRaiseExerciseName.singleLegDonkeyCalfRaise;
      case 13:
        return CalfRaiseExerciseName.weightedSingleLegDonkeyCalfRaise;
      case 14:
        return CalfRaiseExerciseName.singleLegHipRaiseWithKneeHold;
      case 15:
        return CalfRaiseExerciseName.singleLegStandingCalfRaise;
      case 16:
        return CalfRaiseExerciseName.singleLegStandingDumbbellCalfRaise;
      case 17:
        return CalfRaiseExerciseName.standingBarbellCalfRaise;
      case 18:
        return CalfRaiseExerciseName.standingCalfRaise;
      case 19:
        return CalfRaiseExerciseName.weightedStandingCalfRaise;
      case 20:
        return CalfRaiseExerciseName.standingDumbbellCalfRaise;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CardioExerciseName {
  bobAndWeaveCircle,
  weightedBobAndWeaveCircle,
  cardioCoreCrawl,
  weightedCardioCoreCrawl,
  doubleUnder,
  weightedDoubleUnder,
  jumpRope,
  weightedJumpRope,
  jumpRopeCrossover,
  weightedJumpRopeCrossover,
  jumpRopeJog,
  weightedJumpRopeJog,
  jumpingJacks,
  weightedJumpingJacks,
  skiMoguls,
  weightedSkiMoguls,
  splitJacks,
  weightedSplitJacks,
  squatJacks,
  weightedSquatJacks,
  tripleUnder,
  weightedTripleUnder
}

extension CardioExerciseNameExt on CardioExerciseName {
  int get value {
    switch (this) {
      case CardioExerciseName.bobAndWeaveCircle:
        return 0;
      case CardioExerciseName.weightedBobAndWeaveCircle:
        return 1;
      case CardioExerciseName.cardioCoreCrawl:
        return 2;
      case CardioExerciseName.weightedCardioCoreCrawl:
        return 3;
      case CardioExerciseName.doubleUnder:
        return 4;
      case CardioExerciseName.weightedDoubleUnder:
        return 5;
      case CardioExerciseName.jumpRope:
        return 6;
      case CardioExerciseName.weightedJumpRope:
        return 7;
      case CardioExerciseName.jumpRopeCrossover:
        return 8;
      case CardioExerciseName.weightedJumpRopeCrossover:
        return 9;
      case CardioExerciseName.jumpRopeJog:
        return 10;
      case CardioExerciseName.weightedJumpRopeJog:
        return 11;
      case CardioExerciseName.jumpingJacks:
        return 12;
      case CardioExerciseName.weightedJumpingJacks:
        return 13;
      case CardioExerciseName.skiMoguls:
        return 14;
      case CardioExerciseName.weightedSkiMoguls:
        return 15;
      case CardioExerciseName.splitJacks:
        return 16;
      case CardioExerciseName.weightedSplitJacks:
        return 17;
      case CardioExerciseName.squatJacks:
        return 18;
      case CardioExerciseName.weightedSquatJacks:
        return 19;
      case CardioExerciseName.tripleUnder:
        return 20;
      case CardioExerciseName.weightedTripleUnder:
        return 21;
    }
  }

  static CardioExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return CardioExerciseName.bobAndWeaveCircle;
      case 1:
        return CardioExerciseName.weightedBobAndWeaveCircle;
      case 2:
        return CardioExerciseName.cardioCoreCrawl;
      case 3:
        return CardioExerciseName.weightedCardioCoreCrawl;
      case 4:
        return CardioExerciseName.doubleUnder;
      case 5:
        return CardioExerciseName.weightedDoubleUnder;
      case 6:
        return CardioExerciseName.jumpRope;
      case 7:
        return CardioExerciseName.weightedJumpRope;
      case 8:
        return CardioExerciseName.jumpRopeCrossover;
      case 9:
        return CardioExerciseName.weightedJumpRopeCrossover;
      case 10:
        return CardioExerciseName.jumpRopeJog;
      case 11:
        return CardioExerciseName.weightedJumpRopeJog;
      case 12:
        return CardioExerciseName.jumpingJacks;
      case 13:
        return CardioExerciseName.weightedJumpingJacks;
      case 14:
        return CardioExerciseName.skiMoguls;
      case 15:
        return CardioExerciseName.weightedSkiMoguls;
      case 16:
        return CardioExerciseName.splitJacks;
      case 17:
        return CardioExerciseName.weightedSplitJacks;
      case 18:
        return CardioExerciseName.squatJacks;
      case 19:
        return CardioExerciseName.weightedSquatJacks;
      case 20:
        return CardioExerciseName.tripleUnder;
      case 21:
        return CardioExerciseName.weightedTripleUnder;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CarryExerciseName {
  barHolds,
  farmersWalk,
  farmersWalkOnToes,
  hexDumbbellHold,
  overheadCarry
}

extension CarryExerciseNameExt on CarryExerciseName {
  int get value {
    switch (this) {
      case CarryExerciseName.barHolds:
        return 0;
      case CarryExerciseName.farmersWalk:
        return 1;
      case CarryExerciseName.farmersWalkOnToes:
        return 2;
      case CarryExerciseName.hexDumbbellHold:
        return 3;
      case CarryExerciseName.overheadCarry:
        return 4;
    }
  }

  static CarryExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return CarryExerciseName.barHolds;
      case 1:
        return CarryExerciseName.farmersWalk;
      case 2:
        return CarryExerciseName.farmersWalkOnToes;
      case 3:
        return CarryExerciseName.hexDumbbellHold;
      case 4:
        return CarryExerciseName.overheadCarry;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ChopExerciseName {
  cablePullThrough,
  cableRotationalLift,
  cableWoodchop,
  crossChopToKnee,
  weightedCrossChopToKnee,
  dumbbellChop,
  halfKneelingRotation,
  weightedHalfKneelingRotation,
  halfKneelingRotationalChop,
  halfKneelingRotationalReverseChop,
  halfKneelingStabilityChop,
  halfKneelingStabilityReverseChop,
  kneelingRotationalChop,
  kneelingRotationalReverseChop,
  kneelingStabilityChop,
  kneelingWoodchopper,
  medicineBallWoodChops,
  powerSquatChops,
  weightedPowerSquatChops,
  standingRotationalChop,
  standingSplitRotationalChop,
  standingSplitRotationalReverseChop,
  standingStabilityReverseChop
}

extension ChopExerciseNameExt on ChopExerciseName {
  int get value {
    switch (this) {
      case ChopExerciseName.cablePullThrough:
        return 0;
      case ChopExerciseName.cableRotationalLift:
        return 1;
      case ChopExerciseName.cableWoodchop:
        return 2;
      case ChopExerciseName.crossChopToKnee:
        return 3;
      case ChopExerciseName.weightedCrossChopToKnee:
        return 4;
      case ChopExerciseName.dumbbellChop:
        return 5;
      case ChopExerciseName.halfKneelingRotation:
        return 6;
      case ChopExerciseName.weightedHalfKneelingRotation:
        return 7;
      case ChopExerciseName.halfKneelingRotationalChop:
        return 8;
      case ChopExerciseName.halfKneelingRotationalReverseChop:
        return 9;
      case ChopExerciseName.halfKneelingStabilityChop:
        return 10;
      case ChopExerciseName.halfKneelingStabilityReverseChop:
        return 11;
      case ChopExerciseName.kneelingRotationalChop:
        return 12;
      case ChopExerciseName.kneelingRotationalReverseChop:
        return 13;
      case ChopExerciseName.kneelingStabilityChop:
        return 14;
      case ChopExerciseName.kneelingWoodchopper:
        return 15;
      case ChopExerciseName.medicineBallWoodChops:
        return 16;
      case ChopExerciseName.powerSquatChops:
        return 17;
      case ChopExerciseName.weightedPowerSquatChops:
        return 18;
      case ChopExerciseName.standingRotationalChop:
        return 19;
      case ChopExerciseName.standingSplitRotationalChop:
        return 20;
      case ChopExerciseName.standingSplitRotationalReverseChop:
        return 21;
      case ChopExerciseName.standingStabilityReverseChop:
        return 22;
    }
  }

  static ChopExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return ChopExerciseName.cablePullThrough;
      case 1:
        return ChopExerciseName.cableRotationalLift;
      case 2:
        return ChopExerciseName.cableWoodchop;
      case 3:
        return ChopExerciseName.crossChopToKnee;
      case 4:
        return ChopExerciseName.weightedCrossChopToKnee;
      case 5:
        return ChopExerciseName.dumbbellChop;
      case 6:
        return ChopExerciseName.halfKneelingRotation;
      case 7:
        return ChopExerciseName.weightedHalfKneelingRotation;
      case 8:
        return ChopExerciseName.halfKneelingRotationalChop;
      case 9:
        return ChopExerciseName.halfKneelingRotationalReverseChop;
      case 10:
        return ChopExerciseName.halfKneelingStabilityChop;
      case 11:
        return ChopExerciseName.halfKneelingStabilityReverseChop;
      case 12:
        return ChopExerciseName.kneelingRotationalChop;
      case 13:
        return ChopExerciseName.kneelingRotationalReverseChop;
      case 14:
        return ChopExerciseName.kneelingStabilityChop;
      case 15:
        return ChopExerciseName.kneelingWoodchopper;
      case 16:
        return ChopExerciseName.medicineBallWoodChops;
      case 17:
        return ChopExerciseName.powerSquatChops;
      case 18:
        return ChopExerciseName.weightedPowerSquatChops;
      case 19:
        return ChopExerciseName.standingRotationalChop;
      case 20:
        return ChopExerciseName.standingSplitRotationalChop;
      case 21:
        return ChopExerciseName.standingSplitRotationalReverseChop;
      case 22:
        return ChopExerciseName.standingStabilityReverseChop;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CoreExerciseName {
  absJabs,
  weightedAbsJabs,
  alternatingPlateReach,
  barbellRollout,
  weightedBarbellRollout,
  bodyBarObliqueTwist,
  cableCorePress,
  cableSideBend,
  sideBend,
  weightedSideBend,
  crescentCircle,
  weightedCrescentCircle,
  cyclingRussianTwist,
  weightedCyclingRussianTwist,
  elevatedFeetRussianTwist,
  weightedElevatedFeetRussianTwist,
  halfTurkishGetUp,
  kettlebellWindmill,
  kneelingAbWheel,
  weightedKneelingAbWheel,
  modifiedFrontLever,
  openKneeTucks,
  weightedOpenKneeTucks,
  sideAbsLegLift,
  weightedSideAbsLegLift,
  swissBallJackknife,
  weightedSwissBallJackknife,
  swissBallPike,
  weightedSwissBallPike,
  swissBallRollout,
  weightedSwissBallRollout,
  triangleHipPress,
  weightedTriangleHipPress,
  trxSuspendedJackknife,
  weightedTrxSuspendedJackknife,
  uBoat,
  weightedUBoat,
  windmillSwitches,
  weightedWindmillSwitches,
  alternatingSlideOut,
  weightedAlternatingSlideOut,
  ghdBackExtensions,
  weightedGhdBackExtensions,
  overheadWalk,
  inchworm,
  weightedModifiedFrontLever,
  russianTwist,
  abdominalLegRotations,
  armAndLegExtensionOnKnees,
  bicycle,
  bicepCurlWithLegExtension,
  catCow,
  corkscrew,
  crissCross,
  crissCrossWithBall,
  doubleLegStretch,
  kneeFolds,
  lowerLift,
  neckPull,
  pelvicClocks,
  rollOver,
  rollUp,
  rolling,
  rowing1,
  rowing2,
  scissors,
  singleLegCircles,
  singleLegStretch,
  snakeTwist1And2,
  swan,
  swimming,
  teaser,
  theHundred
}

extension CoreExerciseNameExt on CoreExerciseName {
  int get value {
    switch (this) {
      case CoreExerciseName.absJabs:
        return 0;
      case CoreExerciseName.weightedAbsJabs:
        return 1;
      case CoreExerciseName.alternatingPlateReach:
        return 2;
      case CoreExerciseName.barbellRollout:
        return 3;
      case CoreExerciseName.weightedBarbellRollout:
        return 4;
      case CoreExerciseName.bodyBarObliqueTwist:
        return 5;
      case CoreExerciseName.cableCorePress:
        return 6;
      case CoreExerciseName.cableSideBend:
        return 7;
      case CoreExerciseName.sideBend:
        return 8;
      case CoreExerciseName.weightedSideBend:
        return 9;
      case CoreExerciseName.crescentCircle:
        return 10;
      case CoreExerciseName.weightedCrescentCircle:
        return 11;
      case CoreExerciseName.cyclingRussianTwist:
        return 12;
      case CoreExerciseName.weightedCyclingRussianTwist:
        return 13;
      case CoreExerciseName.elevatedFeetRussianTwist:
        return 14;
      case CoreExerciseName.weightedElevatedFeetRussianTwist:
        return 15;
      case CoreExerciseName.halfTurkishGetUp:
        return 16;
      case CoreExerciseName.kettlebellWindmill:
        return 17;
      case CoreExerciseName.kneelingAbWheel:
        return 18;
      case CoreExerciseName.weightedKneelingAbWheel:
        return 19;
      case CoreExerciseName.modifiedFrontLever:
        return 20;
      case CoreExerciseName.openKneeTucks:
        return 21;
      case CoreExerciseName.weightedOpenKneeTucks:
        return 22;
      case CoreExerciseName.sideAbsLegLift:
        return 23;
      case CoreExerciseName.weightedSideAbsLegLift:
        return 24;
      case CoreExerciseName.swissBallJackknife:
        return 25;
      case CoreExerciseName.weightedSwissBallJackknife:
        return 26;
      case CoreExerciseName.swissBallPike:
        return 27;
      case CoreExerciseName.weightedSwissBallPike:
        return 28;
      case CoreExerciseName.swissBallRollout:
        return 29;
      case CoreExerciseName.weightedSwissBallRollout:
        return 30;
      case CoreExerciseName.triangleHipPress:
        return 31;
      case CoreExerciseName.weightedTriangleHipPress:
        return 32;
      case CoreExerciseName.trxSuspendedJackknife:
        return 33;
      case CoreExerciseName.weightedTrxSuspendedJackknife:
        return 34;
      case CoreExerciseName.uBoat:
        return 35;
      case CoreExerciseName.weightedUBoat:
        return 36;
      case CoreExerciseName.windmillSwitches:
        return 37;
      case CoreExerciseName.weightedWindmillSwitches:
        return 38;
      case CoreExerciseName.alternatingSlideOut:
        return 39;
      case CoreExerciseName.weightedAlternatingSlideOut:
        return 40;
      case CoreExerciseName.ghdBackExtensions:
        return 41;
      case CoreExerciseName.weightedGhdBackExtensions:
        return 42;
      case CoreExerciseName.overheadWalk:
        return 43;
      case CoreExerciseName.inchworm:
        return 44;
      case CoreExerciseName.weightedModifiedFrontLever:
        return 45;
      case CoreExerciseName.russianTwist:
        return 46;
      case CoreExerciseName.abdominalLegRotations:
        return 47;
      case CoreExerciseName.armAndLegExtensionOnKnees:
        return 48;
      case CoreExerciseName.bicycle:
        return 49;
      case CoreExerciseName.bicepCurlWithLegExtension:
        return 50;
      case CoreExerciseName.catCow:
        return 51;
      case CoreExerciseName.corkscrew:
        return 52;
      case CoreExerciseName.crissCross:
        return 53;
      case CoreExerciseName.crissCrossWithBall:
        return 54;
      case CoreExerciseName.doubleLegStretch:
        return 55;
      case CoreExerciseName.kneeFolds:
        return 56;
      case CoreExerciseName.lowerLift:
        return 57;
      case CoreExerciseName.neckPull:
        return 58;
      case CoreExerciseName.pelvicClocks:
        return 59;
      case CoreExerciseName.rollOver:
        return 60;
      case CoreExerciseName.rollUp:
        return 61;
      case CoreExerciseName.rolling:
        return 62;
      case CoreExerciseName.rowing1:
        return 63;
      case CoreExerciseName.rowing2:
        return 64;
      case CoreExerciseName.scissors:
        return 65;
      case CoreExerciseName.singleLegCircles:
        return 66;
      case CoreExerciseName.singleLegStretch:
        return 67;
      case CoreExerciseName.snakeTwist1And2:
        return 68;
      case CoreExerciseName.swan:
        return 69;
      case CoreExerciseName.swimming:
        return 70;
      case CoreExerciseName.teaser:
        return 71;
      case CoreExerciseName.theHundred:
        return 72;
    }
  }

  static CoreExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return CoreExerciseName.absJabs;
      case 1:
        return CoreExerciseName.weightedAbsJabs;
      case 2:
        return CoreExerciseName.alternatingPlateReach;
      case 3:
        return CoreExerciseName.barbellRollout;
      case 4:
        return CoreExerciseName.weightedBarbellRollout;
      case 5:
        return CoreExerciseName.bodyBarObliqueTwist;
      case 6:
        return CoreExerciseName.cableCorePress;
      case 7:
        return CoreExerciseName.cableSideBend;
      case 8:
        return CoreExerciseName.sideBend;
      case 9:
        return CoreExerciseName.weightedSideBend;
      case 10:
        return CoreExerciseName.crescentCircle;
      case 11:
        return CoreExerciseName.weightedCrescentCircle;
      case 12:
        return CoreExerciseName.cyclingRussianTwist;
      case 13:
        return CoreExerciseName.weightedCyclingRussianTwist;
      case 14:
        return CoreExerciseName.elevatedFeetRussianTwist;
      case 15:
        return CoreExerciseName.weightedElevatedFeetRussianTwist;
      case 16:
        return CoreExerciseName.halfTurkishGetUp;
      case 17:
        return CoreExerciseName.kettlebellWindmill;
      case 18:
        return CoreExerciseName.kneelingAbWheel;
      case 19:
        return CoreExerciseName.weightedKneelingAbWheel;
      case 20:
        return CoreExerciseName.modifiedFrontLever;
      case 21:
        return CoreExerciseName.openKneeTucks;
      case 22:
        return CoreExerciseName.weightedOpenKneeTucks;
      case 23:
        return CoreExerciseName.sideAbsLegLift;
      case 24:
        return CoreExerciseName.weightedSideAbsLegLift;
      case 25:
        return CoreExerciseName.swissBallJackknife;
      case 26:
        return CoreExerciseName.weightedSwissBallJackknife;
      case 27:
        return CoreExerciseName.swissBallPike;
      case 28:
        return CoreExerciseName.weightedSwissBallPike;
      case 29:
        return CoreExerciseName.swissBallRollout;
      case 30:
        return CoreExerciseName.weightedSwissBallRollout;
      case 31:
        return CoreExerciseName.triangleHipPress;
      case 32:
        return CoreExerciseName.weightedTriangleHipPress;
      case 33:
        return CoreExerciseName.trxSuspendedJackknife;
      case 34:
        return CoreExerciseName.weightedTrxSuspendedJackknife;
      case 35:
        return CoreExerciseName.uBoat;
      case 36:
        return CoreExerciseName.weightedUBoat;
      case 37:
        return CoreExerciseName.windmillSwitches;
      case 38:
        return CoreExerciseName.weightedWindmillSwitches;
      case 39:
        return CoreExerciseName.alternatingSlideOut;
      case 40:
        return CoreExerciseName.weightedAlternatingSlideOut;
      case 41:
        return CoreExerciseName.ghdBackExtensions;
      case 42:
        return CoreExerciseName.weightedGhdBackExtensions;
      case 43:
        return CoreExerciseName.overheadWalk;
      case 44:
        return CoreExerciseName.inchworm;
      case 45:
        return CoreExerciseName.weightedModifiedFrontLever;
      case 46:
        return CoreExerciseName.russianTwist;
      case 47:
        return CoreExerciseName.abdominalLegRotations;
      case 48:
        return CoreExerciseName.armAndLegExtensionOnKnees;
      case 49:
        return CoreExerciseName.bicycle;
      case 50:
        return CoreExerciseName.bicepCurlWithLegExtension;
      case 51:
        return CoreExerciseName.catCow;
      case 52:
        return CoreExerciseName.corkscrew;
      case 53:
        return CoreExerciseName.crissCross;
      case 54:
        return CoreExerciseName.crissCrossWithBall;
      case 55:
        return CoreExerciseName.doubleLegStretch;
      case 56:
        return CoreExerciseName.kneeFolds;
      case 57:
        return CoreExerciseName.lowerLift;
      case 58:
        return CoreExerciseName.neckPull;
      case 59:
        return CoreExerciseName.pelvicClocks;
      case 60:
        return CoreExerciseName.rollOver;
      case 61:
        return CoreExerciseName.rollUp;
      case 62:
        return CoreExerciseName.rolling;
      case 63:
        return CoreExerciseName.rowing1;
      case 64:
        return CoreExerciseName.rowing2;
      case 65:
        return CoreExerciseName.scissors;
      case 66:
        return CoreExerciseName.singleLegCircles;
      case 67:
        return CoreExerciseName.singleLegStretch;
      case 68:
        return CoreExerciseName.snakeTwist1And2;
      case 69:
        return CoreExerciseName.swan;
      case 70:
        return CoreExerciseName.swimming;
      case 71:
        return CoreExerciseName.teaser;
      case 72:
        return CoreExerciseName.theHundred;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CrunchExerciseName {
  bicycleCrunch,
  cableCrunch,
  circularArmCrunch,
  crossedArmsCrunch,
  weightedCrossedArmsCrunch,
  crossLegReverseCrunch,
  weightedCrossLegReverseCrunch,
  crunchChop,
  weightedCrunchChop,
  doubleCrunch,
  weightedDoubleCrunch,
  elbowToKneeCrunch,
  weightedElbowToKneeCrunch,
  flutterKicks,
  weightedFlutterKicks,
  foamRollerReverseCrunchOnBench,
  weightedFoamRollerReverseCrunchOnBench,
  foamRollerReverseCrunchWithDumbbell,
  foamRollerReverseCrunchWithMedicineBall,
  frogPress,
  hangingKneeRaiseObliqueCrunch,
  weightedHangingKneeRaiseObliqueCrunch,
  hipCrossover,
  weightedHipCrossover,
  hollowRock,
  weightedHollowRock,
  inclineReverseCrunch,
  weightedInclineReverseCrunch,
  kneelingCableCrunch,
  kneelingCrossCrunch,
  weightedKneelingCrossCrunch,
  kneelingObliqueCableCrunch,
  kneesToElbow,
  legExtensions,
  weightedLegExtensions,
  legLevers,
  mcgillCurlUp,
  weightedMcgillCurlUp,
  modifiedPilatesRollUpWithBall,
  weightedModifiedPilatesRollUpWithBall,
  pilatesCrunch,
  weightedPilatesCrunch,
  pilatesRollUpWithBall,
  weightedPilatesRollUpWithBall,
  raisedLegsCrunch,
  weightedRaisedLegsCrunch,
  reverseCrunch,
  weightedReverseCrunch,
  reverseCrunchOnABench,
  weightedReverseCrunchOnABench,
  reverseCurlAndLift,
  weightedReverseCurlAndLift,
  rotationalLift,
  weightedRotationalLift,
  seatedAlternatingReverseCrunch,
  weightedSeatedAlternatingReverseCrunch,
  seatedLegU,
  weightedSeatedLegU,
  sideToSideCrunchAndWeave,
  weightedSideToSideCrunchAndWeave,
  singleLegReverseCrunch,
  weightedSingleLegReverseCrunch,
  skaterCrunchCross,
  weightedSkaterCrunchCross,
  standingCableCrunch,
  standingSideCrunch,
  stepClimb,
  weightedStepClimb,
  swissBallCrunch,
  swissBallReverseCrunch,
  weightedSwissBallReverseCrunch,
  swissBallRussianTwist,
  weightedSwissBallRussianTwist,
  swissBallSideCrunch,
  weightedSwissBallSideCrunch,
  thoracicCrunchesOnFoamRoller,
  weightedThoracicCrunchesOnFoamRoller,
  tricepsCrunch,
  weightedBicycleCrunch,
  weightedCrunch,
  weightedSwissBallCrunch,
  toesToBar,
  weightedToesToBar,
  crunch,
  straightLegCrunchWithBall
}

extension CrunchExerciseNameExt on CrunchExerciseName {
  int get value {
    switch (this) {
      case CrunchExerciseName.bicycleCrunch:
        return 0;
      case CrunchExerciseName.cableCrunch:
        return 1;
      case CrunchExerciseName.circularArmCrunch:
        return 2;
      case CrunchExerciseName.crossedArmsCrunch:
        return 3;
      case CrunchExerciseName.weightedCrossedArmsCrunch:
        return 4;
      case CrunchExerciseName.crossLegReverseCrunch:
        return 5;
      case CrunchExerciseName.weightedCrossLegReverseCrunch:
        return 6;
      case CrunchExerciseName.crunchChop:
        return 7;
      case CrunchExerciseName.weightedCrunchChop:
        return 8;
      case CrunchExerciseName.doubleCrunch:
        return 9;
      case CrunchExerciseName.weightedDoubleCrunch:
        return 10;
      case CrunchExerciseName.elbowToKneeCrunch:
        return 11;
      case CrunchExerciseName.weightedElbowToKneeCrunch:
        return 12;
      case CrunchExerciseName.flutterKicks:
        return 13;
      case CrunchExerciseName.weightedFlutterKicks:
        return 14;
      case CrunchExerciseName.foamRollerReverseCrunchOnBench:
        return 15;
      case CrunchExerciseName.weightedFoamRollerReverseCrunchOnBench:
        return 16;
      case CrunchExerciseName.foamRollerReverseCrunchWithDumbbell:
        return 17;
      case CrunchExerciseName.foamRollerReverseCrunchWithMedicineBall:
        return 18;
      case CrunchExerciseName.frogPress:
        return 19;
      case CrunchExerciseName.hangingKneeRaiseObliqueCrunch:
        return 20;
      case CrunchExerciseName.weightedHangingKneeRaiseObliqueCrunch:
        return 21;
      case CrunchExerciseName.hipCrossover:
        return 22;
      case CrunchExerciseName.weightedHipCrossover:
        return 23;
      case CrunchExerciseName.hollowRock:
        return 24;
      case CrunchExerciseName.weightedHollowRock:
        return 25;
      case CrunchExerciseName.inclineReverseCrunch:
        return 26;
      case CrunchExerciseName.weightedInclineReverseCrunch:
        return 27;
      case CrunchExerciseName.kneelingCableCrunch:
        return 28;
      case CrunchExerciseName.kneelingCrossCrunch:
        return 29;
      case CrunchExerciseName.weightedKneelingCrossCrunch:
        return 30;
      case CrunchExerciseName.kneelingObliqueCableCrunch:
        return 31;
      case CrunchExerciseName.kneesToElbow:
        return 32;
      case CrunchExerciseName.legExtensions:
        return 33;
      case CrunchExerciseName.weightedLegExtensions:
        return 34;
      case CrunchExerciseName.legLevers:
        return 35;
      case CrunchExerciseName.mcgillCurlUp:
        return 36;
      case CrunchExerciseName.weightedMcgillCurlUp:
        return 37;
      case CrunchExerciseName.modifiedPilatesRollUpWithBall:
        return 38;
      case CrunchExerciseName.weightedModifiedPilatesRollUpWithBall:
        return 39;
      case CrunchExerciseName.pilatesCrunch:
        return 40;
      case CrunchExerciseName.weightedPilatesCrunch:
        return 41;
      case CrunchExerciseName.pilatesRollUpWithBall:
        return 42;
      case CrunchExerciseName.weightedPilatesRollUpWithBall:
        return 43;
      case CrunchExerciseName.raisedLegsCrunch:
        return 44;
      case CrunchExerciseName.weightedRaisedLegsCrunch:
        return 45;
      case CrunchExerciseName.reverseCrunch:
        return 46;
      case CrunchExerciseName.weightedReverseCrunch:
        return 47;
      case CrunchExerciseName.reverseCrunchOnABench:
        return 48;
      case CrunchExerciseName.weightedReverseCrunchOnABench:
        return 49;
      case CrunchExerciseName.reverseCurlAndLift:
        return 50;
      case CrunchExerciseName.weightedReverseCurlAndLift:
        return 51;
      case CrunchExerciseName.rotationalLift:
        return 52;
      case CrunchExerciseName.weightedRotationalLift:
        return 53;
      case CrunchExerciseName.seatedAlternatingReverseCrunch:
        return 54;
      case CrunchExerciseName.weightedSeatedAlternatingReverseCrunch:
        return 55;
      case CrunchExerciseName.seatedLegU:
        return 56;
      case CrunchExerciseName.weightedSeatedLegU:
        return 57;
      case CrunchExerciseName.sideToSideCrunchAndWeave:
        return 58;
      case CrunchExerciseName.weightedSideToSideCrunchAndWeave:
        return 59;
      case CrunchExerciseName.singleLegReverseCrunch:
        return 60;
      case CrunchExerciseName.weightedSingleLegReverseCrunch:
        return 61;
      case CrunchExerciseName.skaterCrunchCross:
        return 62;
      case CrunchExerciseName.weightedSkaterCrunchCross:
        return 63;
      case CrunchExerciseName.standingCableCrunch:
        return 64;
      case CrunchExerciseName.standingSideCrunch:
        return 65;
      case CrunchExerciseName.stepClimb:
        return 66;
      case CrunchExerciseName.weightedStepClimb:
        return 67;
      case CrunchExerciseName.swissBallCrunch:
        return 68;
      case CrunchExerciseName.swissBallReverseCrunch:
        return 69;
      case CrunchExerciseName.weightedSwissBallReverseCrunch:
        return 70;
      case CrunchExerciseName.swissBallRussianTwist:
        return 71;
      case CrunchExerciseName.weightedSwissBallRussianTwist:
        return 72;
      case CrunchExerciseName.swissBallSideCrunch:
        return 73;
      case CrunchExerciseName.weightedSwissBallSideCrunch:
        return 74;
      case CrunchExerciseName.thoracicCrunchesOnFoamRoller:
        return 75;
      case CrunchExerciseName.weightedThoracicCrunchesOnFoamRoller:
        return 76;
      case CrunchExerciseName.tricepsCrunch:
        return 77;
      case CrunchExerciseName.weightedBicycleCrunch:
        return 78;
      case CrunchExerciseName.weightedCrunch:
        return 79;
      case CrunchExerciseName.weightedSwissBallCrunch:
        return 80;
      case CrunchExerciseName.toesToBar:
        return 81;
      case CrunchExerciseName.weightedToesToBar:
        return 82;
      case CrunchExerciseName.crunch:
        return 83;
      case CrunchExerciseName.straightLegCrunchWithBall:
        return 84;
    }
  }

  static CrunchExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return CrunchExerciseName.bicycleCrunch;
      case 1:
        return CrunchExerciseName.cableCrunch;
      case 2:
        return CrunchExerciseName.circularArmCrunch;
      case 3:
        return CrunchExerciseName.crossedArmsCrunch;
      case 4:
        return CrunchExerciseName.weightedCrossedArmsCrunch;
      case 5:
        return CrunchExerciseName.crossLegReverseCrunch;
      case 6:
        return CrunchExerciseName.weightedCrossLegReverseCrunch;
      case 7:
        return CrunchExerciseName.crunchChop;
      case 8:
        return CrunchExerciseName.weightedCrunchChop;
      case 9:
        return CrunchExerciseName.doubleCrunch;
      case 10:
        return CrunchExerciseName.weightedDoubleCrunch;
      case 11:
        return CrunchExerciseName.elbowToKneeCrunch;
      case 12:
        return CrunchExerciseName.weightedElbowToKneeCrunch;
      case 13:
        return CrunchExerciseName.flutterKicks;
      case 14:
        return CrunchExerciseName.weightedFlutterKicks;
      case 15:
        return CrunchExerciseName.foamRollerReverseCrunchOnBench;
      case 16:
        return CrunchExerciseName.weightedFoamRollerReverseCrunchOnBench;
      case 17:
        return CrunchExerciseName.foamRollerReverseCrunchWithDumbbell;
      case 18:
        return CrunchExerciseName.foamRollerReverseCrunchWithMedicineBall;
      case 19:
        return CrunchExerciseName.frogPress;
      case 20:
        return CrunchExerciseName.hangingKneeRaiseObliqueCrunch;
      case 21:
        return CrunchExerciseName.weightedHangingKneeRaiseObliqueCrunch;
      case 22:
        return CrunchExerciseName.hipCrossover;
      case 23:
        return CrunchExerciseName.weightedHipCrossover;
      case 24:
        return CrunchExerciseName.hollowRock;
      case 25:
        return CrunchExerciseName.weightedHollowRock;
      case 26:
        return CrunchExerciseName.inclineReverseCrunch;
      case 27:
        return CrunchExerciseName.weightedInclineReverseCrunch;
      case 28:
        return CrunchExerciseName.kneelingCableCrunch;
      case 29:
        return CrunchExerciseName.kneelingCrossCrunch;
      case 30:
        return CrunchExerciseName.weightedKneelingCrossCrunch;
      case 31:
        return CrunchExerciseName.kneelingObliqueCableCrunch;
      case 32:
        return CrunchExerciseName.kneesToElbow;
      case 33:
        return CrunchExerciseName.legExtensions;
      case 34:
        return CrunchExerciseName.weightedLegExtensions;
      case 35:
        return CrunchExerciseName.legLevers;
      case 36:
        return CrunchExerciseName.mcgillCurlUp;
      case 37:
        return CrunchExerciseName.weightedMcgillCurlUp;
      case 38:
        return CrunchExerciseName.modifiedPilatesRollUpWithBall;
      case 39:
        return CrunchExerciseName.weightedModifiedPilatesRollUpWithBall;
      case 40:
        return CrunchExerciseName.pilatesCrunch;
      case 41:
        return CrunchExerciseName.weightedPilatesCrunch;
      case 42:
        return CrunchExerciseName.pilatesRollUpWithBall;
      case 43:
        return CrunchExerciseName.weightedPilatesRollUpWithBall;
      case 44:
        return CrunchExerciseName.raisedLegsCrunch;
      case 45:
        return CrunchExerciseName.weightedRaisedLegsCrunch;
      case 46:
        return CrunchExerciseName.reverseCrunch;
      case 47:
        return CrunchExerciseName.weightedReverseCrunch;
      case 48:
        return CrunchExerciseName.reverseCrunchOnABench;
      case 49:
        return CrunchExerciseName.weightedReverseCrunchOnABench;
      case 50:
        return CrunchExerciseName.reverseCurlAndLift;
      case 51:
        return CrunchExerciseName.weightedReverseCurlAndLift;
      case 52:
        return CrunchExerciseName.rotationalLift;
      case 53:
        return CrunchExerciseName.weightedRotationalLift;
      case 54:
        return CrunchExerciseName.seatedAlternatingReverseCrunch;
      case 55:
        return CrunchExerciseName.weightedSeatedAlternatingReverseCrunch;
      case 56:
        return CrunchExerciseName.seatedLegU;
      case 57:
        return CrunchExerciseName.weightedSeatedLegU;
      case 58:
        return CrunchExerciseName.sideToSideCrunchAndWeave;
      case 59:
        return CrunchExerciseName.weightedSideToSideCrunchAndWeave;
      case 60:
        return CrunchExerciseName.singleLegReverseCrunch;
      case 61:
        return CrunchExerciseName.weightedSingleLegReverseCrunch;
      case 62:
        return CrunchExerciseName.skaterCrunchCross;
      case 63:
        return CrunchExerciseName.weightedSkaterCrunchCross;
      case 64:
        return CrunchExerciseName.standingCableCrunch;
      case 65:
        return CrunchExerciseName.standingSideCrunch;
      case 66:
        return CrunchExerciseName.stepClimb;
      case 67:
        return CrunchExerciseName.weightedStepClimb;
      case 68:
        return CrunchExerciseName.swissBallCrunch;
      case 69:
        return CrunchExerciseName.swissBallReverseCrunch;
      case 70:
        return CrunchExerciseName.weightedSwissBallReverseCrunch;
      case 71:
        return CrunchExerciseName.swissBallRussianTwist;
      case 72:
        return CrunchExerciseName.weightedSwissBallRussianTwist;
      case 73:
        return CrunchExerciseName.swissBallSideCrunch;
      case 74:
        return CrunchExerciseName.weightedSwissBallSideCrunch;
      case 75:
        return CrunchExerciseName.thoracicCrunchesOnFoamRoller;
      case 76:
        return CrunchExerciseName.weightedThoracicCrunchesOnFoamRoller;
      case 77:
        return CrunchExerciseName.tricepsCrunch;
      case 78:
        return CrunchExerciseName.weightedBicycleCrunch;
      case 79:
        return CrunchExerciseName.weightedCrunch;
      case 80:
        return CrunchExerciseName.weightedSwissBallCrunch;
      case 81:
        return CrunchExerciseName.toesToBar;
      case 82:
        return CrunchExerciseName.weightedToesToBar;
      case 83:
        return CrunchExerciseName.crunch;
      case 84:
        return CrunchExerciseName.straightLegCrunchWithBall;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum CurlExerciseName {
  alternatingDumbbellBicepsCurl,
  alternatingDumbbellBicepsCurlOnSwissBall,
  alternatingInclineDumbbellBicepsCurl,
  barbellBicepsCurl,
  barbellReverseWristCurl,
  barbellWristCurl,
  behindTheBackBarbellReverseWristCurl,
  behindTheBackOneArmCableCurl,
  cableBicepsCurl,
  cableHammerCurl,
  cheatingBarbellBicepsCurl,
  closeGripEzBarBicepsCurl,
  crossBodyDumbbellHammerCurl,
  deadHangBicepsCurl,
  declineHammerCurl,
  dumbbellBicepsCurlWithStaticHold,
  dumbbellHammerCurl,
  dumbbellReverseWristCurl,
  dumbbellWristCurl,
  ezBarPreacherCurl,
  forwardBendBicepsCurl,
  hammerCurlToPress,
  inclineDumbbellBicepsCurl,
  inclineOffsetThumbDumbbellCurl,
  kettlebellBicepsCurl,
  lyingConcentrationCableCurl,
  oneArmPreacherCurl,
  platePinchCurl,
  preacherCurlWithCable,
  reverseEzBarCurl,
  reverseGripWristCurl,
  reverseGripBarbellBicepsCurl,
  seatedAlternatingDumbbellBicepsCurl,
  seatedDumbbellBicepsCurl,
  seatedReverseDumbbellCurl,
  splitStanceOffsetPinkyDumbbellCurl,
  standingAlternatingDumbbellCurls,
  standingDumbbellBicepsCurl,
  standingEzBarBicepsCurl,
  staticCurl,
  swissBallDumbbellOverheadTricepsExtension,
  swissBallEzBarPreacherCurl,
  twistingStandingDumbbellBicepsCurl,
  wideGripEzBarBicepsCurl
}

extension CurlExerciseNameExt on CurlExerciseName {
  int get value {
    switch (this) {
      case CurlExerciseName.alternatingDumbbellBicepsCurl:
        return 0;
      case CurlExerciseName.alternatingDumbbellBicepsCurlOnSwissBall:
        return 1;
      case CurlExerciseName.alternatingInclineDumbbellBicepsCurl:
        return 2;
      case CurlExerciseName.barbellBicepsCurl:
        return 3;
      case CurlExerciseName.barbellReverseWristCurl:
        return 4;
      case CurlExerciseName.barbellWristCurl:
        return 5;
      case CurlExerciseName.behindTheBackBarbellReverseWristCurl:
        return 6;
      case CurlExerciseName.behindTheBackOneArmCableCurl:
        return 7;
      case CurlExerciseName.cableBicepsCurl:
        return 8;
      case CurlExerciseName.cableHammerCurl:
        return 9;
      case CurlExerciseName.cheatingBarbellBicepsCurl:
        return 10;
      case CurlExerciseName.closeGripEzBarBicepsCurl:
        return 11;
      case CurlExerciseName.crossBodyDumbbellHammerCurl:
        return 12;
      case CurlExerciseName.deadHangBicepsCurl:
        return 13;
      case CurlExerciseName.declineHammerCurl:
        return 14;
      case CurlExerciseName.dumbbellBicepsCurlWithStaticHold:
        return 15;
      case CurlExerciseName.dumbbellHammerCurl:
        return 16;
      case CurlExerciseName.dumbbellReverseWristCurl:
        return 17;
      case CurlExerciseName.dumbbellWristCurl:
        return 18;
      case CurlExerciseName.ezBarPreacherCurl:
        return 19;
      case CurlExerciseName.forwardBendBicepsCurl:
        return 20;
      case CurlExerciseName.hammerCurlToPress:
        return 21;
      case CurlExerciseName.inclineDumbbellBicepsCurl:
        return 22;
      case CurlExerciseName.inclineOffsetThumbDumbbellCurl:
        return 23;
      case CurlExerciseName.kettlebellBicepsCurl:
        return 24;
      case CurlExerciseName.lyingConcentrationCableCurl:
        return 25;
      case CurlExerciseName.oneArmPreacherCurl:
        return 26;
      case CurlExerciseName.platePinchCurl:
        return 27;
      case CurlExerciseName.preacherCurlWithCable:
        return 28;
      case CurlExerciseName.reverseEzBarCurl:
        return 29;
      case CurlExerciseName.reverseGripWristCurl:
        return 30;
      case CurlExerciseName.reverseGripBarbellBicepsCurl:
        return 31;
      case CurlExerciseName.seatedAlternatingDumbbellBicepsCurl:
        return 32;
      case CurlExerciseName.seatedDumbbellBicepsCurl:
        return 33;
      case CurlExerciseName.seatedReverseDumbbellCurl:
        return 34;
      case CurlExerciseName.splitStanceOffsetPinkyDumbbellCurl:
        return 35;
      case CurlExerciseName.standingAlternatingDumbbellCurls:
        return 36;
      case CurlExerciseName.standingDumbbellBicepsCurl:
        return 37;
      case CurlExerciseName.standingEzBarBicepsCurl:
        return 38;
      case CurlExerciseName.staticCurl:
        return 39;
      case CurlExerciseName.swissBallDumbbellOverheadTricepsExtension:
        return 40;
      case CurlExerciseName.swissBallEzBarPreacherCurl:
        return 41;
      case CurlExerciseName.twistingStandingDumbbellBicepsCurl:
        return 42;
      case CurlExerciseName.wideGripEzBarBicepsCurl:
        return 43;
    }
  }

  static CurlExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return CurlExerciseName.alternatingDumbbellBicepsCurl;
      case 1:
        return CurlExerciseName.alternatingDumbbellBicepsCurlOnSwissBall;
      case 2:
        return CurlExerciseName.alternatingInclineDumbbellBicepsCurl;
      case 3:
        return CurlExerciseName.barbellBicepsCurl;
      case 4:
        return CurlExerciseName.barbellReverseWristCurl;
      case 5:
        return CurlExerciseName.barbellWristCurl;
      case 6:
        return CurlExerciseName.behindTheBackBarbellReverseWristCurl;
      case 7:
        return CurlExerciseName.behindTheBackOneArmCableCurl;
      case 8:
        return CurlExerciseName.cableBicepsCurl;
      case 9:
        return CurlExerciseName.cableHammerCurl;
      case 10:
        return CurlExerciseName.cheatingBarbellBicepsCurl;
      case 11:
        return CurlExerciseName.closeGripEzBarBicepsCurl;
      case 12:
        return CurlExerciseName.crossBodyDumbbellHammerCurl;
      case 13:
        return CurlExerciseName.deadHangBicepsCurl;
      case 14:
        return CurlExerciseName.declineHammerCurl;
      case 15:
        return CurlExerciseName.dumbbellBicepsCurlWithStaticHold;
      case 16:
        return CurlExerciseName.dumbbellHammerCurl;
      case 17:
        return CurlExerciseName.dumbbellReverseWristCurl;
      case 18:
        return CurlExerciseName.dumbbellWristCurl;
      case 19:
        return CurlExerciseName.ezBarPreacherCurl;
      case 20:
        return CurlExerciseName.forwardBendBicepsCurl;
      case 21:
        return CurlExerciseName.hammerCurlToPress;
      case 22:
        return CurlExerciseName.inclineDumbbellBicepsCurl;
      case 23:
        return CurlExerciseName.inclineOffsetThumbDumbbellCurl;
      case 24:
        return CurlExerciseName.kettlebellBicepsCurl;
      case 25:
        return CurlExerciseName.lyingConcentrationCableCurl;
      case 26:
        return CurlExerciseName.oneArmPreacherCurl;
      case 27:
        return CurlExerciseName.platePinchCurl;
      case 28:
        return CurlExerciseName.preacherCurlWithCable;
      case 29:
        return CurlExerciseName.reverseEzBarCurl;
      case 30:
        return CurlExerciseName.reverseGripWristCurl;
      case 31:
        return CurlExerciseName.reverseGripBarbellBicepsCurl;
      case 32:
        return CurlExerciseName.seatedAlternatingDumbbellBicepsCurl;
      case 33:
        return CurlExerciseName.seatedDumbbellBicepsCurl;
      case 34:
        return CurlExerciseName.seatedReverseDumbbellCurl;
      case 35:
        return CurlExerciseName.splitStanceOffsetPinkyDumbbellCurl;
      case 36:
        return CurlExerciseName.standingAlternatingDumbbellCurls;
      case 37:
        return CurlExerciseName.standingDumbbellBicepsCurl;
      case 38:
        return CurlExerciseName.standingEzBarBicepsCurl;
      case 39:
        return CurlExerciseName.staticCurl;
      case 40:
        return CurlExerciseName.swissBallDumbbellOverheadTricepsExtension;
      case 41:
        return CurlExerciseName.swissBallEzBarPreacherCurl;
      case 42:
        return CurlExerciseName.twistingStandingDumbbellBicepsCurl;
      case 43:
        return CurlExerciseName.wideGripEzBarBicepsCurl;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DeadliftExerciseName {
  barbellDeadlift,
  barbellStraightLegDeadlift,
  dumbbellDeadlift,
  dumbbellSingleLegDeadliftToRow,
  dumbbellStraightLegDeadlift,
  kettlebellFloorToShelf,
  oneArmOneLegDeadlift,
  rackPull,
  rotationalDumbbellStraightLegDeadlift,
  singleArmDeadlift,
  singleLegBarbellDeadlift,
  singleLegBarbellStraightLegDeadlift,
  singleLegDeadliftWithBarbell,
  singleLegRdlCircuit,
  singleLegRomanianDeadliftWithDumbbell,
  sumoDeadlift,
  sumoDeadliftHighPull,
  trapBarDeadlift,
  wideGripBarbellDeadlift
}

extension DeadliftExerciseNameExt on DeadliftExerciseName {
  int get value {
    switch (this) {
      case DeadliftExerciseName.barbellDeadlift:
        return 0;
      case DeadliftExerciseName.barbellStraightLegDeadlift:
        return 1;
      case DeadliftExerciseName.dumbbellDeadlift:
        return 2;
      case DeadliftExerciseName.dumbbellSingleLegDeadliftToRow:
        return 3;
      case DeadliftExerciseName.dumbbellStraightLegDeadlift:
        return 4;
      case DeadliftExerciseName.kettlebellFloorToShelf:
        return 5;
      case DeadliftExerciseName.oneArmOneLegDeadlift:
        return 6;
      case DeadliftExerciseName.rackPull:
        return 7;
      case DeadliftExerciseName.rotationalDumbbellStraightLegDeadlift:
        return 8;
      case DeadliftExerciseName.singleArmDeadlift:
        return 9;
      case DeadliftExerciseName.singleLegBarbellDeadlift:
        return 10;
      case DeadliftExerciseName.singleLegBarbellStraightLegDeadlift:
        return 11;
      case DeadliftExerciseName.singleLegDeadliftWithBarbell:
        return 12;
      case DeadliftExerciseName.singleLegRdlCircuit:
        return 13;
      case DeadliftExerciseName.singleLegRomanianDeadliftWithDumbbell:
        return 14;
      case DeadliftExerciseName.sumoDeadlift:
        return 15;
      case DeadliftExerciseName.sumoDeadliftHighPull:
        return 16;
      case DeadliftExerciseName.trapBarDeadlift:
        return 17;
      case DeadliftExerciseName.wideGripBarbellDeadlift:
        return 18;
    }
  }

  static DeadliftExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return DeadliftExerciseName.barbellDeadlift;
      case 1:
        return DeadliftExerciseName.barbellStraightLegDeadlift;
      case 2:
        return DeadliftExerciseName.dumbbellDeadlift;
      case 3:
        return DeadliftExerciseName.dumbbellSingleLegDeadliftToRow;
      case 4:
        return DeadliftExerciseName.dumbbellStraightLegDeadlift;
      case 5:
        return DeadliftExerciseName.kettlebellFloorToShelf;
      case 6:
        return DeadliftExerciseName.oneArmOneLegDeadlift;
      case 7:
        return DeadliftExerciseName.rackPull;
      case 8:
        return DeadliftExerciseName.rotationalDumbbellStraightLegDeadlift;
      case 9:
        return DeadliftExerciseName.singleArmDeadlift;
      case 10:
        return DeadliftExerciseName.singleLegBarbellDeadlift;
      case 11:
        return DeadliftExerciseName.singleLegBarbellStraightLegDeadlift;
      case 12:
        return DeadliftExerciseName.singleLegDeadliftWithBarbell;
      case 13:
        return DeadliftExerciseName.singleLegRdlCircuit;
      case 14:
        return DeadliftExerciseName.singleLegRomanianDeadliftWithDumbbell;
      case 15:
        return DeadliftExerciseName.sumoDeadlift;
      case 16:
        return DeadliftExerciseName.sumoDeadliftHighPull;
      case 17:
        return DeadliftExerciseName.trapBarDeadlift;
      case 18:
        return DeadliftExerciseName.wideGripBarbellDeadlift;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum FlyeExerciseName {
  cableCrossover,
  declineDumbbellFlye,
  dumbbellFlye,
  inclineDumbbellFlye,
  kettlebellFlye,
  kneelingRearFlye,
  singleArmStandingCableReverseFlye,
  swissBallDumbbellFlye,
  armRotations,
  hugATree
}

extension FlyeExerciseNameExt on FlyeExerciseName {
  int get value {
    switch (this) {
      case FlyeExerciseName.cableCrossover:
        return 0;
      case FlyeExerciseName.declineDumbbellFlye:
        return 1;
      case FlyeExerciseName.dumbbellFlye:
        return 2;
      case FlyeExerciseName.inclineDumbbellFlye:
        return 3;
      case FlyeExerciseName.kettlebellFlye:
        return 4;
      case FlyeExerciseName.kneelingRearFlye:
        return 5;
      case FlyeExerciseName.singleArmStandingCableReverseFlye:
        return 6;
      case FlyeExerciseName.swissBallDumbbellFlye:
        return 7;
      case FlyeExerciseName.armRotations:
        return 8;
      case FlyeExerciseName.hugATree:
        return 9;
    }
  }

  static FlyeExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return FlyeExerciseName.cableCrossover;
      case 1:
        return FlyeExerciseName.declineDumbbellFlye;
      case 2:
        return FlyeExerciseName.dumbbellFlye;
      case 3:
        return FlyeExerciseName.inclineDumbbellFlye;
      case 4:
        return FlyeExerciseName.kettlebellFlye;
      case 5:
        return FlyeExerciseName.kneelingRearFlye;
      case 6:
        return FlyeExerciseName.singleArmStandingCableReverseFlye;
      case 7:
        return FlyeExerciseName.swissBallDumbbellFlye;
      case 8:
        return FlyeExerciseName.armRotations;
      case 9:
        return FlyeExerciseName.hugATree;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum HipRaiseExerciseName {
  barbellHipThrustOnFloor,
  barbellHipThrustWithBench,
  bentKneeSwissBallReverseHipRaise,
  weightedBentKneeSwissBallReverseHipRaise,
  bridgeWithLegExtension,
  weightedBridgeWithLegExtension,
  clamBridge,
  frontKickTabletop,
  weightedFrontKickTabletop,
  hipExtensionAndCross,
  weightedHipExtensionAndCross,
  hipRaise,
  weightedHipRaise,
  hipRaiseWithFeetOnSwissBall,
  weightedHipRaiseWithFeetOnSwissBall,
  hipRaiseWithHeadOnBosuBall,
  weightedHipRaiseWithHeadOnBosuBall,
  hipRaiseWithHeadOnSwissBall,
  weightedHipRaiseWithHeadOnSwissBall,
  hipRaiseWithKneeSqueeze,
  weightedHipRaiseWithKneeSqueeze,
  inclineRearLegExtension,
  weightedInclineRearLegExtension,
  kettlebellSwing,
  marchingHipRaise,
  weightedMarchingHipRaise,
  marchingHipRaiseWithFeetOnASwissBall,
  weightedMarchingHipRaiseWithFeetOnASwissBall,
  reverseHipRaise,
  weightedReverseHipRaise,
  singleLegHipRaise,
  weightedSingleLegHipRaise,
  singleLegHipRaiseWithFootOnBench,
  weightedSingleLegHipRaiseWithFootOnBench,
  singleLegHipRaiseWithFootOnBosuBall,
  weightedSingleLegHipRaiseWithFootOnBosuBall,
  singleLegHipRaiseWithFootOnFoamRoller,
  weightedSingleLegHipRaiseWithFootOnFoamRoller,
  singleLegHipRaiseWithFootOnMedicineBall,
  weightedSingleLegHipRaiseWithFootOnMedicineBall,
  singleLegHipRaiseWithHeadOnBosuBall,
  weightedSingleLegHipRaiseWithHeadOnBosuBall,
  weightedClamBridge,
  singleLegSwissBallHipRaiseAndLegCurl,
  clams,
  innerThighCircles,
  innerThighSideLift,
  legCircles,
  legLift,
  legLiftInExternalRotation
}

extension HipRaiseExerciseNameExt on HipRaiseExerciseName {
  int get value {
    switch (this) {
      case HipRaiseExerciseName.barbellHipThrustOnFloor:
        return 0;
      case HipRaiseExerciseName.barbellHipThrustWithBench:
        return 1;
      case HipRaiseExerciseName.bentKneeSwissBallReverseHipRaise:
        return 2;
      case HipRaiseExerciseName.weightedBentKneeSwissBallReverseHipRaise:
        return 3;
      case HipRaiseExerciseName.bridgeWithLegExtension:
        return 4;
      case HipRaiseExerciseName.weightedBridgeWithLegExtension:
        return 5;
      case HipRaiseExerciseName.clamBridge:
        return 6;
      case HipRaiseExerciseName.frontKickTabletop:
        return 7;
      case HipRaiseExerciseName.weightedFrontKickTabletop:
        return 8;
      case HipRaiseExerciseName.hipExtensionAndCross:
        return 9;
      case HipRaiseExerciseName.weightedHipExtensionAndCross:
        return 10;
      case HipRaiseExerciseName.hipRaise:
        return 11;
      case HipRaiseExerciseName.weightedHipRaise:
        return 12;
      case HipRaiseExerciseName.hipRaiseWithFeetOnSwissBall:
        return 13;
      case HipRaiseExerciseName.weightedHipRaiseWithFeetOnSwissBall:
        return 14;
      case HipRaiseExerciseName.hipRaiseWithHeadOnBosuBall:
        return 15;
      case HipRaiseExerciseName.weightedHipRaiseWithHeadOnBosuBall:
        return 16;
      case HipRaiseExerciseName.hipRaiseWithHeadOnSwissBall:
        return 17;
      case HipRaiseExerciseName.weightedHipRaiseWithHeadOnSwissBall:
        return 18;
      case HipRaiseExerciseName.hipRaiseWithKneeSqueeze:
        return 19;
      case HipRaiseExerciseName.weightedHipRaiseWithKneeSqueeze:
        return 20;
      case HipRaiseExerciseName.inclineRearLegExtension:
        return 21;
      case HipRaiseExerciseName.weightedInclineRearLegExtension:
        return 22;
      case HipRaiseExerciseName.kettlebellSwing:
        return 23;
      case HipRaiseExerciseName.marchingHipRaise:
        return 24;
      case HipRaiseExerciseName.weightedMarchingHipRaise:
        return 25;
      case HipRaiseExerciseName.marchingHipRaiseWithFeetOnASwissBall:
        return 26;
      case HipRaiseExerciseName.weightedMarchingHipRaiseWithFeetOnASwissBall:
        return 27;
      case HipRaiseExerciseName.reverseHipRaise:
        return 28;
      case HipRaiseExerciseName.weightedReverseHipRaise:
        return 29;
      case HipRaiseExerciseName.singleLegHipRaise:
        return 30;
      case HipRaiseExerciseName.weightedSingleLegHipRaise:
        return 31;
      case HipRaiseExerciseName.singleLegHipRaiseWithFootOnBench:
        return 32;
      case HipRaiseExerciseName.weightedSingleLegHipRaiseWithFootOnBench:
        return 33;
      case HipRaiseExerciseName.singleLegHipRaiseWithFootOnBosuBall:
        return 34;
      case HipRaiseExerciseName.weightedSingleLegHipRaiseWithFootOnBosuBall:
        return 35;
      case HipRaiseExerciseName.singleLegHipRaiseWithFootOnFoamRoller:
        return 36;
      case HipRaiseExerciseName.weightedSingleLegHipRaiseWithFootOnFoamRoller:
        return 37;
      case HipRaiseExerciseName.singleLegHipRaiseWithFootOnMedicineBall:
        return 38;
      case HipRaiseExerciseName.weightedSingleLegHipRaiseWithFootOnMedicineBall:
        return 39;
      case HipRaiseExerciseName.singleLegHipRaiseWithHeadOnBosuBall:
        return 40;
      case HipRaiseExerciseName.weightedSingleLegHipRaiseWithHeadOnBosuBall:
        return 41;
      case HipRaiseExerciseName.weightedClamBridge:
        return 42;
      case HipRaiseExerciseName.singleLegSwissBallHipRaiseAndLegCurl:
        return 43;
      case HipRaiseExerciseName.clams:
        return 44;
      case HipRaiseExerciseName.innerThighCircles:
        return 45;
      case HipRaiseExerciseName.innerThighSideLift:
        return 46;
      case HipRaiseExerciseName.legCircles:
        return 47;
      case HipRaiseExerciseName.legLift:
        return 48;
      case HipRaiseExerciseName.legLiftInExternalRotation:
        return 49;
    }
  }

  static HipRaiseExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return HipRaiseExerciseName.barbellHipThrustOnFloor;
      case 1:
        return HipRaiseExerciseName.barbellHipThrustWithBench;
      case 2:
        return HipRaiseExerciseName.bentKneeSwissBallReverseHipRaise;
      case 3:
        return HipRaiseExerciseName.weightedBentKneeSwissBallReverseHipRaise;
      case 4:
        return HipRaiseExerciseName.bridgeWithLegExtension;
      case 5:
        return HipRaiseExerciseName.weightedBridgeWithLegExtension;
      case 6:
        return HipRaiseExerciseName.clamBridge;
      case 7:
        return HipRaiseExerciseName.frontKickTabletop;
      case 8:
        return HipRaiseExerciseName.weightedFrontKickTabletop;
      case 9:
        return HipRaiseExerciseName.hipExtensionAndCross;
      case 10:
        return HipRaiseExerciseName.weightedHipExtensionAndCross;
      case 11:
        return HipRaiseExerciseName.hipRaise;
      case 12:
        return HipRaiseExerciseName.weightedHipRaise;
      case 13:
        return HipRaiseExerciseName.hipRaiseWithFeetOnSwissBall;
      case 14:
        return HipRaiseExerciseName.weightedHipRaiseWithFeetOnSwissBall;
      case 15:
        return HipRaiseExerciseName.hipRaiseWithHeadOnBosuBall;
      case 16:
        return HipRaiseExerciseName.weightedHipRaiseWithHeadOnBosuBall;
      case 17:
        return HipRaiseExerciseName.hipRaiseWithHeadOnSwissBall;
      case 18:
        return HipRaiseExerciseName.weightedHipRaiseWithHeadOnSwissBall;
      case 19:
        return HipRaiseExerciseName.hipRaiseWithKneeSqueeze;
      case 20:
        return HipRaiseExerciseName.weightedHipRaiseWithKneeSqueeze;
      case 21:
        return HipRaiseExerciseName.inclineRearLegExtension;
      case 22:
        return HipRaiseExerciseName.weightedInclineRearLegExtension;
      case 23:
        return HipRaiseExerciseName.kettlebellSwing;
      case 24:
        return HipRaiseExerciseName.marchingHipRaise;
      case 25:
        return HipRaiseExerciseName.weightedMarchingHipRaise;
      case 26:
        return HipRaiseExerciseName.marchingHipRaiseWithFeetOnASwissBall;
      case 27:
        return HipRaiseExerciseName
            .weightedMarchingHipRaiseWithFeetOnASwissBall;
      case 28:
        return HipRaiseExerciseName.reverseHipRaise;
      case 29:
        return HipRaiseExerciseName.weightedReverseHipRaise;
      case 30:
        return HipRaiseExerciseName.singleLegHipRaise;
      case 31:
        return HipRaiseExerciseName.weightedSingleLegHipRaise;
      case 32:
        return HipRaiseExerciseName.singleLegHipRaiseWithFootOnBench;
      case 33:
        return HipRaiseExerciseName.weightedSingleLegHipRaiseWithFootOnBench;
      case 34:
        return HipRaiseExerciseName.singleLegHipRaiseWithFootOnBosuBall;
      case 35:
        return HipRaiseExerciseName.weightedSingleLegHipRaiseWithFootOnBosuBall;
      case 36:
        return HipRaiseExerciseName.singleLegHipRaiseWithFootOnFoamRoller;
      case 37:
        return HipRaiseExerciseName
            .weightedSingleLegHipRaiseWithFootOnFoamRoller;
      case 38:
        return HipRaiseExerciseName.singleLegHipRaiseWithFootOnMedicineBall;
      case 39:
        return HipRaiseExerciseName
            .weightedSingleLegHipRaiseWithFootOnMedicineBall;
      case 40:
        return HipRaiseExerciseName.singleLegHipRaiseWithHeadOnBosuBall;
      case 41:
        return HipRaiseExerciseName.weightedSingleLegHipRaiseWithHeadOnBosuBall;
      case 42:
        return HipRaiseExerciseName.weightedClamBridge;
      case 43:
        return HipRaiseExerciseName.singleLegSwissBallHipRaiseAndLegCurl;
      case 44:
        return HipRaiseExerciseName.clams;
      case 45:
        return HipRaiseExerciseName.innerThighCircles;
      case 46:
        return HipRaiseExerciseName.innerThighSideLift;
      case 47:
        return HipRaiseExerciseName.legCircles;
      case 48:
        return HipRaiseExerciseName.legLift;
      case 49:
        return HipRaiseExerciseName.legLiftInExternalRotation;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum HipStabilityExerciseName {
  bandSideLyingLegRaise,
  deadBug,
  weightedDeadBug,
  externalHipRaise,
  weightedExternalHipRaise,
  fireHydrantKicks,
  weightedFireHydrantKicks,
  hipCircles,
  weightedHipCircles,
  innerThighLift,
  weightedInnerThighLift,
  lateralWalksWithBandAtAnkles,
  pretzelSideKick,
  weightedPretzelSideKick,
  proneHipInternalRotation,
  weightedProneHipInternalRotation,
  quadruped,
  quadrupedHipExtension,
  weightedQuadrupedHipExtension,
  quadrupedWithLegLift,
  weightedQuadrupedWithLegLift,
  sideLyingLegRaise,
  weightedSideLyingLegRaise,
  slidingHipAdduction,
  weightedSlidingHipAdduction,
  standingAdduction,
  weightedStandingAdduction,
  standingCableHipAbduction,
  standingHipAbduction,
  weightedStandingHipAbduction,
  standingRearLegRaise,
  weightedStandingRearLegRaise,
  supineHipInternalRotation,
  weightedSupineHipInternalRotation
}

extension HipStabilityExerciseNameExt on HipStabilityExerciseName {
  int get value {
    switch (this) {
      case HipStabilityExerciseName.bandSideLyingLegRaise:
        return 0;
      case HipStabilityExerciseName.deadBug:
        return 1;
      case HipStabilityExerciseName.weightedDeadBug:
        return 2;
      case HipStabilityExerciseName.externalHipRaise:
        return 3;
      case HipStabilityExerciseName.weightedExternalHipRaise:
        return 4;
      case HipStabilityExerciseName.fireHydrantKicks:
        return 5;
      case HipStabilityExerciseName.weightedFireHydrantKicks:
        return 6;
      case HipStabilityExerciseName.hipCircles:
        return 7;
      case HipStabilityExerciseName.weightedHipCircles:
        return 8;
      case HipStabilityExerciseName.innerThighLift:
        return 9;
      case HipStabilityExerciseName.weightedInnerThighLift:
        return 10;
      case HipStabilityExerciseName.lateralWalksWithBandAtAnkles:
        return 11;
      case HipStabilityExerciseName.pretzelSideKick:
        return 12;
      case HipStabilityExerciseName.weightedPretzelSideKick:
        return 13;
      case HipStabilityExerciseName.proneHipInternalRotation:
        return 14;
      case HipStabilityExerciseName.weightedProneHipInternalRotation:
        return 15;
      case HipStabilityExerciseName.quadruped:
        return 16;
      case HipStabilityExerciseName.quadrupedHipExtension:
        return 17;
      case HipStabilityExerciseName.weightedQuadrupedHipExtension:
        return 18;
      case HipStabilityExerciseName.quadrupedWithLegLift:
        return 19;
      case HipStabilityExerciseName.weightedQuadrupedWithLegLift:
        return 20;
      case HipStabilityExerciseName.sideLyingLegRaise:
        return 21;
      case HipStabilityExerciseName.weightedSideLyingLegRaise:
        return 22;
      case HipStabilityExerciseName.slidingHipAdduction:
        return 23;
      case HipStabilityExerciseName.weightedSlidingHipAdduction:
        return 24;
      case HipStabilityExerciseName.standingAdduction:
        return 25;
      case HipStabilityExerciseName.weightedStandingAdduction:
        return 26;
      case HipStabilityExerciseName.standingCableHipAbduction:
        return 27;
      case HipStabilityExerciseName.standingHipAbduction:
        return 28;
      case HipStabilityExerciseName.weightedStandingHipAbduction:
        return 29;
      case HipStabilityExerciseName.standingRearLegRaise:
        return 30;
      case HipStabilityExerciseName.weightedStandingRearLegRaise:
        return 31;
      case HipStabilityExerciseName.supineHipInternalRotation:
        return 32;
      case HipStabilityExerciseName.weightedSupineHipInternalRotation:
        return 33;
    }
  }

  static HipStabilityExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return HipStabilityExerciseName.bandSideLyingLegRaise;
      case 1:
        return HipStabilityExerciseName.deadBug;
      case 2:
        return HipStabilityExerciseName.weightedDeadBug;
      case 3:
        return HipStabilityExerciseName.externalHipRaise;
      case 4:
        return HipStabilityExerciseName.weightedExternalHipRaise;
      case 5:
        return HipStabilityExerciseName.fireHydrantKicks;
      case 6:
        return HipStabilityExerciseName.weightedFireHydrantKicks;
      case 7:
        return HipStabilityExerciseName.hipCircles;
      case 8:
        return HipStabilityExerciseName.weightedHipCircles;
      case 9:
        return HipStabilityExerciseName.innerThighLift;
      case 10:
        return HipStabilityExerciseName.weightedInnerThighLift;
      case 11:
        return HipStabilityExerciseName.lateralWalksWithBandAtAnkles;
      case 12:
        return HipStabilityExerciseName.pretzelSideKick;
      case 13:
        return HipStabilityExerciseName.weightedPretzelSideKick;
      case 14:
        return HipStabilityExerciseName.proneHipInternalRotation;
      case 15:
        return HipStabilityExerciseName.weightedProneHipInternalRotation;
      case 16:
        return HipStabilityExerciseName.quadruped;
      case 17:
        return HipStabilityExerciseName.quadrupedHipExtension;
      case 18:
        return HipStabilityExerciseName.weightedQuadrupedHipExtension;
      case 19:
        return HipStabilityExerciseName.quadrupedWithLegLift;
      case 20:
        return HipStabilityExerciseName.weightedQuadrupedWithLegLift;
      case 21:
        return HipStabilityExerciseName.sideLyingLegRaise;
      case 22:
        return HipStabilityExerciseName.weightedSideLyingLegRaise;
      case 23:
        return HipStabilityExerciseName.slidingHipAdduction;
      case 24:
        return HipStabilityExerciseName.weightedSlidingHipAdduction;
      case 25:
        return HipStabilityExerciseName.standingAdduction;
      case 26:
        return HipStabilityExerciseName.weightedStandingAdduction;
      case 27:
        return HipStabilityExerciseName.standingCableHipAbduction;
      case 28:
        return HipStabilityExerciseName.standingHipAbduction;
      case 29:
        return HipStabilityExerciseName.weightedStandingHipAbduction;
      case 30:
        return HipStabilityExerciseName.standingRearLegRaise;
      case 31:
        return HipStabilityExerciseName.weightedStandingRearLegRaise;
      case 32:
        return HipStabilityExerciseName.supineHipInternalRotation;
      case 33:
        return HipStabilityExerciseName.weightedSupineHipInternalRotation;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum HipSwingExerciseName {
  singleArmKettlebellSwing,
  singleArmDumbbellSwing,
  stepOutSwing
}

extension HipSwingExerciseNameExt on HipSwingExerciseName {
  int get value {
    switch (this) {
      case HipSwingExerciseName.singleArmKettlebellSwing:
        return 0;
      case HipSwingExerciseName.singleArmDumbbellSwing:
        return 1;
      case HipSwingExerciseName.stepOutSwing:
        return 2;
    }
  }

  static HipSwingExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return HipSwingExerciseName.singleArmKettlebellSwing;
      case 1:
        return HipSwingExerciseName.singleArmDumbbellSwing;
      case 2:
        return HipSwingExerciseName.stepOutSwing;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum HyperextensionExerciseName {
  backExtensionWithOppositeArmAndLegReach,
  weightedBackExtensionWithOppositeArmAndLegReach,
  baseRotations,
  weightedBaseRotations,
  bentKneeReverseHyperextension,
  weightedBentKneeReverseHyperextension,
  hollowHoldAndRoll,
  weightedHollowHoldAndRoll,
  kicks,
  weightedKicks,
  kneeRaises,
  weightedKneeRaises,
  kneelingSuperman,
  weightedKneelingSuperman,
  latPullDownWithRow,
  medicineBallDeadliftToReach,
  oneArmOneLegRow,
  oneArmRowWithBand,
  overheadLungeWithMedicineBall,
  plankKneeTucks,
  weightedPlankKneeTucks,
  sideStep,
  weightedSideStep,
  singleLegBackExtension,
  weightedSingleLegBackExtension,
  spineExtension,
  weightedSpineExtension,
  staticBackExtension,
  weightedStaticBackExtension,
  supermanFromFloor,
  weightedSupermanFromFloor,
  swissBallBackExtension,
  weightedSwissBallBackExtension,
  swissBallHyperextension,
  weightedSwissBallHyperextension,
  swissBallOppositeArmAndLegLift,
  weightedSwissBallOppositeArmAndLegLift,
  supermanOnSwissBall,
  cobra,
  supineFloorBarre
}

extension HyperextensionExerciseNameExt on HyperextensionExerciseName {
  int get value {
    switch (this) {
      case HyperextensionExerciseName.backExtensionWithOppositeArmAndLegReach:
        return 0;
      case HyperextensionExerciseName
          .weightedBackExtensionWithOppositeArmAndLegReach:
        return 1;
      case HyperextensionExerciseName.baseRotations:
        return 2;
      case HyperextensionExerciseName.weightedBaseRotations:
        return 3;
      case HyperextensionExerciseName.bentKneeReverseHyperextension:
        return 4;
      case HyperextensionExerciseName.weightedBentKneeReverseHyperextension:
        return 5;
      case HyperextensionExerciseName.hollowHoldAndRoll:
        return 6;
      case HyperextensionExerciseName.weightedHollowHoldAndRoll:
        return 7;
      case HyperextensionExerciseName.kicks:
        return 8;
      case HyperextensionExerciseName.weightedKicks:
        return 9;
      case HyperextensionExerciseName.kneeRaises:
        return 10;
      case HyperextensionExerciseName.weightedKneeRaises:
        return 11;
      case HyperextensionExerciseName.kneelingSuperman:
        return 12;
      case HyperextensionExerciseName.weightedKneelingSuperman:
        return 13;
      case HyperextensionExerciseName.latPullDownWithRow:
        return 14;
      case HyperextensionExerciseName.medicineBallDeadliftToReach:
        return 15;
      case HyperextensionExerciseName.oneArmOneLegRow:
        return 16;
      case HyperextensionExerciseName.oneArmRowWithBand:
        return 17;
      case HyperextensionExerciseName.overheadLungeWithMedicineBall:
        return 18;
      case HyperextensionExerciseName.plankKneeTucks:
        return 19;
      case HyperextensionExerciseName.weightedPlankKneeTucks:
        return 20;
      case HyperextensionExerciseName.sideStep:
        return 21;
      case HyperextensionExerciseName.weightedSideStep:
        return 22;
      case HyperextensionExerciseName.singleLegBackExtension:
        return 23;
      case HyperextensionExerciseName.weightedSingleLegBackExtension:
        return 24;
      case HyperextensionExerciseName.spineExtension:
        return 25;
      case HyperextensionExerciseName.weightedSpineExtension:
        return 26;
      case HyperextensionExerciseName.staticBackExtension:
        return 27;
      case HyperextensionExerciseName.weightedStaticBackExtension:
        return 28;
      case HyperextensionExerciseName.supermanFromFloor:
        return 29;
      case HyperextensionExerciseName.weightedSupermanFromFloor:
        return 30;
      case HyperextensionExerciseName.swissBallBackExtension:
        return 31;
      case HyperextensionExerciseName.weightedSwissBallBackExtension:
        return 32;
      case HyperextensionExerciseName.swissBallHyperextension:
        return 33;
      case HyperextensionExerciseName.weightedSwissBallHyperextension:
        return 34;
      case HyperextensionExerciseName.swissBallOppositeArmAndLegLift:
        return 35;
      case HyperextensionExerciseName.weightedSwissBallOppositeArmAndLegLift:
        return 36;
      case HyperextensionExerciseName.supermanOnSwissBall:
        return 37;
      case HyperextensionExerciseName.cobra:
        return 38;
      case HyperextensionExerciseName.supineFloorBarre:
        return 39;
    }
  }

  static HyperextensionExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return HyperextensionExerciseName
            .backExtensionWithOppositeArmAndLegReach;
      case 1:
        return HyperextensionExerciseName
            .weightedBackExtensionWithOppositeArmAndLegReach;
      case 2:
        return HyperextensionExerciseName.baseRotations;
      case 3:
        return HyperextensionExerciseName.weightedBaseRotations;
      case 4:
        return HyperextensionExerciseName.bentKneeReverseHyperextension;
      case 5:
        return HyperextensionExerciseName.weightedBentKneeReverseHyperextension;
      case 6:
        return HyperextensionExerciseName.hollowHoldAndRoll;
      case 7:
        return HyperextensionExerciseName.weightedHollowHoldAndRoll;
      case 8:
        return HyperextensionExerciseName.kicks;
      case 9:
        return HyperextensionExerciseName.weightedKicks;
      case 10:
        return HyperextensionExerciseName.kneeRaises;
      case 11:
        return HyperextensionExerciseName.weightedKneeRaises;
      case 12:
        return HyperextensionExerciseName.kneelingSuperman;
      case 13:
        return HyperextensionExerciseName.weightedKneelingSuperman;
      case 14:
        return HyperextensionExerciseName.latPullDownWithRow;
      case 15:
        return HyperextensionExerciseName.medicineBallDeadliftToReach;
      case 16:
        return HyperextensionExerciseName.oneArmOneLegRow;
      case 17:
        return HyperextensionExerciseName.oneArmRowWithBand;
      case 18:
        return HyperextensionExerciseName.overheadLungeWithMedicineBall;
      case 19:
        return HyperextensionExerciseName.plankKneeTucks;
      case 20:
        return HyperextensionExerciseName.weightedPlankKneeTucks;
      case 21:
        return HyperextensionExerciseName.sideStep;
      case 22:
        return HyperextensionExerciseName.weightedSideStep;
      case 23:
        return HyperextensionExerciseName.singleLegBackExtension;
      case 24:
        return HyperextensionExerciseName.weightedSingleLegBackExtension;
      case 25:
        return HyperextensionExerciseName.spineExtension;
      case 26:
        return HyperextensionExerciseName.weightedSpineExtension;
      case 27:
        return HyperextensionExerciseName.staticBackExtension;
      case 28:
        return HyperextensionExerciseName.weightedStaticBackExtension;
      case 29:
        return HyperextensionExerciseName.supermanFromFloor;
      case 30:
        return HyperextensionExerciseName.weightedSupermanFromFloor;
      case 31:
        return HyperextensionExerciseName.swissBallBackExtension;
      case 32:
        return HyperextensionExerciseName.weightedSwissBallBackExtension;
      case 33:
        return HyperextensionExerciseName.swissBallHyperextension;
      case 34:
        return HyperextensionExerciseName.weightedSwissBallHyperextension;
      case 35:
        return HyperextensionExerciseName.swissBallOppositeArmAndLegLift;
      case 36:
        return HyperextensionExerciseName
            .weightedSwissBallOppositeArmAndLegLift;
      case 37:
        return HyperextensionExerciseName.supermanOnSwissBall;
      case 38:
        return HyperextensionExerciseName.cobra;
      case 39:
        return HyperextensionExerciseName.supineFloorBarre;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LateralRaiseExerciseName {
  n45DegreeCableExternalRotation,
  alternatingLateralRaiseWithStaticHold,
  barMuscleUp,
  bentOverLateralRaise,
  cableDiagonalRaise,
  cableFrontRaise,
  calorieRow,
  comboShoulderRaise,
  dumbbellDiagonalRaise,
  dumbbellVRaise,
  frontRaise,
  leaningDumbbellLateralRaise,
  lyingDumbbellRaise,
  muscleUp,
  oneArmCableLateralRaise,
  overhandGripRearLateralRaise,
  plateRaises,
  ringDip,
  weightedRingDip,
  ringMuscleUp,
  weightedRingMuscleUp,
  ropeClimb,
  weightedRopeClimb,
  scaption,
  seatedLateralRaise,
  seatedRearLateralRaise,
  sideLyingLateralRaise,
  standingLift,
  suspendedRow,
  underhandGripRearLateralRaise,
  wallSlide,
  weightedWallSlide,
  armCircles,
  shavingTheHead
}

extension LateralRaiseExerciseNameExt on LateralRaiseExerciseName {
  int get value {
    switch (this) {
      case LateralRaiseExerciseName.n45DegreeCableExternalRotation:
        return 0;
      case LateralRaiseExerciseName.alternatingLateralRaiseWithStaticHold:
        return 1;
      case LateralRaiseExerciseName.barMuscleUp:
        return 2;
      case LateralRaiseExerciseName.bentOverLateralRaise:
        return 3;
      case LateralRaiseExerciseName.cableDiagonalRaise:
        return 4;
      case LateralRaiseExerciseName.cableFrontRaise:
        return 5;
      case LateralRaiseExerciseName.calorieRow:
        return 6;
      case LateralRaiseExerciseName.comboShoulderRaise:
        return 7;
      case LateralRaiseExerciseName.dumbbellDiagonalRaise:
        return 8;
      case LateralRaiseExerciseName.dumbbellVRaise:
        return 9;
      case LateralRaiseExerciseName.frontRaise:
        return 10;
      case LateralRaiseExerciseName.leaningDumbbellLateralRaise:
        return 11;
      case LateralRaiseExerciseName.lyingDumbbellRaise:
        return 12;
      case LateralRaiseExerciseName.muscleUp:
        return 13;
      case LateralRaiseExerciseName.oneArmCableLateralRaise:
        return 14;
      case LateralRaiseExerciseName.overhandGripRearLateralRaise:
        return 15;
      case LateralRaiseExerciseName.plateRaises:
        return 16;
      case LateralRaiseExerciseName.ringDip:
        return 17;
      case LateralRaiseExerciseName.weightedRingDip:
        return 18;
      case LateralRaiseExerciseName.ringMuscleUp:
        return 19;
      case LateralRaiseExerciseName.weightedRingMuscleUp:
        return 20;
      case LateralRaiseExerciseName.ropeClimb:
        return 21;
      case LateralRaiseExerciseName.weightedRopeClimb:
        return 22;
      case LateralRaiseExerciseName.scaption:
        return 23;
      case LateralRaiseExerciseName.seatedLateralRaise:
        return 24;
      case LateralRaiseExerciseName.seatedRearLateralRaise:
        return 25;
      case LateralRaiseExerciseName.sideLyingLateralRaise:
        return 26;
      case LateralRaiseExerciseName.standingLift:
        return 27;
      case LateralRaiseExerciseName.suspendedRow:
        return 28;
      case LateralRaiseExerciseName.underhandGripRearLateralRaise:
        return 29;
      case LateralRaiseExerciseName.wallSlide:
        return 30;
      case LateralRaiseExerciseName.weightedWallSlide:
        return 31;
      case LateralRaiseExerciseName.armCircles:
        return 32;
      case LateralRaiseExerciseName.shavingTheHead:
        return 33;
    }
  }

  static LateralRaiseExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return LateralRaiseExerciseName.n45DegreeCableExternalRotation;
      case 1:
        return LateralRaiseExerciseName.alternatingLateralRaiseWithStaticHold;
      case 2:
        return LateralRaiseExerciseName.barMuscleUp;
      case 3:
        return LateralRaiseExerciseName.bentOverLateralRaise;
      case 4:
        return LateralRaiseExerciseName.cableDiagonalRaise;
      case 5:
        return LateralRaiseExerciseName.cableFrontRaise;
      case 6:
        return LateralRaiseExerciseName.calorieRow;
      case 7:
        return LateralRaiseExerciseName.comboShoulderRaise;
      case 8:
        return LateralRaiseExerciseName.dumbbellDiagonalRaise;
      case 9:
        return LateralRaiseExerciseName.dumbbellVRaise;
      case 10:
        return LateralRaiseExerciseName.frontRaise;
      case 11:
        return LateralRaiseExerciseName.leaningDumbbellLateralRaise;
      case 12:
        return LateralRaiseExerciseName.lyingDumbbellRaise;
      case 13:
        return LateralRaiseExerciseName.muscleUp;
      case 14:
        return LateralRaiseExerciseName.oneArmCableLateralRaise;
      case 15:
        return LateralRaiseExerciseName.overhandGripRearLateralRaise;
      case 16:
        return LateralRaiseExerciseName.plateRaises;
      case 17:
        return LateralRaiseExerciseName.ringDip;
      case 18:
        return LateralRaiseExerciseName.weightedRingDip;
      case 19:
        return LateralRaiseExerciseName.ringMuscleUp;
      case 20:
        return LateralRaiseExerciseName.weightedRingMuscleUp;
      case 21:
        return LateralRaiseExerciseName.ropeClimb;
      case 22:
        return LateralRaiseExerciseName.weightedRopeClimb;
      case 23:
        return LateralRaiseExerciseName.scaption;
      case 24:
        return LateralRaiseExerciseName.seatedLateralRaise;
      case 25:
        return LateralRaiseExerciseName.seatedRearLateralRaise;
      case 26:
        return LateralRaiseExerciseName.sideLyingLateralRaise;
      case 27:
        return LateralRaiseExerciseName.standingLift;
      case 28:
        return LateralRaiseExerciseName.suspendedRow;
      case 29:
        return LateralRaiseExerciseName.underhandGripRearLateralRaise;
      case 30:
        return LateralRaiseExerciseName.wallSlide;
      case 31:
        return LateralRaiseExerciseName.weightedWallSlide;
      case 32:
        return LateralRaiseExerciseName.armCircles;
      case 33:
        return LateralRaiseExerciseName.shavingTheHead;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LegCurlExerciseName {
  legCurl,
  weightedLegCurl,
  goodMorning,
  seatedBarbellGoodMorning,
  singleLegBarbellGoodMorning,
  singleLegSlidingLegCurl,
  slidingLegCurl,
  splitBarbellGoodMorning,
  splitStanceExtension,
  staggeredStanceGoodMorning,
  swissBallHipRaiseAndLegCurl,
  zercherGoodMorning
}

extension LegCurlExerciseNameExt on LegCurlExerciseName {
  int get value {
    switch (this) {
      case LegCurlExerciseName.legCurl:
        return 0;
      case LegCurlExerciseName.weightedLegCurl:
        return 1;
      case LegCurlExerciseName.goodMorning:
        return 2;
      case LegCurlExerciseName.seatedBarbellGoodMorning:
        return 3;
      case LegCurlExerciseName.singleLegBarbellGoodMorning:
        return 4;
      case LegCurlExerciseName.singleLegSlidingLegCurl:
        return 5;
      case LegCurlExerciseName.slidingLegCurl:
        return 6;
      case LegCurlExerciseName.splitBarbellGoodMorning:
        return 7;
      case LegCurlExerciseName.splitStanceExtension:
        return 8;
      case LegCurlExerciseName.staggeredStanceGoodMorning:
        return 9;
      case LegCurlExerciseName.swissBallHipRaiseAndLegCurl:
        return 10;
      case LegCurlExerciseName.zercherGoodMorning:
        return 11;
    }
  }

  static LegCurlExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return LegCurlExerciseName.legCurl;
      case 1:
        return LegCurlExerciseName.weightedLegCurl;
      case 2:
        return LegCurlExerciseName.goodMorning;
      case 3:
        return LegCurlExerciseName.seatedBarbellGoodMorning;
      case 4:
        return LegCurlExerciseName.singleLegBarbellGoodMorning;
      case 5:
        return LegCurlExerciseName.singleLegSlidingLegCurl;
      case 6:
        return LegCurlExerciseName.slidingLegCurl;
      case 7:
        return LegCurlExerciseName.splitBarbellGoodMorning;
      case 8:
        return LegCurlExerciseName.splitStanceExtension;
      case 9:
        return LegCurlExerciseName.staggeredStanceGoodMorning;
      case 10:
        return LegCurlExerciseName.swissBallHipRaiseAndLegCurl;
      case 11:
        return LegCurlExerciseName.zercherGoodMorning;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LegRaiseExerciseName {
  hangingKneeRaise,
  hangingLegRaise,
  weightedHangingLegRaise,
  hangingSingleLegRaise,
  weightedHangingSingleLegRaise,
  kettlebellLegRaises,
  legLoweringDrill,
  weightedLegLoweringDrill,
  lyingStraightLegRaise,
  weightedLyingStraightLegRaise,
  medicineBallLegDrops,
  quadrupedLegRaise,
  weightedQuadrupedLegRaise,
  reverseLegRaise,
  weightedReverseLegRaise,
  reverseLegRaiseOnSwissBall,
  weightedReverseLegRaiseOnSwissBall,
  singleLegLoweringDrill,
  weightedSingleLegLoweringDrill,
  weightedHangingKneeRaise,
  lateralStepover,
  weightedLateralStepover
}

extension LegRaiseExerciseNameExt on LegRaiseExerciseName {
  int get value {
    switch (this) {
      case LegRaiseExerciseName.hangingKneeRaise:
        return 0;
      case LegRaiseExerciseName.hangingLegRaise:
        return 1;
      case LegRaiseExerciseName.weightedHangingLegRaise:
        return 2;
      case LegRaiseExerciseName.hangingSingleLegRaise:
        return 3;
      case LegRaiseExerciseName.weightedHangingSingleLegRaise:
        return 4;
      case LegRaiseExerciseName.kettlebellLegRaises:
        return 5;
      case LegRaiseExerciseName.legLoweringDrill:
        return 6;
      case LegRaiseExerciseName.weightedLegLoweringDrill:
        return 7;
      case LegRaiseExerciseName.lyingStraightLegRaise:
        return 8;
      case LegRaiseExerciseName.weightedLyingStraightLegRaise:
        return 9;
      case LegRaiseExerciseName.medicineBallLegDrops:
        return 10;
      case LegRaiseExerciseName.quadrupedLegRaise:
        return 11;
      case LegRaiseExerciseName.weightedQuadrupedLegRaise:
        return 12;
      case LegRaiseExerciseName.reverseLegRaise:
        return 13;
      case LegRaiseExerciseName.weightedReverseLegRaise:
        return 14;
      case LegRaiseExerciseName.reverseLegRaiseOnSwissBall:
        return 15;
      case LegRaiseExerciseName.weightedReverseLegRaiseOnSwissBall:
        return 16;
      case LegRaiseExerciseName.singleLegLoweringDrill:
        return 17;
      case LegRaiseExerciseName.weightedSingleLegLoweringDrill:
        return 18;
      case LegRaiseExerciseName.weightedHangingKneeRaise:
        return 19;
      case LegRaiseExerciseName.lateralStepover:
        return 20;
      case LegRaiseExerciseName.weightedLateralStepover:
        return 21;
    }
  }

  static LegRaiseExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return LegRaiseExerciseName.hangingKneeRaise;
      case 1:
        return LegRaiseExerciseName.hangingLegRaise;
      case 2:
        return LegRaiseExerciseName.weightedHangingLegRaise;
      case 3:
        return LegRaiseExerciseName.hangingSingleLegRaise;
      case 4:
        return LegRaiseExerciseName.weightedHangingSingleLegRaise;
      case 5:
        return LegRaiseExerciseName.kettlebellLegRaises;
      case 6:
        return LegRaiseExerciseName.legLoweringDrill;
      case 7:
        return LegRaiseExerciseName.weightedLegLoweringDrill;
      case 8:
        return LegRaiseExerciseName.lyingStraightLegRaise;
      case 9:
        return LegRaiseExerciseName.weightedLyingStraightLegRaise;
      case 10:
        return LegRaiseExerciseName.medicineBallLegDrops;
      case 11:
        return LegRaiseExerciseName.quadrupedLegRaise;
      case 12:
        return LegRaiseExerciseName.weightedQuadrupedLegRaise;
      case 13:
        return LegRaiseExerciseName.reverseLegRaise;
      case 14:
        return LegRaiseExerciseName.weightedReverseLegRaise;
      case 15:
        return LegRaiseExerciseName.reverseLegRaiseOnSwissBall;
      case 16:
        return LegRaiseExerciseName.weightedReverseLegRaiseOnSwissBall;
      case 17:
        return LegRaiseExerciseName.singleLegLoweringDrill;
      case 18:
        return LegRaiseExerciseName.weightedSingleLegLoweringDrill;
      case 19:
        return LegRaiseExerciseName.weightedHangingKneeRaise;
      case 20:
        return LegRaiseExerciseName.lateralStepover;
      case 21:
        return LegRaiseExerciseName.weightedLateralStepover;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum LungeExerciseName {
  overheadLunge,
  lungeMatrix,
  weightedLungeMatrix,
  alternatingBarbellForwardLunge,
  alternatingDumbbellLungeWithReach,
  backFootElevatedDumbbellSplitSquat,
  barbellBoxLunge,
  barbellBulgarianSplitSquat,
  barbellCrossoverLunge,
  barbellFrontSplitSquat,
  barbellLunge,
  barbellReverseLunge,
  barbellSideLunge,
  barbellSplitSquat,
  coreControlRearLunge,
  diagonalLunge,
  dropLunge,
  dumbbellBoxLunge,
  dumbbellBulgarianSplitSquat,
  dumbbellCrossoverLunge,
  dumbbellDiagonalLunge,
  dumbbellLunge,
  dumbbellLungeAndRotation,
  dumbbellOverheadBulgarianSplitSquat,
  dumbbellReverseLungeToHighKneeAndPress,
  dumbbellSideLunge,
  elevatedFrontFootBarbellSplitSquat,
  frontFootElevatedDumbbellSplitSquat,
  gunslingerLunge,
  lawnmowerLunge,
  lowLungeWithIsometricAdduction,
  lowSideToSideLunge,
  lunge,
  weightedLunge,
  lungeWithArmReach,
  lungeWithDiagonalReach,
  lungeWithSideBend,
  offsetDumbbellLunge,
  offsetDumbbellReverseLunge,
  overheadBulgarianSplitSquat,
  overheadDumbbellReverseLunge,
  overheadDumbbellSplitSquat,
  overheadLungeWithRotation,
  reverseBarbellBoxLunge,
  reverseBoxLunge,
  reverseDumbbellBoxLunge,
  reverseDumbbellCrossoverLunge,
  reverseDumbbellDiagonalLunge,
  reverseLungeWithReachBack,
  weightedReverseLungeWithReachBack,
  reverseLungeWithTwistAndOverheadReach,
  weightedReverseLungeWithTwistAndOverheadReach,
  reverseSlidingBoxLunge,
  weightedReverseSlidingBoxLunge,
  reverseSlidingLunge,
  weightedReverseSlidingLunge,
  runnersLungeToBalance,
  weightedRunnersLungeToBalance,
  shiftingSideLunge,
  sideAndCrossoverLunge,
  weightedSideAndCrossoverLunge,
  sideLunge,
  weightedSideLunge,
  sideLungeAndPress,
  sideLungeJumpOff,
  sideLungeSweep,
  weightedSideLungeSweep,
  sideLungeToCrossoverTap,
  weightedSideLungeToCrossoverTap,
  sideToSideLungeChops,
  weightedSideToSideLungeChops,
  siffJumpLunge,
  weightedSiffJumpLunge,
  singleArmReverseLungeAndPress,
  slidingLateralLunge,
  weightedSlidingLateralLunge,
  walkingBarbellLunge,
  walkingDumbbellLunge,
  walkingLunge,
  weightedWalkingLunge,
  wideGripOverheadBarbellSplitSquat
}

extension LungeExerciseNameExt on LungeExerciseName {
  int get value {
    switch (this) {
      case LungeExerciseName.overheadLunge:
        return 0;
      case LungeExerciseName.lungeMatrix:
        return 1;
      case LungeExerciseName.weightedLungeMatrix:
        return 2;
      case LungeExerciseName.alternatingBarbellForwardLunge:
        return 3;
      case LungeExerciseName.alternatingDumbbellLungeWithReach:
        return 4;
      case LungeExerciseName.backFootElevatedDumbbellSplitSquat:
        return 5;
      case LungeExerciseName.barbellBoxLunge:
        return 6;
      case LungeExerciseName.barbellBulgarianSplitSquat:
        return 7;
      case LungeExerciseName.barbellCrossoverLunge:
        return 8;
      case LungeExerciseName.barbellFrontSplitSquat:
        return 9;
      case LungeExerciseName.barbellLunge:
        return 10;
      case LungeExerciseName.barbellReverseLunge:
        return 11;
      case LungeExerciseName.barbellSideLunge:
        return 12;
      case LungeExerciseName.barbellSplitSquat:
        return 13;
      case LungeExerciseName.coreControlRearLunge:
        return 14;
      case LungeExerciseName.diagonalLunge:
        return 15;
      case LungeExerciseName.dropLunge:
        return 16;
      case LungeExerciseName.dumbbellBoxLunge:
        return 17;
      case LungeExerciseName.dumbbellBulgarianSplitSquat:
        return 18;
      case LungeExerciseName.dumbbellCrossoverLunge:
        return 19;
      case LungeExerciseName.dumbbellDiagonalLunge:
        return 20;
      case LungeExerciseName.dumbbellLunge:
        return 21;
      case LungeExerciseName.dumbbellLungeAndRotation:
        return 22;
      case LungeExerciseName.dumbbellOverheadBulgarianSplitSquat:
        return 23;
      case LungeExerciseName.dumbbellReverseLungeToHighKneeAndPress:
        return 24;
      case LungeExerciseName.dumbbellSideLunge:
        return 25;
      case LungeExerciseName.elevatedFrontFootBarbellSplitSquat:
        return 26;
      case LungeExerciseName.frontFootElevatedDumbbellSplitSquat:
        return 27;
      case LungeExerciseName.gunslingerLunge:
        return 28;
      case LungeExerciseName.lawnmowerLunge:
        return 29;
      case LungeExerciseName.lowLungeWithIsometricAdduction:
        return 30;
      case LungeExerciseName.lowSideToSideLunge:
        return 31;
      case LungeExerciseName.lunge:
        return 32;
      case LungeExerciseName.weightedLunge:
        return 33;
      case LungeExerciseName.lungeWithArmReach:
        return 34;
      case LungeExerciseName.lungeWithDiagonalReach:
        return 35;
      case LungeExerciseName.lungeWithSideBend:
        return 36;
      case LungeExerciseName.offsetDumbbellLunge:
        return 37;
      case LungeExerciseName.offsetDumbbellReverseLunge:
        return 38;
      case LungeExerciseName.overheadBulgarianSplitSquat:
        return 39;
      case LungeExerciseName.overheadDumbbellReverseLunge:
        return 40;
      case LungeExerciseName.overheadDumbbellSplitSquat:
        return 41;
      case LungeExerciseName.overheadLungeWithRotation:
        return 42;
      case LungeExerciseName.reverseBarbellBoxLunge:
        return 43;
      case LungeExerciseName.reverseBoxLunge:
        return 44;
      case LungeExerciseName.reverseDumbbellBoxLunge:
        return 45;
      case LungeExerciseName.reverseDumbbellCrossoverLunge:
        return 46;
      case LungeExerciseName.reverseDumbbellDiagonalLunge:
        return 47;
      case LungeExerciseName.reverseLungeWithReachBack:
        return 48;
      case LungeExerciseName.weightedReverseLungeWithReachBack:
        return 49;
      case LungeExerciseName.reverseLungeWithTwistAndOverheadReach:
        return 50;
      case LungeExerciseName.weightedReverseLungeWithTwistAndOverheadReach:
        return 51;
      case LungeExerciseName.reverseSlidingBoxLunge:
        return 52;
      case LungeExerciseName.weightedReverseSlidingBoxLunge:
        return 53;
      case LungeExerciseName.reverseSlidingLunge:
        return 54;
      case LungeExerciseName.weightedReverseSlidingLunge:
        return 55;
      case LungeExerciseName.runnersLungeToBalance:
        return 56;
      case LungeExerciseName.weightedRunnersLungeToBalance:
        return 57;
      case LungeExerciseName.shiftingSideLunge:
        return 58;
      case LungeExerciseName.sideAndCrossoverLunge:
        return 59;
      case LungeExerciseName.weightedSideAndCrossoverLunge:
        return 60;
      case LungeExerciseName.sideLunge:
        return 61;
      case LungeExerciseName.weightedSideLunge:
        return 62;
      case LungeExerciseName.sideLungeAndPress:
        return 63;
      case LungeExerciseName.sideLungeJumpOff:
        return 64;
      case LungeExerciseName.sideLungeSweep:
        return 65;
      case LungeExerciseName.weightedSideLungeSweep:
        return 66;
      case LungeExerciseName.sideLungeToCrossoverTap:
        return 67;
      case LungeExerciseName.weightedSideLungeToCrossoverTap:
        return 68;
      case LungeExerciseName.sideToSideLungeChops:
        return 69;
      case LungeExerciseName.weightedSideToSideLungeChops:
        return 70;
      case LungeExerciseName.siffJumpLunge:
        return 71;
      case LungeExerciseName.weightedSiffJumpLunge:
        return 72;
      case LungeExerciseName.singleArmReverseLungeAndPress:
        return 73;
      case LungeExerciseName.slidingLateralLunge:
        return 74;
      case LungeExerciseName.weightedSlidingLateralLunge:
        return 75;
      case LungeExerciseName.walkingBarbellLunge:
        return 76;
      case LungeExerciseName.walkingDumbbellLunge:
        return 77;
      case LungeExerciseName.walkingLunge:
        return 78;
      case LungeExerciseName.weightedWalkingLunge:
        return 79;
      case LungeExerciseName.wideGripOverheadBarbellSplitSquat:
        return 80;
    }
  }

  static LungeExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return LungeExerciseName.overheadLunge;
      case 1:
        return LungeExerciseName.lungeMatrix;
      case 2:
        return LungeExerciseName.weightedLungeMatrix;
      case 3:
        return LungeExerciseName.alternatingBarbellForwardLunge;
      case 4:
        return LungeExerciseName.alternatingDumbbellLungeWithReach;
      case 5:
        return LungeExerciseName.backFootElevatedDumbbellSplitSquat;
      case 6:
        return LungeExerciseName.barbellBoxLunge;
      case 7:
        return LungeExerciseName.barbellBulgarianSplitSquat;
      case 8:
        return LungeExerciseName.barbellCrossoverLunge;
      case 9:
        return LungeExerciseName.barbellFrontSplitSquat;
      case 10:
        return LungeExerciseName.barbellLunge;
      case 11:
        return LungeExerciseName.barbellReverseLunge;
      case 12:
        return LungeExerciseName.barbellSideLunge;
      case 13:
        return LungeExerciseName.barbellSplitSquat;
      case 14:
        return LungeExerciseName.coreControlRearLunge;
      case 15:
        return LungeExerciseName.diagonalLunge;
      case 16:
        return LungeExerciseName.dropLunge;
      case 17:
        return LungeExerciseName.dumbbellBoxLunge;
      case 18:
        return LungeExerciseName.dumbbellBulgarianSplitSquat;
      case 19:
        return LungeExerciseName.dumbbellCrossoverLunge;
      case 20:
        return LungeExerciseName.dumbbellDiagonalLunge;
      case 21:
        return LungeExerciseName.dumbbellLunge;
      case 22:
        return LungeExerciseName.dumbbellLungeAndRotation;
      case 23:
        return LungeExerciseName.dumbbellOverheadBulgarianSplitSquat;
      case 24:
        return LungeExerciseName.dumbbellReverseLungeToHighKneeAndPress;
      case 25:
        return LungeExerciseName.dumbbellSideLunge;
      case 26:
        return LungeExerciseName.elevatedFrontFootBarbellSplitSquat;
      case 27:
        return LungeExerciseName.frontFootElevatedDumbbellSplitSquat;
      case 28:
        return LungeExerciseName.gunslingerLunge;
      case 29:
        return LungeExerciseName.lawnmowerLunge;
      case 30:
        return LungeExerciseName.lowLungeWithIsometricAdduction;
      case 31:
        return LungeExerciseName.lowSideToSideLunge;
      case 32:
        return LungeExerciseName.lunge;
      case 33:
        return LungeExerciseName.weightedLunge;
      case 34:
        return LungeExerciseName.lungeWithArmReach;
      case 35:
        return LungeExerciseName.lungeWithDiagonalReach;
      case 36:
        return LungeExerciseName.lungeWithSideBend;
      case 37:
        return LungeExerciseName.offsetDumbbellLunge;
      case 38:
        return LungeExerciseName.offsetDumbbellReverseLunge;
      case 39:
        return LungeExerciseName.overheadBulgarianSplitSquat;
      case 40:
        return LungeExerciseName.overheadDumbbellReverseLunge;
      case 41:
        return LungeExerciseName.overheadDumbbellSplitSquat;
      case 42:
        return LungeExerciseName.overheadLungeWithRotation;
      case 43:
        return LungeExerciseName.reverseBarbellBoxLunge;
      case 44:
        return LungeExerciseName.reverseBoxLunge;
      case 45:
        return LungeExerciseName.reverseDumbbellBoxLunge;
      case 46:
        return LungeExerciseName.reverseDumbbellCrossoverLunge;
      case 47:
        return LungeExerciseName.reverseDumbbellDiagonalLunge;
      case 48:
        return LungeExerciseName.reverseLungeWithReachBack;
      case 49:
        return LungeExerciseName.weightedReverseLungeWithReachBack;
      case 50:
        return LungeExerciseName.reverseLungeWithTwistAndOverheadReach;
      case 51:
        return LungeExerciseName.weightedReverseLungeWithTwistAndOverheadReach;
      case 52:
        return LungeExerciseName.reverseSlidingBoxLunge;
      case 53:
        return LungeExerciseName.weightedReverseSlidingBoxLunge;
      case 54:
        return LungeExerciseName.reverseSlidingLunge;
      case 55:
        return LungeExerciseName.weightedReverseSlidingLunge;
      case 56:
        return LungeExerciseName.runnersLungeToBalance;
      case 57:
        return LungeExerciseName.weightedRunnersLungeToBalance;
      case 58:
        return LungeExerciseName.shiftingSideLunge;
      case 59:
        return LungeExerciseName.sideAndCrossoverLunge;
      case 60:
        return LungeExerciseName.weightedSideAndCrossoverLunge;
      case 61:
        return LungeExerciseName.sideLunge;
      case 62:
        return LungeExerciseName.weightedSideLunge;
      case 63:
        return LungeExerciseName.sideLungeAndPress;
      case 64:
        return LungeExerciseName.sideLungeJumpOff;
      case 65:
        return LungeExerciseName.sideLungeSweep;
      case 66:
        return LungeExerciseName.weightedSideLungeSweep;
      case 67:
        return LungeExerciseName.sideLungeToCrossoverTap;
      case 68:
        return LungeExerciseName.weightedSideLungeToCrossoverTap;
      case 69:
        return LungeExerciseName.sideToSideLungeChops;
      case 70:
        return LungeExerciseName.weightedSideToSideLungeChops;
      case 71:
        return LungeExerciseName.siffJumpLunge;
      case 72:
        return LungeExerciseName.weightedSiffJumpLunge;
      case 73:
        return LungeExerciseName.singleArmReverseLungeAndPress;
      case 74:
        return LungeExerciseName.slidingLateralLunge;
      case 75:
        return LungeExerciseName.weightedSlidingLateralLunge;
      case 76:
        return LungeExerciseName.walkingBarbellLunge;
      case 77:
        return LungeExerciseName.walkingDumbbellLunge;
      case 78:
        return LungeExerciseName.walkingLunge;
      case 79:
        return LungeExerciseName.weightedWalkingLunge;
      case 80:
        return LungeExerciseName.wideGripOverheadBarbellSplitSquat;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum OlympicLiftExerciseName {
  barbellHangPowerClean,
  barbellHangSquatClean,
  barbellPowerClean,
  barbellPowerSnatch,
  barbellSquatClean,
  cleanAndJerk,
  barbellHangPowerSnatch,
  barbellHangPull,
  barbellHighPull,
  barbellSnatch,
  barbellSplitJerk,
  clean,
  dumbbellClean,
  dumbbellHangPull,
  oneHandDumbbellSplitSnatch,
  pushJerk,
  singleArmDumbbellSnatch,
  singleArmHangSnatch,
  singleArmKettlebellSnatch,
  splitJerk,
  squatCleanAndJerk
}

extension OlympicLiftExerciseNameExt on OlympicLiftExerciseName {
  int get value {
    switch (this) {
      case OlympicLiftExerciseName.barbellHangPowerClean:
        return 0;
      case OlympicLiftExerciseName.barbellHangSquatClean:
        return 1;
      case OlympicLiftExerciseName.barbellPowerClean:
        return 2;
      case OlympicLiftExerciseName.barbellPowerSnatch:
        return 3;
      case OlympicLiftExerciseName.barbellSquatClean:
        return 4;
      case OlympicLiftExerciseName.cleanAndJerk:
        return 5;
      case OlympicLiftExerciseName.barbellHangPowerSnatch:
        return 6;
      case OlympicLiftExerciseName.barbellHangPull:
        return 7;
      case OlympicLiftExerciseName.barbellHighPull:
        return 8;
      case OlympicLiftExerciseName.barbellSnatch:
        return 9;
      case OlympicLiftExerciseName.barbellSplitJerk:
        return 10;
      case OlympicLiftExerciseName.clean:
        return 11;
      case OlympicLiftExerciseName.dumbbellClean:
        return 12;
      case OlympicLiftExerciseName.dumbbellHangPull:
        return 13;
      case OlympicLiftExerciseName.oneHandDumbbellSplitSnatch:
        return 14;
      case OlympicLiftExerciseName.pushJerk:
        return 15;
      case OlympicLiftExerciseName.singleArmDumbbellSnatch:
        return 16;
      case OlympicLiftExerciseName.singleArmHangSnatch:
        return 17;
      case OlympicLiftExerciseName.singleArmKettlebellSnatch:
        return 18;
      case OlympicLiftExerciseName.splitJerk:
        return 19;
      case OlympicLiftExerciseName.squatCleanAndJerk:
        return 20;
    }
  }

  static OlympicLiftExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return OlympicLiftExerciseName.barbellHangPowerClean;
      case 1:
        return OlympicLiftExerciseName.barbellHangSquatClean;
      case 2:
        return OlympicLiftExerciseName.barbellPowerClean;
      case 3:
        return OlympicLiftExerciseName.barbellPowerSnatch;
      case 4:
        return OlympicLiftExerciseName.barbellSquatClean;
      case 5:
        return OlympicLiftExerciseName.cleanAndJerk;
      case 6:
        return OlympicLiftExerciseName.barbellHangPowerSnatch;
      case 7:
        return OlympicLiftExerciseName.barbellHangPull;
      case 8:
        return OlympicLiftExerciseName.barbellHighPull;
      case 9:
        return OlympicLiftExerciseName.barbellSnatch;
      case 10:
        return OlympicLiftExerciseName.barbellSplitJerk;
      case 11:
        return OlympicLiftExerciseName.clean;
      case 12:
        return OlympicLiftExerciseName.dumbbellClean;
      case 13:
        return OlympicLiftExerciseName.dumbbellHangPull;
      case 14:
        return OlympicLiftExerciseName.oneHandDumbbellSplitSnatch;
      case 15:
        return OlympicLiftExerciseName.pushJerk;
      case 16:
        return OlympicLiftExerciseName.singleArmDumbbellSnatch;
      case 17:
        return OlympicLiftExerciseName.singleArmHangSnatch;
      case 18:
        return OlympicLiftExerciseName.singleArmKettlebellSnatch;
      case 19:
        return OlympicLiftExerciseName.splitJerk;
      case 20:
        return OlympicLiftExerciseName.squatCleanAndJerk;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum PlankExerciseName {
  n45DegreePlank,
  weighted45DegreePlank,
  n90DegreeStaticHold,
  weighted90DegreeStaticHold,
  bearCrawl,
  weightedBearCrawl,
  crossBodyMountainClimber,
  weightedCrossBodyMountainClimber,
  elbowPlankPikeJacks,
  weightedElbowPlankPikeJacks,
  elevatedFeetPlank,
  weightedElevatedFeetPlank,
  elevatorAbs,
  weightedElevatorAbs,
  extendedPlank,
  weightedExtendedPlank,
  fullPlankPasseTwist,
  weightedFullPlankPasseTwist,
  inchingElbowPlank,
  weightedInchingElbowPlank,
  inchwormToSidePlank,
  weightedInchwormToSidePlank,
  kneelingPlank,
  weightedKneelingPlank,
  kneelingSidePlankWithLegLift,
  weightedKneelingSidePlankWithLegLift,
  lateralRoll,
  weightedLateralRoll,
  lyingReversePlank,
  weightedLyingReversePlank,
  medicineBallMountainClimber,
  weightedMedicineBallMountainClimber,
  modifiedMountainClimberAndExtension,
  weightedModifiedMountainClimberAndExtension,
  mountainClimber,
  weightedMountainClimber,
  mountainClimberOnSlidingDiscs,
  weightedMountainClimberOnSlidingDiscs,
  mountainClimberWithFeetOnBosuBall,
  weightedMountainClimberWithFeetOnBosuBall,
  mountainClimberWithHandsOnBench,
  mountainClimberWithHandsOnSwissBall,
  weightedMountainClimberWithHandsOnSwissBall,
  plank,
  plankJacksWithFeetOnSlidingDiscs,
  weightedPlankJacksWithFeetOnSlidingDiscs,
  plankKneeTwist,
  weightedPlankKneeTwist,
  plankPikeJumps,
  weightedPlankPikeJumps,
  plankPikes,
  weightedPlankPikes,
  plankToStandUp,
  weightedPlankToStandUp,
  plankWithArmRaise,
  weightedPlankWithArmRaise,
  plankWithKneeToElbow,
  weightedPlankWithKneeToElbow,
  plankWithObliqueCrunch,
  weightedPlankWithObliqueCrunch,
  plyometricSidePlank,
  weightedPlyometricSidePlank,
  rollingSidePlank,
  weightedRollingSidePlank,
  sideKickPlank,
  weightedSideKickPlank,
  sidePlank,
  weightedSidePlank,
  sidePlankAndRow,
  weightedSidePlankAndRow,
  sidePlankLift,
  weightedSidePlankLift,
  sidePlankWithElbowOnBosuBall,
  weightedSidePlankWithElbowOnBosuBall,
  sidePlankWithFeetOnBench,
  weightedSidePlankWithFeetOnBench,
  sidePlankWithKneeCircle,
  weightedSidePlankWithKneeCircle,
  sidePlankWithKneeTuck,
  weightedSidePlankWithKneeTuck,
  sidePlankWithLegLift,
  weightedSidePlankWithLegLift,
  sidePlankWithReachUnder,
  weightedSidePlankWithReachUnder,
  singleLegElevatedFeetPlank,
  weightedSingleLegElevatedFeetPlank,
  singleLegFlexAndExtend,
  weightedSingleLegFlexAndExtend,
  singleLegSidePlank,
  weightedSingleLegSidePlank,
  spidermanPlank,
  weightedSpidermanPlank,
  straightArmPlank,
  weightedStraightArmPlank,
  straightArmPlankWithShoulderTouch,
  weightedStraightArmPlankWithShoulderTouch,
  swissBallPlank,
  weightedSwissBallPlank,
  swissBallPlankLegLift,
  weightedSwissBallPlankLegLift,
  swissBallPlankLegLiftAndHold,
  swissBallPlankWithFeetOnBench,
  weightedSwissBallPlankWithFeetOnBench,
  swissBallProneJackknife,
  weightedSwissBallProneJackknife,
  swissBallSidePlank,
  weightedSwissBallSidePlank,
  threeWayPlank,
  weightedThreeWayPlank,
  towelPlankAndKneeIn,
  weightedTowelPlankAndKneeIn,
  tStabilization,
  weightedTStabilization,
  turkishGetUpToSidePlank,
  weightedTurkishGetUpToSidePlank,
  twoPointPlank,
  weightedTwoPointPlank,
  weightedPlank,
  wideStancePlankWithDiagonalArmLift,
  weightedWideStancePlankWithDiagonalArmLift,
  wideStancePlankWithDiagonalLegLift,
  weightedWideStancePlankWithDiagonalLegLift,
  wideStancePlankWithLegLift,
  weightedWideStancePlankWithLegLift,
  wideStancePlankWithOppositeArmAndLegLift,
  weightedMountainClimberWithHandsOnBench,
  weightedSwissBallPlankLegLiftAndHold,
  weightedWideStancePlankWithOppositeArmAndLegLift,
  plankWithFeetOnSwissBall,
  sidePlankToPlankWithReachUnder,
  bridgeWithGluteLowerLift,
  bridgeOneLegBridge,
  plankWithArmVariations,
  plankWithLegLift,
  reversePlankWithLegPull
}

extension PlankExerciseNameExt on PlankExerciseName {
  int get value {
    switch (this) {
      case PlankExerciseName.n45DegreePlank:
        return 0;
      case PlankExerciseName.weighted45DegreePlank:
        return 1;
      case PlankExerciseName.n90DegreeStaticHold:
        return 2;
      case PlankExerciseName.weighted90DegreeStaticHold:
        return 3;
      case PlankExerciseName.bearCrawl:
        return 4;
      case PlankExerciseName.weightedBearCrawl:
        return 5;
      case PlankExerciseName.crossBodyMountainClimber:
        return 6;
      case PlankExerciseName.weightedCrossBodyMountainClimber:
        return 7;
      case PlankExerciseName.elbowPlankPikeJacks:
        return 8;
      case PlankExerciseName.weightedElbowPlankPikeJacks:
        return 9;
      case PlankExerciseName.elevatedFeetPlank:
        return 10;
      case PlankExerciseName.weightedElevatedFeetPlank:
        return 11;
      case PlankExerciseName.elevatorAbs:
        return 12;
      case PlankExerciseName.weightedElevatorAbs:
        return 13;
      case PlankExerciseName.extendedPlank:
        return 14;
      case PlankExerciseName.weightedExtendedPlank:
        return 15;
      case PlankExerciseName.fullPlankPasseTwist:
        return 16;
      case PlankExerciseName.weightedFullPlankPasseTwist:
        return 17;
      case PlankExerciseName.inchingElbowPlank:
        return 18;
      case PlankExerciseName.weightedInchingElbowPlank:
        return 19;
      case PlankExerciseName.inchwormToSidePlank:
        return 20;
      case PlankExerciseName.weightedInchwormToSidePlank:
        return 21;
      case PlankExerciseName.kneelingPlank:
        return 22;
      case PlankExerciseName.weightedKneelingPlank:
        return 23;
      case PlankExerciseName.kneelingSidePlankWithLegLift:
        return 24;
      case PlankExerciseName.weightedKneelingSidePlankWithLegLift:
        return 25;
      case PlankExerciseName.lateralRoll:
        return 26;
      case PlankExerciseName.weightedLateralRoll:
        return 27;
      case PlankExerciseName.lyingReversePlank:
        return 28;
      case PlankExerciseName.weightedLyingReversePlank:
        return 29;
      case PlankExerciseName.medicineBallMountainClimber:
        return 30;
      case PlankExerciseName.weightedMedicineBallMountainClimber:
        return 31;
      case PlankExerciseName.modifiedMountainClimberAndExtension:
        return 32;
      case PlankExerciseName.weightedModifiedMountainClimberAndExtension:
        return 33;
      case PlankExerciseName.mountainClimber:
        return 34;
      case PlankExerciseName.weightedMountainClimber:
        return 35;
      case PlankExerciseName.mountainClimberOnSlidingDiscs:
        return 36;
      case PlankExerciseName.weightedMountainClimberOnSlidingDiscs:
        return 37;
      case PlankExerciseName.mountainClimberWithFeetOnBosuBall:
        return 38;
      case PlankExerciseName.weightedMountainClimberWithFeetOnBosuBall:
        return 39;
      case PlankExerciseName.mountainClimberWithHandsOnBench:
        return 40;
      case PlankExerciseName.mountainClimberWithHandsOnSwissBall:
        return 41;
      case PlankExerciseName.weightedMountainClimberWithHandsOnSwissBall:
        return 42;
      case PlankExerciseName.plank:
        return 43;
      case PlankExerciseName.plankJacksWithFeetOnSlidingDiscs:
        return 44;
      case PlankExerciseName.weightedPlankJacksWithFeetOnSlidingDiscs:
        return 45;
      case PlankExerciseName.plankKneeTwist:
        return 46;
      case PlankExerciseName.weightedPlankKneeTwist:
        return 47;
      case PlankExerciseName.plankPikeJumps:
        return 48;
      case PlankExerciseName.weightedPlankPikeJumps:
        return 49;
      case PlankExerciseName.plankPikes:
        return 50;
      case PlankExerciseName.weightedPlankPikes:
        return 51;
      case PlankExerciseName.plankToStandUp:
        return 52;
      case PlankExerciseName.weightedPlankToStandUp:
        return 53;
      case PlankExerciseName.plankWithArmRaise:
        return 54;
      case PlankExerciseName.weightedPlankWithArmRaise:
        return 55;
      case PlankExerciseName.plankWithKneeToElbow:
        return 56;
      case PlankExerciseName.weightedPlankWithKneeToElbow:
        return 57;
      case PlankExerciseName.plankWithObliqueCrunch:
        return 58;
      case PlankExerciseName.weightedPlankWithObliqueCrunch:
        return 59;
      case PlankExerciseName.plyometricSidePlank:
        return 60;
      case PlankExerciseName.weightedPlyometricSidePlank:
        return 61;
      case PlankExerciseName.rollingSidePlank:
        return 62;
      case PlankExerciseName.weightedRollingSidePlank:
        return 63;
      case PlankExerciseName.sideKickPlank:
        return 64;
      case PlankExerciseName.weightedSideKickPlank:
        return 65;
      case PlankExerciseName.sidePlank:
        return 66;
      case PlankExerciseName.weightedSidePlank:
        return 67;
      case PlankExerciseName.sidePlankAndRow:
        return 68;
      case PlankExerciseName.weightedSidePlankAndRow:
        return 69;
      case PlankExerciseName.sidePlankLift:
        return 70;
      case PlankExerciseName.weightedSidePlankLift:
        return 71;
      case PlankExerciseName.sidePlankWithElbowOnBosuBall:
        return 72;
      case PlankExerciseName.weightedSidePlankWithElbowOnBosuBall:
        return 73;
      case PlankExerciseName.sidePlankWithFeetOnBench:
        return 74;
      case PlankExerciseName.weightedSidePlankWithFeetOnBench:
        return 75;
      case PlankExerciseName.sidePlankWithKneeCircle:
        return 76;
      case PlankExerciseName.weightedSidePlankWithKneeCircle:
        return 77;
      case PlankExerciseName.sidePlankWithKneeTuck:
        return 78;
      case PlankExerciseName.weightedSidePlankWithKneeTuck:
        return 79;
      case PlankExerciseName.sidePlankWithLegLift:
        return 80;
      case PlankExerciseName.weightedSidePlankWithLegLift:
        return 81;
      case PlankExerciseName.sidePlankWithReachUnder:
        return 82;
      case PlankExerciseName.weightedSidePlankWithReachUnder:
        return 83;
      case PlankExerciseName.singleLegElevatedFeetPlank:
        return 84;
      case PlankExerciseName.weightedSingleLegElevatedFeetPlank:
        return 85;
      case PlankExerciseName.singleLegFlexAndExtend:
        return 86;
      case PlankExerciseName.weightedSingleLegFlexAndExtend:
        return 87;
      case PlankExerciseName.singleLegSidePlank:
        return 88;
      case PlankExerciseName.weightedSingleLegSidePlank:
        return 89;
      case PlankExerciseName.spidermanPlank:
        return 90;
      case PlankExerciseName.weightedSpidermanPlank:
        return 91;
      case PlankExerciseName.straightArmPlank:
        return 92;
      case PlankExerciseName.weightedStraightArmPlank:
        return 93;
      case PlankExerciseName.straightArmPlankWithShoulderTouch:
        return 94;
      case PlankExerciseName.weightedStraightArmPlankWithShoulderTouch:
        return 95;
      case PlankExerciseName.swissBallPlank:
        return 96;
      case PlankExerciseName.weightedSwissBallPlank:
        return 97;
      case PlankExerciseName.swissBallPlankLegLift:
        return 98;
      case PlankExerciseName.weightedSwissBallPlankLegLift:
        return 99;
      case PlankExerciseName.swissBallPlankLegLiftAndHold:
        return 100;
      case PlankExerciseName.swissBallPlankWithFeetOnBench:
        return 101;
      case PlankExerciseName.weightedSwissBallPlankWithFeetOnBench:
        return 102;
      case PlankExerciseName.swissBallProneJackknife:
        return 103;
      case PlankExerciseName.weightedSwissBallProneJackknife:
        return 104;
      case PlankExerciseName.swissBallSidePlank:
        return 105;
      case PlankExerciseName.weightedSwissBallSidePlank:
        return 106;
      case PlankExerciseName.threeWayPlank:
        return 107;
      case PlankExerciseName.weightedThreeWayPlank:
        return 108;
      case PlankExerciseName.towelPlankAndKneeIn:
        return 109;
      case PlankExerciseName.weightedTowelPlankAndKneeIn:
        return 110;
      case PlankExerciseName.tStabilization:
        return 111;
      case PlankExerciseName.weightedTStabilization:
        return 112;
      case PlankExerciseName.turkishGetUpToSidePlank:
        return 113;
      case PlankExerciseName.weightedTurkishGetUpToSidePlank:
        return 114;
      case PlankExerciseName.twoPointPlank:
        return 115;
      case PlankExerciseName.weightedTwoPointPlank:
        return 116;
      case PlankExerciseName.weightedPlank:
        return 117;
      case PlankExerciseName.wideStancePlankWithDiagonalArmLift:
        return 118;
      case PlankExerciseName.weightedWideStancePlankWithDiagonalArmLift:
        return 119;
      case PlankExerciseName.wideStancePlankWithDiagonalLegLift:
        return 120;
      case PlankExerciseName.weightedWideStancePlankWithDiagonalLegLift:
        return 121;
      case PlankExerciseName.wideStancePlankWithLegLift:
        return 122;
      case PlankExerciseName.weightedWideStancePlankWithLegLift:
        return 123;
      case PlankExerciseName.wideStancePlankWithOppositeArmAndLegLift:
        return 124;
      case PlankExerciseName.weightedMountainClimberWithHandsOnBench:
        return 125;
      case PlankExerciseName.weightedSwissBallPlankLegLiftAndHold:
        return 126;
      case PlankExerciseName.weightedWideStancePlankWithOppositeArmAndLegLift:
        return 127;
      case PlankExerciseName.plankWithFeetOnSwissBall:
        return 128;
      case PlankExerciseName.sidePlankToPlankWithReachUnder:
        return 129;
      case PlankExerciseName.bridgeWithGluteLowerLift:
        return 130;
      case PlankExerciseName.bridgeOneLegBridge:
        return 131;
      case PlankExerciseName.plankWithArmVariations:
        return 132;
      case PlankExerciseName.plankWithLegLift:
        return 133;
      case PlankExerciseName.reversePlankWithLegPull:
        return 134;
    }
  }

  static PlankExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return PlankExerciseName.n45DegreePlank;
      case 1:
        return PlankExerciseName.weighted45DegreePlank;
      case 2:
        return PlankExerciseName.n90DegreeStaticHold;
      case 3:
        return PlankExerciseName.weighted90DegreeStaticHold;
      case 4:
        return PlankExerciseName.bearCrawl;
      case 5:
        return PlankExerciseName.weightedBearCrawl;
      case 6:
        return PlankExerciseName.crossBodyMountainClimber;
      case 7:
        return PlankExerciseName.weightedCrossBodyMountainClimber;
      case 8:
        return PlankExerciseName.elbowPlankPikeJacks;
      case 9:
        return PlankExerciseName.weightedElbowPlankPikeJacks;
      case 10:
        return PlankExerciseName.elevatedFeetPlank;
      case 11:
        return PlankExerciseName.weightedElevatedFeetPlank;
      case 12:
        return PlankExerciseName.elevatorAbs;
      case 13:
        return PlankExerciseName.weightedElevatorAbs;
      case 14:
        return PlankExerciseName.extendedPlank;
      case 15:
        return PlankExerciseName.weightedExtendedPlank;
      case 16:
        return PlankExerciseName.fullPlankPasseTwist;
      case 17:
        return PlankExerciseName.weightedFullPlankPasseTwist;
      case 18:
        return PlankExerciseName.inchingElbowPlank;
      case 19:
        return PlankExerciseName.weightedInchingElbowPlank;
      case 20:
        return PlankExerciseName.inchwormToSidePlank;
      case 21:
        return PlankExerciseName.weightedInchwormToSidePlank;
      case 22:
        return PlankExerciseName.kneelingPlank;
      case 23:
        return PlankExerciseName.weightedKneelingPlank;
      case 24:
        return PlankExerciseName.kneelingSidePlankWithLegLift;
      case 25:
        return PlankExerciseName.weightedKneelingSidePlankWithLegLift;
      case 26:
        return PlankExerciseName.lateralRoll;
      case 27:
        return PlankExerciseName.weightedLateralRoll;
      case 28:
        return PlankExerciseName.lyingReversePlank;
      case 29:
        return PlankExerciseName.weightedLyingReversePlank;
      case 30:
        return PlankExerciseName.medicineBallMountainClimber;
      case 31:
        return PlankExerciseName.weightedMedicineBallMountainClimber;
      case 32:
        return PlankExerciseName.modifiedMountainClimberAndExtension;
      case 33:
        return PlankExerciseName.weightedModifiedMountainClimberAndExtension;
      case 34:
        return PlankExerciseName.mountainClimber;
      case 35:
        return PlankExerciseName.weightedMountainClimber;
      case 36:
        return PlankExerciseName.mountainClimberOnSlidingDiscs;
      case 37:
        return PlankExerciseName.weightedMountainClimberOnSlidingDiscs;
      case 38:
        return PlankExerciseName.mountainClimberWithFeetOnBosuBall;
      case 39:
        return PlankExerciseName.weightedMountainClimberWithFeetOnBosuBall;
      case 40:
        return PlankExerciseName.mountainClimberWithHandsOnBench;
      case 41:
        return PlankExerciseName.mountainClimberWithHandsOnSwissBall;
      case 42:
        return PlankExerciseName.weightedMountainClimberWithHandsOnSwissBall;
      case 43:
        return PlankExerciseName.plank;
      case 44:
        return PlankExerciseName.plankJacksWithFeetOnSlidingDiscs;
      case 45:
        return PlankExerciseName.weightedPlankJacksWithFeetOnSlidingDiscs;
      case 46:
        return PlankExerciseName.plankKneeTwist;
      case 47:
        return PlankExerciseName.weightedPlankKneeTwist;
      case 48:
        return PlankExerciseName.plankPikeJumps;
      case 49:
        return PlankExerciseName.weightedPlankPikeJumps;
      case 50:
        return PlankExerciseName.plankPikes;
      case 51:
        return PlankExerciseName.weightedPlankPikes;
      case 52:
        return PlankExerciseName.plankToStandUp;
      case 53:
        return PlankExerciseName.weightedPlankToStandUp;
      case 54:
        return PlankExerciseName.plankWithArmRaise;
      case 55:
        return PlankExerciseName.weightedPlankWithArmRaise;
      case 56:
        return PlankExerciseName.plankWithKneeToElbow;
      case 57:
        return PlankExerciseName.weightedPlankWithKneeToElbow;
      case 58:
        return PlankExerciseName.plankWithObliqueCrunch;
      case 59:
        return PlankExerciseName.weightedPlankWithObliqueCrunch;
      case 60:
        return PlankExerciseName.plyometricSidePlank;
      case 61:
        return PlankExerciseName.weightedPlyometricSidePlank;
      case 62:
        return PlankExerciseName.rollingSidePlank;
      case 63:
        return PlankExerciseName.weightedRollingSidePlank;
      case 64:
        return PlankExerciseName.sideKickPlank;
      case 65:
        return PlankExerciseName.weightedSideKickPlank;
      case 66:
        return PlankExerciseName.sidePlank;
      case 67:
        return PlankExerciseName.weightedSidePlank;
      case 68:
        return PlankExerciseName.sidePlankAndRow;
      case 69:
        return PlankExerciseName.weightedSidePlankAndRow;
      case 70:
        return PlankExerciseName.sidePlankLift;
      case 71:
        return PlankExerciseName.weightedSidePlankLift;
      case 72:
        return PlankExerciseName.sidePlankWithElbowOnBosuBall;
      case 73:
        return PlankExerciseName.weightedSidePlankWithElbowOnBosuBall;
      case 74:
        return PlankExerciseName.sidePlankWithFeetOnBench;
      case 75:
        return PlankExerciseName.weightedSidePlankWithFeetOnBench;
      case 76:
        return PlankExerciseName.sidePlankWithKneeCircle;
      case 77:
        return PlankExerciseName.weightedSidePlankWithKneeCircle;
      case 78:
        return PlankExerciseName.sidePlankWithKneeTuck;
      case 79:
        return PlankExerciseName.weightedSidePlankWithKneeTuck;
      case 80:
        return PlankExerciseName.sidePlankWithLegLift;
      case 81:
        return PlankExerciseName.weightedSidePlankWithLegLift;
      case 82:
        return PlankExerciseName.sidePlankWithReachUnder;
      case 83:
        return PlankExerciseName.weightedSidePlankWithReachUnder;
      case 84:
        return PlankExerciseName.singleLegElevatedFeetPlank;
      case 85:
        return PlankExerciseName.weightedSingleLegElevatedFeetPlank;
      case 86:
        return PlankExerciseName.singleLegFlexAndExtend;
      case 87:
        return PlankExerciseName.weightedSingleLegFlexAndExtend;
      case 88:
        return PlankExerciseName.singleLegSidePlank;
      case 89:
        return PlankExerciseName.weightedSingleLegSidePlank;
      case 90:
        return PlankExerciseName.spidermanPlank;
      case 91:
        return PlankExerciseName.weightedSpidermanPlank;
      case 92:
        return PlankExerciseName.straightArmPlank;
      case 93:
        return PlankExerciseName.weightedStraightArmPlank;
      case 94:
        return PlankExerciseName.straightArmPlankWithShoulderTouch;
      case 95:
        return PlankExerciseName.weightedStraightArmPlankWithShoulderTouch;
      case 96:
        return PlankExerciseName.swissBallPlank;
      case 97:
        return PlankExerciseName.weightedSwissBallPlank;
      case 98:
        return PlankExerciseName.swissBallPlankLegLift;
      case 99:
        return PlankExerciseName.weightedSwissBallPlankLegLift;
      case 100:
        return PlankExerciseName.swissBallPlankLegLiftAndHold;
      case 101:
        return PlankExerciseName.swissBallPlankWithFeetOnBench;
      case 102:
        return PlankExerciseName.weightedSwissBallPlankWithFeetOnBench;
      case 103:
        return PlankExerciseName.swissBallProneJackknife;
      case 104:
        return PlankExerciseName.weightedSwissBallProneJackknife;
      case 105:
        return PlankExerciseName.swissBallSidePlank;
      case 106:
        return PlankExerciseName.weightedSwissBallSidePlank;
      case 107:
        return PlankExerciseName.threeWayPlank;
      case 108:
        return PlankExerciseName.weightedThreeWayPlank;
      case 109:
        return PlankExerciseName.towelPlankAndKneeIn;
      case 110:
        return PlankExerciseName.weightedTowelPlankAndKneeIn;
      case 111:
        return PlankExerciseName.tStabilization;
      case 112:
        return PlankExerciseName.weightedTStabilization;
      case 113:
        return PlankExerciseName.turkishGetUpToSidePlank;
      case 114:
        return PlankExerciseName.weightedTurkishGetUpToSidePlank;
      case 115:
        return PlankExerciseName.twoPointPlank;
      case 116:
        return PlankExerciseName.weightedTwoPointPlank;
      case 117:
        return PlankExerciseName.weightedPlank;
      case 118:
        return PlankExerciseName.wideStancePlankWithDiagonalArmLift;
      case 119:
        return PlankExerciseName.weightedWideStancePlankWithDiagonalArmLift;
      case 120:
        return PlankExerciseName.wideStancePlankWithDiagonalLegLift;
      case 121:
        return PlankExerciseName.weightedWideStancePlankWithDiagonalLegLift;
      case 122:
        return PlankExerciseName.wideStancePlankWithLegLift;
      case 123:
        return PlankExerciseName.weightedWideStancePlankWithLegLift;
      case 124:
        return PlankExerciseName.wideStancePlankWithOppositeArmAndLegLift;
      case 125:
        return PlankExerciseName.weightedMountainClimberWithHandsOnBench;
      case 126:
        return PlankExerciseName.weightedSwissBallPlankLegLiftAndHold;
      case 127:
        return PlankExerciseName
            .weightedWideStancePlankWithOppositeArmAndLegLift;
      case 128:
        return PlankExerciseName.plankWithFeetOnSwissBall;
      case 129:
        return PlankExerciseName.sidePlankToPlankWithReachUnder;
      case 130:
        return PlankExerciseName.bridgeWithGluteLowerLift;
      case 131:
        return PlankExerciseName.bridgeOneLegBridge;
      case 132:
        return PlankExerciseName.plankWithArmVariations;
      case 133:
        return PlankExerciseName.plankWithLegLift;
      case 134:
        return PlankExerciseName.reversePlankWithLegPull;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum PlyoExerciseName {
  alternatingJumpLunge,
  weightedAlternatingJumpLunge,
  barbellJumpSquat,
  bodyWeightJumpSquat,
  weightedJumpSquat,
  crossKneeStrike,
  weightedCrossKneeStrike,
  depthJump,
  weightedDepthJump,
  dumbbellJumpSquat,
  dumbbellSplitJump,
  frontKneeStrike,
  weightedFrontKneeStrike,
  highBoxJump,
  weightedHighBoxJump,
  isometricExplosiveBodyWeightJumpSquat,
  weightedIsometricExplosiveJumpSquat,
  lateralLeapAndHop,
  weightedLateralLeapAndHop,
  lateralPlyoSquats,
  weightedLateralPlyoSquats,
  lateralSlide,
  weightedLateralSlide,
  medicineBallOverheadThrows,
  medicineBallSideThrow,
  medicineBallSlam,
  sideToSideMedicineBallThrows,
  sideToSideShuffleJump,
  weightedSideToSideShuffleJump,
  squatJumpOntoBox,
  weightedSquatJumpOntoBox,
  squatJumpsInAndOut,
  weightedSquatJumpsInAndOut
}

extension PlyoExerciseNameExt on PlyoExerciseName {
  int get value {
    switch (this) {
      case PlyoExerciseName.alternatingJumpLunge:
        return 0;
      case PlyoExerciseName.weightedAlternatingJumpLunge:
        return 1;
      case PlyoExerciseName.barbellJumpSquat:
        return 2;
      case PlyoExerciseName.bodyWeightJumpSquat:
        return 3;
      case PlyoExerciseName.weightedJumpSquat:
        return 4;
      case PlyoExerciseName.crossKneeStrike:
        return 5;
      case PlyoExerciseName.weightedCrossKneeStrike:
        return 6;
      case PlyoExerciseName.depthJump:
        return 7;
      case PlyoExerciseName.weightedDepthJump:
        return 8;
      case PlyoExerciseName.dumbbellJumpSquat:
        return 9;
      case PlyoExerciseName.dumbbellSplitJump:
        return 10;
      case PlyoExerciseName.frontKneeStrike:
        return 11;
      case PlyoExerciseName.weightedFrontKneeStrike:
        return 12;
      case PlyoExerciseName.highBoxJump:
        return 13;
      case PlyoExerciseName.weightedHighBoxJump:
        return 14;
      case PlyoExerciseName.isometricExplosiveBodyWeightJumpSquat:
        return 15;
      case PlyoExerciseName.weightedIsometricExplosiveJumpSquat:
        return 16;
      case PlyoExerciseName.lateralLeapAndHop:
        return 17;
      case PlyoExerciseName.weightedLateralLeapAndHop:
        return 18;
      case PlyoExerciseName.lateralPlyoSquats:
        return 19;
      case PlyoExerciseName.weightedLateralPlyoSquats:
        return 20;
      case PlyoExerciseName.lateralSlide:
        return 21;
      case PlyoExerciseName.weightedLateralSlide:
        return 22;
      case PlyoExerciseName.medicineBallOverheadThrows:
        return 23;
      case PlyoExerciseName.medicineBallSideThrow:
        return 24;
      case PlyoExerciseName.medicineBallSlam:
        return 25;
      case PlyoExerciseName.sideToSideMedicineBallThrows:
        return 26;
      case PlyoExerciseName.sideToSideShuffleJump:
        return 27;
      case PlyoExerciseName.weightedSideToSideShuffleJump:
        return 28;
      case PlyoExerciseName.squatJumpOntoBox:
        return 29;
      case PlyoExerciseName.weightedSquatJumpOntoBox:
        return 30;
      case PlyoExerciseName.squatJumpsInAndOut:
        return 31;
      case PlyoExerciseName.weightedSquatJumpsInAndOut:
        return 32;
    }
  }

  static PlyoExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return PlyoExerciseName.alternatingJumpLunge;
      case 1:
        return PlyoExerciseName.weightedAlternatingJumpLunge;
      case 2:
        return PlyoExerciseName.barbellJumpSquat;
      case 3:
        return PlyoExerciseName.bodyWeightJumpSquat;
      case 4:
        return PlyoExerciseName.weightedJumpSquat;
      case 5:
        return PlyoExerciseName.crossKneeStrike;
      case 6:
        return PlyoExerciseName.weightedCrossKneeStrike;
      case 7:
        return PlyoExerciseName.depthJump;
      case 8:
        return PlyoExerciseName.weightedDepthJump;
      case 9:
        return PlyoExerciseName.dumbbellJumpSquat;
      case 10:
        return PlyoExerciseName.dumbbellSplitJump;
      case 11:
        return PlyoExerciseName.frontKneeStrike;
      case 12:
        return PlyoExerciseName.weightedFrontKneeStrike;
      case 13:
        return PlyoExerciseName.highBoxJump;
      case 14:
        return PlyoExerciseName.weightedHighBoxJump;
      case 15:
        return PlyoExerciseName.isometricExplosiveBodyWeightJumpSquat;
      case 16:
        return PlyoExerciseName.weightedIsometricExplosiveJumpSquat;
      case 17:
        return PlyoExerciseName.lateralLeapAndHop;
      case 18:
        return PlyoExerciseName.weightedLateralLeapAndHop;
      case 19:
        return PlyoExerciseName.lateralPlyoSquats;
      case 20:
        return PlyoExerciseName.weightedLateralPlyoSquats;
      case 21:
        return PlyoExerciseName.lateralSlide;
      case 22:
        return PlyoExerciseName.weightedLateralSlide;
      case 23:
        return PlyoExerciseName.medicineBallOverheadThrows;
      case 24:
        return PlyoExerciseName.medicineBallSideThrow;
      case 25:
        return PlyoExerciseName.medicineBallSlam;
      case 26:
        return PlyoExerciseName.sideToSideMedicineBallThrows;
      case 27:
        return PlyoExerciseName.sideToSideShuffleJump;
      case 28:
        return PlyoExerciseName.weightedSideToSideShuffleJump;
      case 29:
        return PlyoExerciseName.squatJumpOntoBox;
      case 30:
        return PlyoExerciseName.weightedSquatJumpOntoBox;
      case 31:
        return PlyoExerciseName.squatJumpsInAndOut;
      case 32:
        return PlyoExerciseName.weightedSquatJumpsInAndOut;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum PullUpExerciseName {
  bandedPullUps,
  n30DegreeLatPulldown,
  bandAssistedChinUp,
  closeGripChinUp,
  weightedCloseGripChinUp,
  closeGripLatPulldown,
  crossoverChinUp,
  weightedCrossoverChinUp,
  ezBarPullover,
  hangingHurdle,
  weightedHangingHurdle,
  kneelingLatPulldown,
  kneelingUnderhandGripLatPulldown,
  latPulldown,
  mixedGripChinUp,
  weightedMixedGripChinUp,
  mixedGripPullUp,
  weightedMixedGripPullUp,
  reverseGripPulldown,
  standingCablePullover,
  straightArmPulldown,
  swissBallEzBarPullover,
  towelPullUp,
  weightedTowelPullUp,
  weightedPullUp,
  wideGripLatPulldown,
  wideGripPullUp,
  weightedWideGripPullUp,
  burpeePullUp,
  weightedBurpeePullUp,
  jumpingPullUps,
  weightedJumpingPullUps,
  kippingPullUp,
  weightedKippingPullUp,
  lPullUp,
  weightedLPullUp,
  suspendedChinUp,
  weightedSuspendedChinUp,
  pullUp
}

extension PullUpExerciseNameExt on PullUpExerciseName {
  int get value {
    switch (this) {
      case PullUpExerciseName.bandedPullUps:
        return 0;
      case PullUpExerciseName.n30DegreeLatPulldown:
        return 1;
      case PullUpExerciseName.bandAssistedChinUp:
        return 2;
      case PullUpExerciseName.closeGripChinUp:
        return 3;
      case PullUpExerciseName.weightedCloseGripChinUp:
        return 4;
      case PullUpExerciseName.closeGripLatPulldown:
        return 5;
      case PullUpExerciseName.crossoverChinUp:
        return 6;
      case PullUpExerciseName.weightedCrossoverChinUp:
        return 7;
      case PullUpExerciseName.ezBarPullover:
        return 8;
      case PullUpExerciseName.hangingHurdle:
        return 9;
      case PullUpExerciseName.weightedHangingHurdle:
        return 10;
      case PullUpExerciseName.kneelingLatPulldown:
        return 11;
      case PullUpExerciseName.kneelingUnderhandGripLatPulldown:
        return 12;
      case PullUpExerciseName.latPulldown:
        return 13;
      case PullUpExerciseName.mixedGripChinUp:
        return 14;
      case PullUpExerciseName.weightedMixedGripChinUp:
        return 15;
      case PullUpExerciseName.mixedGripPullUp:
        return 16;
      case PullUpExerciseName.weightedMixedGripPullUp:
        return 17;
      case PullUpExerciseName.reverseGripPulldown:
        return 18;
      case PullUpExerciseName.standingCablePullover:
        return 19;
      case PullUpExerciseName.straightArmPulldown:
        return 20;
      case PullUpExerciseName.swissBallEzBarPullover:
        return 21;
      case PullUpExerciseName.towelPullUp:
        return 22;
      case PullUpExerciseName.weightedTowelPullUp:
        return 23;
      case PullUpExerciseName.weightedPullUp:
        return 24;
      case PullUpExerciseName.wideGripLatPulldown:
        return 25;
      case PullUpExerciseName.wideGripPullUp:
        return 26;
      case PullUpExerciseName.weightedWideGripPullUp:
        return 27;
      case PullUpExerciseName.burpeePullUp:
        return 28;
      case PullUpExerciseName.weightedBurpeePullUp:
        return 29;
      case PullUpExerciseName.jumpingPullUps:
        return 30;
      case PullUpExerciseName.weightedJumpingPullUps:
        return 31;
      case PullUpExerciseName.kippingPullUp:
        return 32;
      case PullUpExerciseName.weightedKippingPullUp:
        return 33;
      case PullUpExerciseName.lPullUp:
        return 34;
      case PullUpExerciseName.weightedLPullUp:
        return 35;
      case PullUpExerciseName.suspendedChinUp:
        return 36;
      case PullUpExerciseName.weightedSuspendedChinUp:
        return 37;
      case PullUpExerciseName.pullUp:
        return 38;
    }
  }

  static PullUpExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return PullUpExerciseName.bandedPullUps;
      case 1:
        return PullUpExerciseName.n30DegreeLatPulldown;
      case 2:
        return PullUpExerciseName.bandAssistedChinUp;
      case 3:
        return PullUpExerciseName.closeGripChinUp;
      case 4:
        return PullUpExerciseName.weightedCloseGripChinUp;
      case 5:
        return PullUpExerciseName.closeGripLatPulldown;
      case 6:
        return PullUpExerciseName.crossoverChinUp;
      case 7:
        return PullUpExerciseName.weightedCrossoverChinUp;
      case 8:
        return PullUpExerciseName.ezBarPullover;
      case 9:
        return PullUpExerciseName.hangingHurdle;
      case 10:
        return PullUpExerciseName.weightedHangingHurdle;
      case 11:
        return PullUpExerciseName.kneelingLatPulldown;
      case 12:
        return PullUpExerciseName.kneelingUnderhandGripLatPulldown;
      case 13:
        return PullUpExerciseName.latPulldown;
      case 14:
        return PullUpExerciseName.mixedGripChinUp;
      case 15:
        return PullUpExerciseName.weightedMixedGripChinUp;
      case 16:
        return PullUpExerciseName.mixedGripPullUp;
      case 17:
        return PullUpExerciseName.weightedMixedGripPullUp;
      case 18:
        return PullUpExerciseName.reverseGripPulldown;
      case 19:
        return PullUpExerciseName.standingCablePullover;
      case 20:
        return PullUpExerciseName.straightArmPulldown;
      case 21:
        return PullUpExerciseName.swissBallEzBarPullover;
      case 22:
        return PullUpExerciseName.towelPullUp;
      case 23:
        return PullUpExerciseName.weightedTowelPullUp;
      case 24:
        return PullUpExerciseName.weightedPullUp;
      case 25:
        return PullUpExerciseName.wideGripLatPulldown;
      case 26:
        return PullUpExerciseName.wideGripPullUp;
      case 27:
        return PullUpExerciseName.weightedWideGripPullUp;
      case 28:
        return PullUpExerciseName.burpeePullUp;
      case 29:
        return PullUpExerciseName.weightedBurpeePullUp;
      case 30:
        return PullUpExerciseName.jumpingPullUps;
      case 31:
        return PullUpExerciseName.weightedJumpingPullUps;
      case 32:
        return PullUpExerciseName.kippingPullUp;
      case 33:
        return PullUpExerciseName.weightedKippingPullUp;
      case 34:
        return PullUpExerciseName.lPullUp;
      case 35:
        return PullUpExerciseName.weightedLPullUp;
      case 36:
        return PullUpExerciseName.suspendedChinUp;
      case 37:
        return PullUpExerciseName.weightedSuspendedChinUp;
      case 38:
        return PullUpExerciseName.pullUp;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum PushUpExerciseName {
  chestPressWithBand,
  alternatingStaggeredPushUp,
  weightedAlternatingStaggeredPushUp,
  alternatingHandsMedicineBallPushUp,
  weightedAlternatingHandsMedicineBallPushUp,
  bosuBallPushUp,
  weightedBosuBallPushUp,
  clappingPushUp,
  weightedClappingPushUp,
  closeGripMedicineBallPushUp,
  weightedCloseGripMedicineBallPushUp,
  closeHandsPushUp,
  weightedCloseHandsPushUp,
  declinePushUp,
  weightedDeclinePushUp,
  diamondPushUp,
  weightedDiamondPushUp,
  explosiveCrossoverPushUp,
  weightedExplosiveCrossoverPushUp,
  explosivePushUp,
  weightedExplosivePushUp,
  feetElevatedSideToSidePushUp,
  weightedFeetElevatedSideToSidePushUp,
  handReleasePushUp,
  weightedHandReleasePushUp,
  handstandPushUp,
  weightedHandstandPushUp,
  inclinePushUp,
  weightedInclinePushUp,
  isometricExplosivePushUp,
  weightedIsometricExplosivePushUp,
  judoPushUp,
  weightedJudoPushUp,
  kneelingPushUp,
  weightedKneelingPushUp,
  medicineBallChestPass,
  medicineBallPushUp,
  weightedMedicineBallPushUp,
  oneArmPushUp,
  weightedOneArmPushUp,
  weightedPushUp,
  pushUpAndRow,
  weightedPushUpAndRow,
  pushUpPlus,
  weightedPushUpPlus,
  pushUpWithFeetOnSwissBall,
  weightedPushUpWithFeetOnSwissBall,
  pushUpWithOneHandOnMedicineBall,
  weightedPushUpWithOneHandOnMedicineBall,
  shoulderPushUp,
  weightedShoulderPushUp,
  singleArmMedicineBallPushUp,
  weightedSingleArmMedicineBallPushUp,
  spidermanPushUp,
  weightedSpidermanPushUp,
  stackedFeetPushUp,
  weightedStackedFeetPushUp,
  staggeredHandsPushUp,
  weightedStaggeredHandsPushUp,
  suspendedPushUp,
  weightedSuspendedPushUp,
  swissBallPushUp,
  weightedSwissBallPushUp,
  swissBallPushUpPlus,
  weightedSwissBallPushUpPlus,
  tPushUp,
  weightedTPushUp,
  tripleStopPushUp,
  weightedTripleStopPushUp,
  wideHandsPushUp,
  weightedWideHandsPushUp,
  paralletteHandstandPushUp,
  weightedParalletteHandstandPushUp,
  ringHandstandPushUp,
  weightedRingHandstandPushUp,
  ringPushUp,
  weightedRingPushUp,
  pushUp,
  pilatesPushup
}

extension PushUpExerciseNameExt on PushUpExerciseName {
  int get value {
    switch (this) {
      case PushUpExerciseName.chestPressWithBand:
        return 0;
      case PushUpExerciseName.alternatingStaggeredPushUp:
        return 1;
      case PushUpExerciseName.weightedAlternatingStaggeredPushUp:
        return 2;
      case PushUpExerciseName.alternatingHandsMedicineBallPushUp:
        return 3;
      case PushUpExerciseName.weightedAlternatingHandsMedicineBallPushUp:
        return 4;
      case PushUpExerciseName.bosuBallPushUp:
        return 5;
      case PushUpExerciseName.weightedBosuBallPushUp:
        return 6;
      case PushUpExerciseName.clappingPushUp:
        return 7;
      case PushUpExerciseName.weightedClappingPushUp:
        return 8;
      case PushUpExerciseName.closeGripMedicineBallPushUp:
        return 9;
      case PushUpExerciseName.weightedCloseGripMedicineBallPushUp:
        return 10;
      case PushUpExerciseName.closeHandsPushUp:
        return 11;
      case PushUpExerciseName.weightedCloseHandsPushUp:
        return 12;
      case PushUpExerciseName.declinePushUp:
        return 13;
      case PushUpExerciseName.weightedDeclinePushUp:
        return 14;
      case PushUpExerciseName.diamondPushUp:
        return 15;
      case PushUpExerciseName.weightedDiamondPushUp:
        return 16;
      case PushUpExerciseName.explosiveCrossoverPushUp:
        return 17;
      case PushUpExerciseName.weightedExplosiveCrossoverPushUp:
        return 18;
      case PushUpExerciseName.explosivePushUp:
        return 19;
      case PushUpExerciseName.weightedExplosivePushUp:
        return 20;
      case PushUpExerciseName.feetElevatedSideToSidePushUp:
        return 21;
      case PushUpExerciseName.weightedFeetElevatedSideToSidePushUp:
        return 22;
      case PushUpExerciseName.handReleasePushUp:
        return 23;
      case PushUpExerciseName.weightedHandReleasePushUp:
        return 24;
      case PushUpExerciseName.handstandPushUp:
        return 25;
      case PushUpExerciseName.weightedHandstandPushUp:
        return 26;
      case PushUpExerciseName.inclinePushUp:
        return 27;
      case PushUpExerciseName.weightedInclinePushUp:
        return 28;
      case PushUpExerciseName.isometricExplosivePushUp:
        return 29;
      case PushUpExerciseName.weightedIsometricExplosivePushUp:
        return 30;
      case PushUpExerciseName.judoPushUp:
        return 31;
      case PushUpExerciseName.weightedJudoPushUp:
        return 32;
      case PushUpExerciseName.kneelingPushUp:
        return 33;
      case PushUpExerciseName.weightedKneelingPushUp:
        return 34;
      case PushUpExerciseName.medicineBallChestPass:
        return 35;
      case PushUpExerciseName.medicineBallPushUp:
        return 36;
      case PushUpExerciseName.weightedMedicineBallPushUp:
        return 37;
      case PushUpExerciseName.oneArmPushUp:
        return 38;
      case PushUpExerciseName.weightedOneArmPushUp:
        return 39;
      case PushUpExerciseName.weightedPushUp:
        return 40;
      case PushUpExerciseName.pushUpAndRow:
        return 41;
      case PushUpExerciseName.weightedPushUpAndRow:
        return 42;
      case PushUpExerciseName.pushUpPlus:
        return 43;
      case PushUpExerciseName.weightedPushUpPlus:
        return 44;
      case PushUpExerciseName.pushUpWithFeetOnSwissBall:
        return 45;
      case PushUpExerciseName.weightedPushUpWithFeetOnSwissBall:
        return 46;
      case PushUpExerciseName.pushUpWithOneHandOnMedicineBall:
        return 47;
      case PushUpExerciseName.weightedPushUpWithOneHandOnMedicineBall:
        return 48;
      case PushUpExerciseName.shoulderPushUp:
        return 49;
      case PushUpExerciseName.weightedShoulderPushUp:
        return 50;
      case PushUpExerciseName.singleArmMedicineBallPushUp:
        return 51;
      case PushUpExerciseName.weightedSingleArmMedicineBallPushUp:
        return 52;
      case PushUpExerciseName.spidermanPushUp:
        return 53;
      case PushUpExerciseName.weightedSpidermanPushUp:
        return 54;
      case PushUpExerciseName.stackedFeetPushUp:
        return 55;
      case PushUpExerciseName.weightedStackedFeetPushUp:
        return 56;
      case PushUpExerciseName.staggeredHandsPushUp:
        return 57;
      case PushUpExerciseName.weightedStaggeredHandsPushUp:
        return 58;
      case PushUpExerciseName.suspendedPushUp:
        return 59;
      case PushUpExerciseName.weightedSuspendedPushUp:
        return 60;
      case PushUpExerciseName.swissBallPushUp:
        return 61;
      case PushUpExerciseName.weightedSwissBallPushUp:
        return 62;
      case PushUpExerciseName.swissBallPushUpPlus:
        return 63;
      case PushUpExerciseName.weightedSwissBallPushUpPlus:
        return 64;
      case PushUpExerciseName.tPushUp:
        return 65;
      case PushUpExerciseName.weightedTPushUp:
        return 66;
      case PushUpExerciseName.tripleStopPushUp:
        return 67;
      case PushUpExerciseName.weightedTripleStopPushUp:
        return 68;
      case PushUpExerciseName.wideHandsPushUp:
        return 69;
      case PushUpExerciseName.weightedWideHandsPushUp:
        return 70;
      case PushUpExerciseName.paralletteHandstandPushUp:
        return 71;
      case PushUpExerciseName.weightedParalletteHandstandPushUp:
        return 72;
      case PushUpExerciseName.ringHandstandPushUp:
        return 73;
      case PushUpExerciseName.weightedRingHandstandPushUp:
        return 74;
      case PushUpExerciseName.ringPushUp:
        return 75;
      case PushUpExerciseName.weightedRingPushUp:
        return 76;
      case PushUpExerciseName.pushUp:
        return 77;
      case PushUpExerciseName.pilatesPushup:
        return 78;
    }
  }

  static PushUpExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return PushUpExerciseName.chestPressWithBand;
      case 1:
        return PushUpExerciseName.alternatingStaggeredPushUp;
      case 2:
        return PushUpExerciseName.weightedAlternatingStaggeredPushUp;
      case 3:
        return PushUpExerciseName.alternatingHandsMedicineBallPushUp;
      case 4:
        return PushUpExerciseName.weightedAlternatingHandsMedicineBallPushUp;
      case 5:
        return PushUpExerciseName.bosuBallPushUp;
      case 6:
        return PushUpExerciseName.weightedBosuBallPushUp;
      case 7:
        return PushUpExerciseName.clappingPushUp;
      case 8:
        return PushUpExerciseName.weightedClappingPushUp;
      case 9:
        return PushUpExerciseName.closeGripMedicineBallPushUp;
      case 10:
        return PushUpExerciseName.weightedCloseGripMedicineBallPushUp;
      case 11:
        return PushUpExerciseName.closeHandsPushUp;
      case 12:
        return PushUpExerciseName.weightedCloseHandsPushUp;
      case 13:
        return PushUpExerciseName.declinePushUp;
      case 14:
        return PushUpExerciseName.weightedDeclinePushUp;
      case 15:
        return PushUpExerciseName.diamondPushUp;
      case 16:
        return PushUpExerciseName.weightedDiamondPushUp;
      case 17:
        return PushUpExerciseName.explosiveCrossoverPushUp;
      case 18:
        return PushUpExerciseName.weightedExplosiveCrossoverPushUp;
      case 19:
        return PushUpExerciseName.explosivePushUp;
      case 20:
        return PushUpExerciseName.weightedExplosivePushUp;
      case 21:
        return PushUpExerciseName.feetElevatedSideToSidePushUp;
      case 22:
        return PushUpExerciseName.weightedFeetElevatedSideToSidePushUp;
      case 23:
        return PushUpExerciseName.handReleasePushUp;
      case 24:
        return PushUpExerciseName.weightedHandReleasePushUp;
      case 25:
        return PushUpExerciseName.handstandPushUp;
      case 26:
        return PushUpExerciseName.weightedHandstandPushUp;
      case 27:
        return PushUpExerciseName.inclinePushUp;
      case 28:
        return PushUpExerciseName.weightedInclinePushUp;
      case 29:
        return PushUpExerciseName.isometricExplosivePushUp;
      case 30:
        return PushUpExerciseName.weightedIsometricExplosivePushUp;
      case 31:
        return PushUpExerciseName.judoPushUp;
      case 32:
        return PushUpExerciseName.weightedJudoPushUp;
      case 33:
        return PushUpExerciseName.kneelingPushUp;
      case 34:
        return PushUpExerciseName.weightedKneelingPushUp;
      case 35:
        return PushUpExerciseName.medicineBallChestPass;
      case 36:
        return PushUpExerciseName.medicineBallPushUp;
      case 37:
        return PushUpExerciseName.weightedMedicineBallPushUp;
      case 38:
        return PushUpExerciseName.oneArmPushUp;
      case 39:
        return PushUpExerciseName.weightedOneArmPushUp;
      case 40:
        return PushUpExerciseName.weightedPushUp;
      case 41:
        return PushUpExerciseName.pushUpAndRow;
      case 42:
        return PushUpExerciseName.weightedPushUpAndRow;
      case 43:
        return PushUpExerciseName.pushUpPlus;
      case 44:
        return PushUpExerciseName.weightedPushUpPlus;
      case 45:
        return PushUpExerciseName.pushUpWithFeetOnSwissBall;
      case 46:
        return PushUpExerciseName.weightedPushUpWithFeetOnSwissBall;
      case 47:
        return PushUpExerciseName.pushUpWithOneHandOnMedicineBall;
      case 48:
        return PushUpExerciseName.weightedPushUpWithOneHandOnMedicineBall;
      case 49:
        return PushUpExerciseName.shoulderPushUp;
      case 50:
        return PushUpExerciseName.weightedShoulderPushUp;
      case 51:
        return PushUpExerciseName.singleArmMedicineBallPushUp;
      case 52:
        return PushUpExerciseName.weightedSingleArmMedicineBallPushUp;
      case 53:
        return PushUpExerciseName.spidermanPushUp;
      case 54:
        return PushUpExerciseName.weightedSpidermanPushUp;
      case 55:
        return PushUpExerciseName.stackedFeetPushUp;
      case 56:
        return PushUpExerciseName.weightedStackedFeetPushUp;
      case 57:
        return PushUpExerciseName.staggeredHandsPushUp;
      case 58:
        return PushUpExerciseName.weightedStaggeredHandsPushUp;
      case 59:
        return PushUpExerciseName.suspendedPushUp;
      case 60:
        return PushUpExerciseName.weightedSuspendedPushUp;
      case 61:
        return PushUpExerciseName.swissBallPushUp;
      case 62:
        return PushUpExerciseName.weightedSwissBallPushUp;
      case 63:
        return PushUpExerciseName.swissBallPushUpPlus;
      case 64:
        return PushUpExerciseName.weightedSwissBallPushUpPlus;
      case 65:
        return PushUpExerciseName.tPushUp;
      case 66:
        return PushUpExerciseName.weightedTPushUp;
      case 67:
        return PushUpExerciseName.tripleStopPushUp;
      case 68:
        return PushUpExerciseName.weightedTripleStopPushUp;
      case 69:
        return PushUpExerciseName.wideHandsPushUp;
      case 70:
        return PushUpExerciseName.weightedWideHandsPushUp;
      case 71:
        return PushUpExerciseName.paralletteHandstandPushUp;
      case 72:
        return PushUpExerciseName.weightedParalletteHandstandPushUp;
      case 73:
        return PushUpExerciseName.ringHandstandPushUp;
      case 74:
        return PushUpExerciseName.weightedRingHandstandPushUp;
      case 75:
        return PushUpExerciseName.ringPushUp;
      case 76:
        return PushUpExerciseName.weightedRingPushUp;
      case 77:
        return PushUpExerciseName.pushUp;
      case 78:
        return PushUpExerciseName.pilatesPushup;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum RowExerciseName {
  barbellStraightLegDeadliftToRow,
  cableRowStanding,
  dumbbellRow,
  elevatedFeetInvertedRow,
  weightedElevatedFeetInvertedRow,
  facePull,
  facePullWithExternalRotation,
  invertedRowWithFeetOnSwissBall,
  weightedInvertedRowWithFeetOnSwissBall,
  kettlebellRow,
  modifiedInvertedRow,
  weightedModifiedInvertedRow,
  neutralGripAlternatingDumbbellRow,
  oneArmBentOverRow,
  oneLeggedDumbbellRow,
  renegadeRow,
  reverseGripBarbellRow,
  ropeHandleCableRow,
  seatedCableRow,
  seatedDumbbellRow,
  singleArmCableRow,
  singleArmCableRowAndRotation,
  singleArmInvertedRow,
  weightedSingleArmInvertedRow,
  singleArmNeutralGripDumbbellRow,
  singleArmNeutralGripDumbbellRowAndRotation,
  suspendedInvertedRow,
  weightedSuspendedInvertedRow,
  tBarRow,
  towelGripInvertedRow,
  weightedTowelGripInvertedRow,
  underhandGripCableRow,
  vGripCableRow,
  wideGripSeatedCableRow
}

extension RowExerciseNameExt on RowExerciseName {
  int get value {
    switch (this) {
      case RowExerciseName.barbellStraightLegDeadliftToRow:
        return 0;
      case RowExerciseName.cableRowStanding:
        return 1;
      case RowExerciseName.dumbbellRow:
        return 2;
      case RowExerciseName.elevatedFeetInvertedRow:
        return 3;
      case RowExerciseName.weightedElevatedFeetInvertedRow:
        return 4;
      case RowExerciseName.facePull:
        return 5;
      case RowExerciseName.facePullWithExternalRotation:
        return 6;
      case RowExerciseName.invertedRowWithFeetOnSwissBall:
        return 7;
      case RowExerciseName.weightedInvertedRowWithFeetOnSwissBall:
        return 8;
      case RowExerciseName.kettlebellRow:
        return 9;
      case RowExerciseName.modifiedInvertedRow:
        return 10;
      case RowExerciseName.weightedModifiedInvertedRow:
        return 11;
      case RowExerciseName.neutralGripAlternatingDumbbellRow:
        return 12;
      case RowExerciseName.oneArmBentOverRow:
        return 13;
      case RowExerciseName.oneLeggedDumbbellRow:
        return 14;
      case RowExerciseName.renegadeRow:
        return 15;
      case RowExerciseName.reverseGripBarbellRow:
        return 16;
      case RowExerciseName.ropeHandleCableRow:
        return 17;
      case RowExerciseName.seatedCableRow:
        return 18;
      case RowExerciseName.seatedDumbbellRow:
        return 19;
      case RowExerciseName.singleArmCableRow:
        return 20;
      case RowExerciseName.singleArmCableRowAndRotation:
        return 21;
      case RowExerciseName.singleArmInvertedRow:
        return 22;
      case RowExerciseName.weightedSingleArmInvertedRow:
        return 23;
      case RowExerciseName.singleArmNeutralGripDumbbellRow:
        return 24;
      case RowExerciseName.singleArmNeutralGripDumbbellRowAndRotation:
        return 25;
      case RowExerciseName.suspendedInvertedRow:
        return 26;
      case RowExerciseName.weightedSuspendedInvertedRow:
        return 27;
      case RowExerciseName.tBarRow:
        return 28;
      case RowExerciseName.towelGripInvertedRow:
        return 29;
      case RowExerciseName.weightedTowelGripInvertedRow:
        return 30;
      case RowExerciseName.underhandGripCableRow:
        return 31;
      case RowExerciseName.vGripCableRow:
        return 32;
      case RowExerciseName.wideGripSeatedCableRow:
        return 33;
    }
  }

  static RowExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return RowExerciseName.barbellStraightLegDeadliftToRow;
      case 1:
        return RowExerciseName.cableRowStanding;
      case 2:
        return RowExerciseName.dumbbellRow;
      case 3:
        return RowExerciseName.elevatedFeetInvertedRow;
      case 4:
        return RowExerciseName.weightedElevatedFeetInvertedRow;
      case 5:
        return RowExerciseName.facePull;
      case 6:
        return RowExerciseName.facePullWithExternalRotation;
      case 7:
        return RowExerciseName.invertedRowWithFeetOnSwissBall;
      case 8:
        return RowExerciseName.weightedInvertedRowWithFeetOnSwissBall;
      case 9:
        return RowExerciseName.kettlebellRow;
      case 10:
        return RowExerciseName.modifiedInvertedRow;
      case 11:
        return RowExerciseName.weightedModifiedInvertedRow;
      case 12:
        return RowExerciseName.neutralGripAlternatingDumbbellRow;
      case 13:
        return RowExerciseName.oneArmBentOverRow;
      case 14:
        return RowExerciseName.oneLeggedDumbbellRow;
      case 15:
        return RowExerciseName.renegadeRow;
      case 16:
        return RowExerciseName.reverseGripBarbellRow;
      case 17:
        return RowExerciseName.ropeHandleCableRow;
      case 18:
        return RowExerciseName.seatedCableRow;
      case 19:
        return RowExerciseName.seatedDumbbellRow;
      case 20:
        return RowExerciseName.singleArmCableRow;
      case 21:
        return RowExerciseName.singleArmCableRowAndRotation;
      case 22:
        return RowExerciseName.singleArmInvertedRow;
      case 23:
        return RowExerciseName.weightedSingleArmInvertedRow;
      case 24:
        return RowExerciseName.singleArmNeutralGripDumbbellRow;
      case 25:
        return RowExerciseName.singleArmNeutralGripDumbbellRowAndRotation;
      case 26:
        return RowExerciseName.suspendedInvertedRow;
      case 27:
        return RowExerciseName.weightedSuspendedInvertedRow;
      case 28:
        return RowExerciseName.tBarRow;
      case 29:
        return RowExerciseName.towelGripInvertedRow;
      case 30:
        return RowExerciseName.weightedTowelGripInvertedRow;
      case 31:
        return RowExerciseName.underhandGripCableRow;
      case 32:
        return RowExerciseName.vGripCableRow;
      case 33:
        return RowExerciseName.wideGripSeatedCableRow;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ShoulderPressExerciseName {
  alternatingDumbbellShoulderPress,
  arnoldPress,
  barbellFrontSquatToPushPress,
  barbellPushPress,
  barbellShoulderPress,
  deadCurlPress,
  dumbbellAlternatingShoulderPressAndTwist,
  dumbbellHammerCurlToLungeToPress,
  dumbbellPushPress,
  floorInvertedShoulderPress,
  weightedFloorInvertedShoulderPress,
  invertedShoulderPress,
  weightedInvertedShoulderPress,
  oneArmPushPress,
  overheadBarbellPress,
  overheadDumbbellPress,
  seatedBarbellShoulderPress,
  seatedDumbbellShoulderPress,
  singleArmDumbbellShoulderPress,
  singleArmStepUpAndPress,
  smithMachineOverheadPress,
  splitStanceHammerCurlToPress,
  swissBallDumbbellShoulderPress,
  weightPlateFrontRaise
}

extension ShoulderPressExerciseNameExt on ShoulderPressExerciseName {
  int get value {
    switch (this) {
      case ShoulderPressExerciseName.alternatingDumbbellShoulderPress:
        return 0;
      case ShoulderPressExerciseName.arnoldPress:
        return 1;
      case ShoulderPressExerciseName.barbellFrontSquatToPushPress:
        return 2;
      case ShoulderPressExerciseName.barbellPushPress:
        return 3;
      case ShoulderPressExerciseName.barbellShoulderPress:
        return 4;
      case ShoulderPressExerciseName.deadCurlPress:
        return 5;
      case ShoulderPressExerciseName.dumbbellAlternatingShoulderPressAndTwist:
        return 6;
      case ShoulderPressExerciseName.dumbbellHammerCurlToLungeToPress:
        return 7;
      case ShoulderPressExerciseName.dumbbellPushPress:
        return 8;
      case ShoulderPressExerciseName.floorInvertedShoulderPress:
        return 9;
      case ShoulderPressExerciseName.weightedFloorInvertedShoulderPress:
        return 10;
      case ShoulderPressExerciseName.invertedShoulderPress:
        return 11;
      case ShoulderPressExerciseName.weightedInvertedShoulderPress:
        return 12;
      case ShoulderPressExerciseName.oneArmPushPress:
        return 13;
      case ShoulderPressExerciseName.overheadBarbellPress:
        return 14;
      case ShoulderPressExerciseName.overheadDumbbellPress:
        return 15;
      case ShoulderPressExerciseName.seatedBarbellShoulderPress:
        return 16;
      case ShoulderPressExerciseName.seatedDumbbellShoulderPress:
        return 17;
      case ShoulderPressExerciseName.singleArmDumbbellShoulderPress:
        return 18;
      case ShoulderPressExerciseName.singleArmStepUpAndPress:
        return 19;
      case ShoulderPressExerciseName.smithMachineOverheadPress:
        return 20;
      case ShoulderPressExerciseName.splitStanceHammerCurlToPress:
        return 21;
      case ShoulderPressExerciseName.swissBallDumbbellShoulderPress:
        return 22;
      case ShoulderPressExerciseName.weightPlateFrontRaise:
        return 23;
    }
  }

  static ShoulderPressExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return ShoulderPressExerciseName.alternatingDumbbellShoulderPress;
      case 1:
        return ShoulderPressExerciseName.arnoldPress;
      case 2:
        return ShoulderPressExerciseName.barbellFrontSquatToPushPress;
      case 3:
        return ShoulderPressExerciseName.barbellPushPress;
      case 4:
        return ShoulderPressExerciseName.barbellShoulderPress;
      case 5:
        return ShoulderPressExerciseName.deadCurlPress;
      case 6:
        return ShoulderPressExerciseName
            .dumbbellAlternatingShoulderPressAndTwist;
      case 7:
        return ShoulderPressExerciseName.dumbbellHammerCurlToLungeToPress;
      case 8:
        return ShoulderPressExerciseName.dumbbellPushPress;
      case 9:
        return ShoulderPressExerciseName.floorInvertedShoulderPress;
      case 10:
        return ShoulderPressExerciseName.weightedFloorInvertedShoulderPress;
      case 11:
        return ShoulderPressExerciseName.invertedShoulderPress;
      case 12:
        return ShoulderPressExerciseName.weightedInvertedShoulderPress;
      case 13:
        return ShoulderPressExerciseName.oneArmPushPress;
      case 14:
        return ShoulderPressExerciseName.overheadBarbellPress;
      case 15:
        return ShoulderPressExerciseName.overheadDumbbellPress;
      case 16:
        return ShoulderPressExerciseName.seatedBarbellShoulderPress;
      case 17:
        return ShoulderPressExerciseName.seatedDumbbellShoulderPress;
      case 18:
        return ShoulderPressExerciseName.singleArmDumbbellShoulderPress;
      case 19:
        return ShoulderPressExerciseName.singleArmStepUpAndPress;
      case 20:
        return ShoulderPressExerciseName.smithMachineOverheadPress;
      case 21:
        return ShoulderPressExerciseName.splitStanceHammerCurlToPress;
      case 22:
        return ShoulderPressExerciseName.swissBallDumbbellShoulderPress;
      case 23:
        return ShoulderPressExerciseName.weightPlateFrontRaise;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ShoulderStabilityExerciseName {
  n90DegreeCableExternalRotation,
  bandExternalRotation,
  bandInternalRotation,
  bentArmLateralRaiseAndExternalRotation,
  cableExternalRotation,
  dumbbellFacePullWithExternalRotation,
  floorIRaise,
  weightedFloorIRaise,
  floorTRaise,
  weightedFloorTRaise,
  floorYRaise,
  weightedFloorYRaise,
  inclineIRaise,
  weightedInclineIRaise,
  inclineLRaise,
  weightedInclineLRaise,
  inclineTRaise,
  weightedInclineTRaise,
  inclineWRaise,
  weightedInclineWRaise,
  inclineYRaise,
  weightedInclineYRaise,
  lyingExternalRotation,
  seatedDumbbellExternalRotation,
  standingLRaise,
  swissBallIRaise,
  weightedSwissBallIRaise,
  swissBallTRaise,
  weightedSwissBallTRaise,
  swissBallWRaise,
  weightedSwissBallWRaise,
  swissBallYRaise,
  weightedSwissBallYRaise
}

extension ShoulderStabilityExerciseNameExt on ShoulderStabilityExerciseName {
  int get value {
    switch (this) {
      case ShoulderStabilityExerciseName.n90DegreeCableExternalRotation:
        return 0;
      case ShoulderStabilityExerciseName.bandExternalRotation:
        return 1;
      case ShoulderStabilityExerciseName.bandInternalRotation:
        return 2;
      case ShoulderStabilityExerciseName.bentArmLateralRaiseAndExternalRotation:
        return 3;
      case ShoulderStabilityExerciseName.cableExternalRotation:
        return 4;
      case ShoulderStabilityExerciseName.dumbbellFacePullWithExternalRotation:
        return 5;
      case ShoulderStabilityExerciseName.floorIRaise:
        return 6;
      case ShoulderStabilityExerciseName.weightedFloorIRaise:
        return 7;
      case ShoulderStabilityExerciseName.floorTRaise:
        return 8;
      case ShoulderStabilityExerciseName.weightedFloorTRaise:
        return 9;
      case ShoulderStabilityExerciseName.floorYRaise:
        return 10;
      case ShoulderStabilityExerciseName.weightedFloorYRaise:
        return 11;
      case ShoulderStabilityExerciseName.inclineIRaise:
        return 12;
      case ShoulderStabilityExerciseName.weightedInclineIRaise:
        return 13;
      case ShoulderStabilityExerciseName.inclineLRaise:
        return 14;
      case ShoulderStabilityExerciseName.weightedInclineLRaise:
        return 15;
      case ShoulderStabilityExerciseName.inclineTRaise:
        return 16;
      case ShoulderStabilityExerciseName.weightedInclineTRaise:
        return 17;
      case ShoulderStabilityExerciseName.inclineWRaise:
        return 18;
      case ShoulderStabilityExerciseName.weightedInclineWRaise:
        return 19;
      case ShoulderStabilityExerciseName.inclineYRaise:
        return 20;
      case ShoulderStabilityExerciseName.weightedInclineYRaise:
        return 21;
      case ShoulderStabilityExerciseName.lyingExternalRotation:
        return 22;
      case ShoulderStabilityExerciseName.seatedDumbbellExternalRotation:
        return 23;
      case ShoulderStabilityExerciseName.standingLRaise:
        return 24;
      case ShoulderStabilityExerciseName.swissBallIRaise:
        return 25;
      case ShoulderStabilityExerciseName.weightedSwissBallIRaise:
        return 26;
      case ShoulderStabilityExerciseName.swissBallTRaise:
        return 27;
      case ShoulderStabilityExerciseName.weightedSwissBallTRaise:
        return 28;
      case ShoulderStabilityExerciseName.swissBallWRaise:
        return 29;
      case ShoulderStabilityExerciseName.weightedSwissBallWRaise:
        return 30;
      case ShoulderStabilityExerciseName.swissBallYRaise:
        return 31;
      case ShoulderStabilityExerciseName.weightedSwissBallYRaise:
        return 32;
    }
  }

  static ShoulderStabilityExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return ShoulderStabilityExerciseName.n90DegreeCableExternalRotation;
      case 1:
        return ShoulderStabilityExerciseName.bandExternalRotation;
      case 2:
        return ShoulderStabilityExerciseName.bandInternalRotation;
      case 3:
        return ShoulderStabilityExerciseName
            .bentArmLateralRaiseAndExternalRotation;
      case 4:
        return ShoulderStabilityExerciseName.cableExternalRotation;
      case 5:
        return ShoulderStabilityExerciseName
            .dumbbellFacePullWithExternalRotation;
      case 6:
        return ShoulderStabilityExerciseName.floorIRaise;
      case 7:
        return ShoulderStabilityExerciseName.weightedFloorIRaise;
      case 8:
        return ShoulderStabilityExerciseName.floorTRaise;
      case 9:
        return ShoulderStabilityExerciseName.weightedFloorTRaise;
      case 10:
        return ShoulderStabilityExerciseName.floorYRaise;
      case 11:
        return ShoulderStabilityExerciseName.weightedFloorYRaise;
      case 12:
        return ShoulderStabilityExerciseName.inclineIRaise;
      case 13:
        return ShoulderStabilityExerciseName.weightedInclineIRaise;
      case 14:
        return ShoulderStabilityExerciseName.inclineLRaise;
      case 15:
        return ShoulderStabilityExerciseName.weightedInclineLRaise;
      case 16:
        return ShoulderStabilityExerciseName.inclineTRaise;
      case 17:
        return ShoulderStabilityExerciseName.weightedInclineTRaise;
      case 18:
        return ShoulderStabilityExerciseName.inclineWRaise;
      case 19:
        return ShoulderStabilityExerciseName.weightedInclineWRaise;
      case 20:
        return ShoulderStabilityExerciseName.inclineYRaise;
      case 21:
        return ShoulderStabilityExerciseName.weightedInclineYRaise;
      case 22:
        return ShoulderStabilityExerciseName.lyingExternalRotation;
      case 23:
        return ShoulderStabilityExerciseName.seatedDumbbellExternalRotation;
      case 24:
        return ShoulderStabilityExerciseName.standingLRaise;
      case 25:
        return ShoulderStabilityExerciseName.swissBallIRaise;
      case 26:
        return ShoulderStabilityExerciseName.weightedSwissBallIRaise;
      case 27:
        return ShoulderStabilityExerciseName.swissBallTRaise;
      case 28:
        return ShoulderStabilityExerciseName.weightedSwissBallTRaise;
      case 29:
        return ShoulderStabilityExerciseName.swissBallWRaise;
      case 30:
        return ShoulderStabilityExerciseName.weightedSwissBallWRaise;
      case 31:
        return ShoulderStabilityExerciseName.swissBallYRaise;
      case 32:
        return ShoulderStabilityExerciseName.weightedSwissBallYRaise;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ShrugExerciseName {
  barbellJumpShrug,
  barbellShrug,
  barbellUprightRow,
  behindTheBackSmithMachineShrug,
  dumbbellJumpShrug,
  dumbbellShrug,
  dumbbellUprightRow,
  inclineDumbbellShrug,
  overheadBarbellShrug,
  overheadDumbbellShrug,
  scaptionAndShrug,
  scapularRetraction,
  serratusChairShrug,
  weightedSerratusChairShrug,
  serratusShrug,
  weightedSerratusShrug,
  wideGripJumpShrug
}

extension ShrugExerciseNameExt on ShrugExerciseName {
  int get value {
    switch (this) {
      case ShrugExerciseName.barbellJumpShrug:
        return 0;
      case ShrugExerciseName.barbellShrug:
        return 1;
      case ShrugExerciseName.barbellUprightRow:
        return 2;
      case ShrugExerciseName.behindTheBackSmithMachineShrug:
        return 3;
      case ShrugExerciseName.dumbbellJumpShrug:
        return 4;
      case ShrugExerciseName.dumbbellShrug:
        return 5;
      case ShrugExerciseName.dumbbellUprightRow:
        return 6;
      case ShrugExerciseName.inclineDumbbellShrug:
        return 7;
      case ShrugExerciseName.overheadBarbellShrug:
        return 8;
      case ShrugExerciseName.overheadDumbbellShrug:
        return 9;
      case ShrugExerciseName.scaptionAndShrug:
        return 10;
      case ShrugExerciseName.scapularRetraction:
        return 11;
      case ShrugExerciseName.serratusChairShrug:
        return 12;
      case ShrugExerciseName.weightedSerratusChairShrug:
        return 13;
      case ShrugExerciseName.serratusShrug:
        return 14;
      case ShrugExerciseName.weightedSerratusShrug:
        return 15;
      case ShrugExerciseName.wideGripJumpShrug:
        return 16;
    }
  }

  static ShrugExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return ShrugExerciseName.barbellJumpShrug;
      case 1:
        return ShrugExerciseName.barbellShrug;
      case 2:
        return ShrugExerciseName.barbellUprightRow;
      case 3:
        return ShrugExerciseName.behindTheBackSmithMachineShrug;
      case 4:
        return ShrugExerciseName.dumbbellJumpShrug;
      case 5:
        return ShrugExerciseName.dumbbellShrug;
      case 6:
        return ShrugExerciseName.dumbbellUprightRow;
      case 7:
        return ShrugExerciseName.inclineDumbbellShrug;
      case 8:
        return ShrugExerciseName.overheadBarbellShrug;
      case 9:
        return ShrugExerciseName.overheadDumbbellShrug;
      case 10:
        return ShrugExerciseName.scaptionAndShrug;
      case 11:
        return ShrugExerciseName.scapularRetraction;
      case 12:
        return ShrugExerciseName.serratusChairShrug;
      case 13:
        return ShrugExerciseName.weightedSerratusChairShrug;
      case 14:
        return ShrugExerciseName.serratusShrug;
      case 15:
        return ShrugExerciseName.weightedSerratusShrug;
      case 16:
        return ShrugExerciseName.wideGripJumpShrug;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SitUpExerciseName {
  alternatingSitUp,
  weightedAlternatingSitUp,
  bentKneeVUp,
  weightedBentKneeVUp,
  butterflySitUp,
  weightedButterflySitup,
  crossPunchRollUp,
  weightedCrossPunchRollUp,
  crossedArmsSitUp,
  weightedCrossedArmsSitUp,
  getUpSitUp,
  weightedGetUpSitUp,
  hoveringSitUp,
  weightedHoveringSitUp,
  kettlebellSitUp,
  medicineBallAlternatingVUp,
  medicineBallSitUp,
  medicineBallVUp,
  modifiedSitUp,
  negativeSitUp,
  oneArmFullSitUp,
  recliningCircle,
  weightedRecliningCircle,
  reverseCurlUp,
  weightedReverseCurlUp,
  singleLegSwissBallJackknife,
  weightedSingleLegSwissBallJackknife,
  theTeaser,
  theTeaserWeighted,
  threePartRollDown,
  weightedThreePartRollDown,
  vUp,
  weightedVUp,
  weightedRussianTwistOnSwissBall,
  weightedSitUp,
  xAbs,
  weightedXAbs,
  sitUp
}

extension SitUpExerciseNameExt on SitUpExerciseName {
  int get value {
    switch (this) {
      case SitUpExerciseName.alternatingSitUp:
        return 0;
      case SitUpExerciseName.weightedAlternatingSitUp:
        return 1;
      case SitUpExerciseName.bentKneeVUp:
        return 2;
      case SitUpExerciseName.weightedBentKneeVUp:
        return 3;
      case SitUpExerciseName.butterflySitUp:
        return 4;
      case SitUpExerciseName.weightedButterflySitup:
        return 5;
      case SitUpExerciseName.crossPunchRollUp:
        return 6;
      case SitUpExerciseName.weightedCrossPunchRollUp:
        return 7;
      case SitUpExerciseName.crossedArmsSitUp:
        return 8;
      case SitUpExerciseName.weightedCrossedArmsSitUp:
        return 9;
      case SitUpExerciseName.getUpSitUp:
        return 10;
      case SitUpExerciseName.weightedGetUpSitUp:
        return 11;
      case SitUpExerciseName.hoveringSitUp:
        return 12;
      case SitUpExerciseName.weightedHoveringSitUp:
        return 13;
      case SitUpExerciseName.kettlebellSitUp:
        return 14;
      case SitUpExerciseName.medicineBallAlternatingVUp:
        return 15;
      case SitUpExerciseName.medicineBallSitUp:
        return 16;
      case SitUpExerciseName.medicineBallVUp:
        return 17;
      case SitUpExerciseName.modifiedSitUp:
        return 18;
      case SitUpExerciseName.negativeSitUp:
        return 19;
      case SitUpExerciseName.oneArmFullSitUp:
        return 20;
      case SitUpExerciseName.recliningCircle:
        return 21;
      case SitUpExerciseName.weightedRecliningCircle:
        return 22;
      case SitUpExerciseName.reverseCurlUp:
        return 23;
      case SitUpExerciseName.weightedReverseCurlUp:
        return 24;
      case SitUpExerciseName.singleLegSwissBallJackknife:
        return 25;
      case SitUpExerciseName.weightedSingleLegSwissBallJackknife:
        return 26;
      case SitUpExerciseName.theTeaser:
        return 27;
      case SitUpExerciseName.theTeaserWeighted:
        return 28;
      case SitUpExerciseName.threePartRollDown:
        return 29;
      case SitUpExerciseName.weightedThreePartRollDown:
        return 30;
      case SitUpExerciseName.vUp:
        return 31;
      case SitUpExerciseName.weightedVUp:
        return 32;
      case SitUpExerciseName.weightedRussianTwistOnSwissBall:
        return 33;
      case SitUpExerciseName.weightedSitUp:
        return 34;
      case SitUpExerciseName.xAbs:
        return 35;
      case SitUpExerciseName.weightedXAbs:
        return 36;
      case SitUpExerciseName.sitUp:
        return 37;
    }
  }

  static SitUpExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return SitUpExerciseName.alternatingSitUp;
      case 1:
        return SitUpExerciseName.weightedAlternatingSitUp;
      case 2:
        return SitUpExerciseName.bentKneeVUp;
      case 3:
        return SitUpExerciseName.weightedBentKneeVUp;
      case 4:
        return SitUpExerciseName.butterflySitUp;
      case 5:
        return SitUpExerciseName.weightedButterflySitup;
      case 6:
        return SitUpExerciseName.crossPunchRollUp;
      case 7:
        return SitUpExerciseName.weightedCrossPunchRollUp;
      case 8:
        return SitUpExerciseName.crossedArmsSitUp;
      case 9:
        return SitUpExerciseName.weightedCrossedArmsSitUp;
      case 10:
        return SitUpExerciseName.getUpSitUp;
      case 11:
        return SitUpExerciseName.weightedGetUpSitUp;
      case 12:
        return SitUpExerciseName.hoveringSitUp;
      case 13:
        return SitUpExerciseName.weightedHoveringSitUp;
      case 14:
        return SitUpExerciseName.kettlebellSitUp;
      case 15:
        return SitUpExerciseName.medicineBallAlternatingVUp;
      case 16:
        return SitUpExerciseName.medicineBallSitUp;
      case 17:
        return SitUpExerciseName.medicineBallVUp;
      case 18:
        return SitUpExerciseName.modifiedSitUp;
      case 19:
        return SitUpExerciseName.negativeSitUp;
      case 20:
        return SitUpExerciseName.oneArmFullSitUp;
      case 21:
        return SitUpExerciseName.recliningCircle;
      case 22:
        return SitUpExerciseName.weightedRecliningCircle;
      case 23:
        return SitUpExerciseName.reverseCurlUp;
      case 24:
        return SitUpExerciseName.weightedReverseCurlUp;
      case 25:
        return SitUpExerciseName.singleLegSwissBallJackknife;
      case 26:
        return SitUpExerciseName.weightedSingleLegSwissBallJackknife;
      case 27:
        return SitUpExerciseName.theTeaser;
      case 28:
        return SitUpExerciseName.theTeaserWeighted;
      case 29:
        return SitUpExerciseName.threePartRollDown;
      case 30:
        return SitUpExerciseName.weightedThreePartRollDown;
      case 31:
        return SitUpExerciseName.vUp;
      case 32:
        return SitUpExerciseName.weightedVUp;
      case 33:
        return SitUpExerciseName.weightedRussianTwistOnSwissBall;
      case 34:
        return SitUpExerciseName.weightedSitUp;
      case 35:
        return SitUpExerciseName.xAbs;
      case 36:
        return SitUpExerciseName.weightedXAbs;
      case 37:
        return SitUpExerciseName.sitUp;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum SquatExerciseName {
  legPress,
  backSquatWithBodyBar,
  backSquats,
  weightedBackSquats,
  balancingSquat,
  weightedBalancingSquat,
  barbellBackSquat,
  barbellBoxSquat,
  barbellFrontSquat,
  barbellHackSquat,
  barbellHangSquatSnatch,
  barbellLateralStepUp,
  barbellQuarterSquat,
  barbellSiffSquat,
  barbellSquatSnatch,
  barbellSquatWithHeelsRaised,
  barbellStepover,
  barbellStepUp,
  benchSquatWithRotationalChop,
  weightedBenchSquatWithRotationalChop,
  bodyWeightWallSquat,
  weightedWallSquat,
  boxStepSquat,
  weightedBoxStepSquat,
  bracedSquat,
  crossedArmBarbellFrontSquat,
  crossoverDumbbellStepUp,
  dumbbellFrontSquat,
  dumbbellSplitSquat,
  dumbbellSquat,
  dumbbellSquatClean,
  dumbbellStepover,
  dumbbellStepUp,
  elevatedSingleLegSquat,
  weightedElevatedSingleLegSquat,
  figureFourSquats,
  weightedFigureFourSquats,
  gobletSquat,
  kettlebellSquat,
  kettlebellSwingOverhead,
  kettlebellSwingWithFlipToSquat,
  lateralDumbbellStepUp,
  oneLeggedSquat,
  overheadDumbbellSquat,
  overheadSquat,
  partialSingleLegSquat,
  weightedPartialSingleLegSquat,
  pistolSquat,
  weightedPistolSquat,
  plieSlides,
  weightedPlieSlides,
  plieSquat,
  weightedPlieSquat,
  prisonerSquat,
  weightedPrisonerSquat,
  singleLegBenchGetUp,
  weightedSingleLegBenchGetUp,
  singleLegBenchSquat,
  weightedSingleLegBenchSquat,
  singleLegSquatOnSwissBall,
  weightedSingleLegSquatOnSwissBall,
  squat,
  weightedSquat,
  squatsWithBand,
  staggeredSquat,
  weightedStaggeredSquat,
  stepUp,
  weightedStepUp,
  suitcaseSquats,
  sumoSquat,
  sumoSquatSlideIn,
  weightedSumoSquatSlideIn,
  sumoSquatToHighPull,
  sumoSquatToStand,
  weightedSumoSquatToStand,
  sumoSquatWithRotation,
  weightedSumoSquatWithRotation,
  swissBallBodyWeightWallSquat,
  weightedSwissBallWallSquat,
  thrusters,
  unevenSquat,
  weightedUnevenSquat,
  waistSlimmingSquat,
  wallBall,
  wideStanceBarbellSquat,
  wideStanceGobletSquat,
  zercherSquat,
  kbsOverhead,
  squatAndSideKick,
  squatJumpsInNOut,
  pilatesPlieSquatsParallelTurnedOutFlatAndHeels,
  releveStraightLegAndKneeBentWithOneLegVariation
}

extension SquatExerciseNameExt on SquatExerciseName {
  int get value {
    switch (this) {
      case SquatExerciseName.legPress:
        return 0;
      case SquatExerciseName.backSquatWithBodyBar:
        return 1;
      case SquatExerciseName.backSquats:
        return 2;
      case SquatExerciseName.weightedBackSquats:
        return 3;
      case SquatExerciseName.balancingSquat:
        return 4;
      case SquatExerciseName.weightedBalancingSquat:
        return 5;
      case SquatExerciseName.barbellBackSquat:
        return 6;
      case SquatExerciseName.barbellBoxSquat:
        return 7;
      case SquatExerciseName.barbellFrontSquat:
        return 8;
      case SquatExerciseName.barbellHackSquat:
        return 9;
      case SquatExerciseName.barbellHangSquatSnatch:
        return 10;
      case SquatExerciseName.barbellLateralStepUp:
        return 11;
      case SquatExerciseName.barbellQuarterSquat:
        return 12;
      case SquatExerciseName.barbellSiffSquat:
        return 13;
      case SquatExerciseName.barbellSquatSnatch:
        return 14;
      case SquatExerciseName.barbellSquatWithHeelsRaised:
        return 15;
      case SquatExerciseName.barbellStepover:
        return 16;
      case SquatExerciseName.barbellStepUp:
        return 17;
      case SquatExerciseName.benchSquatWithRotationalChop:
        return 18;
      case SquatExerciseName.weightedBenchSquatWithRotationalChop:
        return 19;
      case SquatExerciseName.bodyWeightWallSquat:
        return 20;
      case SquatExerciseName.weightedWallSquat:
        return 21;
      case SquatExerciseName.boxStepSquat:
        return 22;
      case SquatExerciseName.weightedBoxStepSquat:
        return 23;
      case SquatExerciseName.bracedSquat:
        return 24;
      case SquatExerciseName.crossedArmBarbellFrontSquat:
        return 25;
      case SquatExerciseName.crossoverDumbbellStepUp:
        return 26;
      case SquatExerciseName.dumbbellFrontSquat:
        return 27;
      case SquatExerciseName.dumbbellSplitSquat:
        return 28;
      case SquatExerciseName.dumbbellSquat:
        return 29;
      case SquatExerciseName.dumbbellSquatClean:
        return 30;
      case SquatExerciseName.dumbbellStepover:
        return 31;
      case SquatExerciseName.dumbbellStepUp:
        return 32;
      case SquatExerciseName.elevatedSingleLegSquat:
        return 33;
      case SquatExerciseName.weightedElevatedSingleLegSquat:
        return 34;
      case SquatExerciseName.figureFourSquats:
        return 35;
      case SquatExerciseName.weightedFigureFourSquats:
        return 36;
      case SquatExerciseName.gobletSquat:
        return 37;
      case SquatExerciseName.kettlebellSquat:
        return 38;
      case SquatExerciseName.kettlebellSwingOverhead:
        return 39;
      case SquatExerciseName.kettlebellSwingWithFlipToSquat:
        return 40;
      case SquatExerciseName.lateralDumbbellStepUp:
        return 41;
      case SquatExerciseName.oneLeggedSquat:
        return 42;
      case SquatExerciseName.overheadDumbbellSquat:
        return 43;
      case SquatExerciseName.overheadSquat:
        return 44;
      case SquatExerciseName.partialSingleLegSquat:
        return 45;
      case SquatExerciseName.weightedPartialSingleLegSquat:
        return 46;
      case SquatExerciseName.pistolSquat:
        return 47;
      case SquatExerciseName.weightedPistolSquat:
        return 48;
      case SquatExerciseName.plieSlides:
        return 49;
      case SquatExerciseName.weightedPlieSlides:
        return 50;
      case SquatExerciseName.plieSquat:
        return 51;
      case SquatExerciseName.weightedPlieSquat:
        return 52;
      case SquatExerciseName.prisonerSquat:
        return 53;
      case SquatExerciseName.weightedPrisonerSquat:
        return 54;
      case SquatExerciseName.singleLegBenchGetUp:
        return 55;
      case SquatExerciseName.weightedSingleLegBenchGetUp:
        return 56;
      case SquatExerciseName.singleLegBenchSquat:
        return 57;
      case SquatExerciseName.weightedSingleLegBenchSquat:
        return 58;
      case SquatExerciseName.singleLegSquatOnSwissBall:
        return 59;
      case SquatExerciseName.weightedSingleLegSquatOnSwissBall:
        return 60;
      case SquatExerciseName.squat:
        return 61;
      case SquatExerciseName.weightedSquat:
        return 62;
      case SquatExerciseName.squatsWithBand:
        return 63;
      case SquatExerciseName.staggeredSquat:
        return 64;
      case SquatExerciseName.weightedStaggeredSquat:
        return 65;
      case SquatExerciseName.stepUp:
        return 66;
      case SquatExerciseName.weightedStepUp:
        return 67;
      case SquatExerciseName.suitcaseSquats:
        return 68;
      case SquatExerciseName.sumoSquat:
        return 69;
      case SquatExerciseName.sumoSquatSlideIn:
        return 70;
      case SquatExerciseName.weightedSumoSquatSlideIn:
        return 71;
      case SquatExerciseName.sumoSquatToHighPull:
        return 72;
      case SquatExerciseName.sumoSquatToStand:
        return 73;
      case SquatExerciseName.weightedSumoSquatToStand:
        return 74;
      case SquatExerciseName.sumoSquatWithRotation:
        return 75;
      case SquatExerciseName.weightedSumoSquatWithRotation:
        return 76;
      case SquatExerciseName.swissBallBodyWeightWallSquat:
        return 77;
      case SquatExerciseName.weightedSwissBallWallSquat:
        return 78;
      case SquatExerciseName.thrusters:
        return 79;
      case SquatExerciseName.unevenSquat:
        return 80;
      case SquatExerciseName.weightedUnevenSquat:
        return 81;
      case SquatExerciseName.waistSlimmingSquat:
        return 82;
      case SquatExerciseName.wallBall:
        return 83;
      case SquatExerciseName.wideStanceBarbellSquat:
        return 84;
      case SquatExerciseName.wideStanceGobletSquat:
        return 85;
      case SquatExerciseName.zercherSquat:
        return 86;
      case SquatExerciseName.kbsOverhead:
        return 87;
      case SquatExerciseName.squatAndSideKick:
        return 88;
      case SquatExerciseName.squatJumpsInNOut:
        return 89;
      case SquatExerciseName.pilatesPlieSquatsParallelTurnedOutFlatAndHeels:
        return 90;
      case SquatExerciseName.releveStraightLegAndKneeBentWithOneLegVariation:
        return 91;
    }
  }

  static SquatExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return SquatExerciseName.legPress;
      case 1:
        return SquatExerciseName.backSquatWithBodyBar;
      case 2:
        return SquatExerciseName.backSquats;
      case 3:
        return SquatExerciseName.weightedBackSquats;
      case 4:
        return SquatExerciseName.balancingSquat;
      case 5:
        return SquatExerciseName.weightedBalancingSquat;
      case 6:
        return SquatExerciseName.barbellBackSquat;
      case 7:
        return SquatExerciseName.barbellBoxSquat;
      case 8:
        return SquatExerciseName.barbellFrontSquat;
      case 9:
        return SquatExerciseName.barbellHackSquat;
      case 10:
        return SquatExerciseName.barbellHangSquatSnatch;
      case 11:
        return SquatExerciseName.barbellLateralStepUp;
      case 12:
        return SquatExerciseName.barbellQuarterSquat;
      case 13:
        return SquatExerciseName.barbellSiffSquat;
      case 14:
        return SquatExerciseName.barbellSquatSnatch;
      case 15:
        return SquatExerciseName.barbellSquatWithHeelsRaised;
      case 16:
        return SquatExerciseName.barbellStepover;
      case 17:
        return SquatExerciseName.barbellStepUp;
      case 18:
        return SquatExerciseName.benchSquatWithRotationalChop;
      case 19:
        return SquatExerciseName.weightedBenchSquatWithRotationalChop;
      case 20:
        return SquatExerciseName.bodyWeightWallSquat;
      case 21:
        return SquatExerciseName.weightedWallSquat;
      case 22:
        return SquatExerciseName.boxStepSquat;
      case 23:
        return SquatExerciseName.weightedBoxStepSquat;
      case 24:
        return SquatExerciseName.bracedSquat;
      case 25:
        return SquatExerciseName.crossedArmBarbellFrontSquat;
      case 26:
        return SquatExerciseName.crossoverDumbbellStepUp;
      case 27:
        return SquatExerciseName.dumbbellFrontSquat;
      case 28:
        return SquatExerciseName.dumbbellSplitSquat;
      case 29:
        return SquatExerciseName.dumbbellSquat;
      case 30:
        return SquatExerciseName.dumbbellSquatClean;
      case 31:
        return SquatExerciseName.dumbbellStepover;
      case 32:
        return SquatExerciseName.dumbbellStepUp;
      case 33:
        return SquatExerciseName.elevatedSingleLegSquat;
      case 34:
        return SquatExerciseName.weightedElevatedSingleLegSquat;
      case 35:
        return SquatExerciseName.figureFourSquats;
      case 36:
        return SquatExerciseName.weightedFigureFourSquats;
      case 37:
        return SquatExerciseName.gobletSquat;
      case 38:
        return SquatExerciseName.kettlebellSquat;
      case 39:
        return SquatExerciseName.kettlebellSwingOverhead;
      case 40:
        return SquatExerciseName.kettlebellSwingWithFlipToSquat;
      case 41:
        return SquatExerciseName.lateralDumbbellStepUp;
      case 42:
        return SquatExerciseName.oneLeggedSquat;
      case 43:
        return SquatExerciseName.overheadDumbbellSquat;
      case 44:
        return SquatExerciseName.overheadSquat;
      case 45:
        return SquatExerciseName.partialSingleLegSquat;
      case 46:
        return SquatExerciseName.weightedPartialSingleLegSquat;
      case 47:
        return SquatExerciseName.pistolSquat;
      case 48:
        return SquatExerciseName.weightedPistolSquat;
      case 49:
        return SquatExerciseName.plieSlides;
      case 50:
        return SquatExerciseName.weightedPlieSlides;
      case 51:
        return SquatExerciseName.plieSquat;
      case 52:
        return SquatExerciseName.weightedPlieSquat;
      case 53:
        return SquatExerciseName.prisonerSquat;
      case 54:
        return SquatExerciseName.weightedPrisonerSquat;
      case 55:
        return SquatExerciseName.singleLegBenchGetUp;
      case 56:
        return SquatExerciseName.weightedSingleLegBenchGetUp;
      case 57:
        return SquatExerciseName.singleLegBenchSquat;
      case 58:
        return SquatExerciseName.weightedSingleLegBenchSquat;
      case 59:
        return SquatExerciseName.singleLegSquatOnSwissBall;
      case 60:
        return SquatExerciseName.weightedSingleLegSquatOnSwissBall;
      case 61:
        return SquatExerciseName.squat;
      case 62:
        return SquatExerciseName.weightedSquat;
      case 63:
        return SquatExerciseName.squatsWithBand;
      case 64:
        return SquatExerciseName.staggeredSquat;
      case 65:
        return SquatExerciseName.weightedStaggeredSquat;
      case 66:
        return SquatExerciseName.stepUp;
      case 67:
        return SquatExerciseName.weightedStepUp;
      case 68:
        return SquatExerciseName.suitcaseSquats;
      case 69:
        return SquatExerciseName.sumoSquat;
      case 70:
        return SquatExerciseName.sumoSquatSlideIn;
      case 71:
        return SquatExerciseName.weightedSumoSquatSlideIn;
      case 72:
        return SquatExerciseName.sumoSquatToHighPull;
      case 73:
        return SquatExerciseName.sumoSquatToStand;
      case 74:
        return SquatExerciseName.weightedSumoSquatToStand;
      case 75:
        return SquatExerciseName.sumoSquatWithRotation;
      case 76:
        return SquatExerciseName.weightedSumoSquatWithRotation;
      case 77:
        return SquatExerciseName.swissBallBodyWeightWallSquat;
      case 78:
        return SquatExerciseName.weightedSwissBallWallSquat;
      case 79:
        return SquatExerciseName.thrusters;
      case 80:
        return SquatExerciseName.unevenSquat;
      case 81:
        return SquatExerciseName.weightedUnevenSquat;
      case 82:
        return SquatExerciseName.waistSlimmingSquat;
      case 83:
        return SquatExerciseName.wallBall;
      case 84:
        return SquatExerciseName.wideStanceBarbellSquat;
      case 85:
        return SquatExerciseName.wideStanceGobletSquat;
      case 86:
        return SquatExerciseName.zercherSquat;
      case 87:
        return SquatExerciseName.kbsOverhead;
      case 88:
        return SquatExerciseName.squatAndSideKick;
      case 89:
        return SquatExerciseName.squatJumpsInNOut;
      case 90:
        return SquatExerciseName.pilatesPlieSquatsParallelTurnedOutFlatAndHeels;
      case 91:
        return SquatExerciseName
            .releveStraightLegAndKneeBentWithOneLegVariation;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TotalBodyExerciseName {
  burpee,
  weightedBurpee,
  burpeeBoxJump,
  weightedBurpeeBoxJump,
  highPullBurpee,
  manMakers,
  oneArmBurpee,
  squatThrusts,
  weightedSquatThrusts,
  squatPlankPushUp,
  weightedSquatPlankPushUp,
  standingTRotationBalance,
  weightedStandingTRotationBalance
}

extension TotalBodyExerciseNameExt on TotalBodyExerciseName {
  int get value {
    switch (this) {
      case TotalBodyExerciseName.burpee:
        return 0;
      case TotalBodyExerciseName.weightedBurpee:
        return 1;
      case TotalBodyExerciseName.burpeeBoxJump:
        return 2;
      case TotalBodyExerciseName.weightedBurpeeBoxJump:
        return 3;
      case TotalBodyExerciseName.highPullBurpee:
        return 4;
      case TotalBodyExerciseName.manMakers:
        return 5;
      case TotalBodyExerciseName.oneArmBurpee:
        return 6;
      case TotalBodyExerciseName.squatThrusts:
        return 7;
      case TotalBodyExerciseName.weightedSquatThrusts:
        return 8;
      case TotalBodyExerciseName.squatPlankPushUp:
        return 9;
      case TotalBodyExerciseName.weightedSquatPlankPushUp:
        return 10;
      case TotalBodyExerciseName.standingTRotationBalance:
        return 11;
      case TotalBodyExerciseName.weightedStandingTRotationBalance:
        return 12;
    }
  }

  static TotalBodyExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return TotalBodyExerciseName.burpee;
      case 1:
        return TotalBodyExerciseName.weightedBurpee;
      case 2:
        return TotalBodyExerciseName.burpeeBoxJump;
      case 3:
        return TotalBodyExerciseName.weightedBurpeeBoxJump;
      case 4:
        return TotalBodyExerciseName.highPullBurpee;
      case 5:
        return TotalBodyExerciseName.manMakers;
      case 6:
        return TotalBodyExerciseName.oneArmBurpee;
      case 7:
        return TotalBodyExerciseName.squatThrusts;
      case 8:
        return TotalBodyExerciseName.weightedSquatThrusts;
      case 9:
        return TotalBodyExerciseName.squatPlankPushUp;
      case 10:
        return TotalBodyExerciseName.weightedSquatPlankPushUp;
      case 11:
        return TotalBodyExerciseName.standingTRotationBalance;
      case 12:
        return TotalBodyExerciseName.weightedStandingTRotationBalance;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TricepsExtensionExerciseName {
  benchDip,
  weightedBenchDip,
  bodyWeightDip,
  cableKickback,
  cableLyingTricepsExtension,
  cableOverheadTricepsExtension,
  dumbbellKickback,
  dumbbellLyingTricepsExtension,
  ezBarOverheadTricepsExtension,
  inclineDip,
  weightedInclineDip,
  inclineEzBarLyingTricepsExtension,
  lyingDumbbellPulloverToExtension,
  lyingEzBarTricepsExtension,
  lyingTricepsExtensionToCloseGripBenchPress,
  overheadDumbbellTricepsExtension,
  recliningTricepsPress,
  reverseGripPressdown,
  reverseGripTricepsPressdown,
  ropePressdown,
  seatedBarbellOverheadTricepsExtension,
  seatedDumbbellOverheadTricepsExtension,
  seatedEzBarOverheadTricepsExtension,
  seatedSingleArmOverheadDumbbellExtension,
  singleArmDumbbellOverheadTricepsExtension,
  singleDumbbellSeatedOverheadTricepsExtension,
  singleLegBenchDipAndKick,
  weightedSingleLegBenchDipAndKick,
  singleLegDip,
  weightedSingleLegDip,
  staticLyingTricepsExtension,
  suspendedDip,
  weightedSuspendedDip,
  swissBallDumbbellLyingTricepsExtension,
  swissBallEzBarLyingTricepsExtension,
  swissBallEzBarOverheadTricepsExtension,
  tabletopDip,
  weightedTabletopDip,
  tricepsExtensionOnFloor,
  tricepsPressdown,
  weightedDip
}

extension TricepsExtensionExerciseNameExt on TricepsExtensionExerciseName {
  int get value {
    switch (this) {
      case TricepsExtensionExerciseName.benchDip:
        return 0;
      case TricepsExtensionExerciseName.weightedBenchDip:
        return 1;
      case TricepsExtensionExerciseName.bodyWeightDip:
        return 2;
      case TricepsExtensionExerciseName.cableKickback:
        return 3;
      case TricepsExtensionExerciseName.cableLyingTricepsExtension:
        return 4;
      case TricepsExtensionExerciseName.cableOverheadTricepsExtension:
        return 5;
      case TricepsExtensionExerciseName.dumbbellKickback:
        return 6;
      case TricepsExtensionExerciseName.dumbbellLyingTricepsExtension:
        return 7;
      case TricepsExtensionExerciseName.ezBarOverheadTricepsExtension:
        return 8;
      case TricepsExtensionExerciseName.inclineDip:
        return 9;
      case TricepsExtensionExerciseName.weightedInclineDip:
        return 10;
      case TricepsExtensionExerciseName.inclineEzBarLyingTricepsExtension:
        return 11;
      case TricepsExtensionExerciseName.lyingDumbbellPulloverToExtension:
        return 12;
      case TricepsExtensionExerciseName.lyingEzBarTricepsExtension:
        return 13;
      case TricepsExtensionExerciseName
          .lyingTricepsExtensionToCloseGripBenchPress:
        return 14;
      case TricepsExtensionExerciseName.overheadDumbbellTricepsExtension:
        return 15;
      case TricepsExtensionExerciseName.recliningTricepsPress:
        return 16;
      case TricepsExtensionExerciseName.reverseGripPressdown:
        return 17;
      case TricepsExtensionExerciseName.reverseGripTricepsPressdown:
        return 18;
      case TricepsExtensionExerciseName.ropePressdown:
        return 19;
      case TricepsExtensionExerciseName.seatedBarbellOverheadTricepsExtension:
        return 20;
      case TricepsExtensionExerciseName.seatedDumbbellOverheadTricepsExtension:
        return 21;
      case TricepsExtensionExerciseName.seatedEzBarOverheadTricepsExtension:
        return 22;
      case TricepsExtensionExerciseName
          .seatedSingleArmOverheadDumbbellExtension:
        return 23;
      case TricepsExtensionExerciseName
          .singleArmDumbbellOverheadTricepsExtension:
        return 24;
      case TricepsExtensionExerciseName
          .singleDumbbellSeatedOverheadTricepsExtension:
        return 25;
      case TricepsExtensionExerciseName.singleLegBenchDipAndKick:
        return 26;
      case TricepsExtensionExerciseName.weightedSingleLegBenchDipAndKick:
        return 27;
      case TricepsExtensionExerciseName.singleLegDip:
        return 28;
      case TricepsExtensionExerciseName.weightedSingleLegDip:
        return 29;
      case TricepsExtensionExerciseName.staticLyingTricepsExtension:
        return 30;
      case TricepsExtensionExerciseName.suspendedDip:
        return 31;
      case TricepsExtensionExerciseName.weightedSuspendedDip:
        return 32;
      case TricepsExtensionExerciseName.swissBallDumbbellLyingTricepsExtension:
        return 33;
      case TricepsExtensionExerciseName.swissBallEzBarLyingTricepsExtension:
        return 34;
      case TricepsExtensionExerciseName.swissBallEzBarOverheadTricepsExtension:
        return 35;
      case TricepsExtensionExerciseName.tabletopDip:
        return 36;
      case TricepsExtensionExerciseName.weightedTabletopDip:
        return 37;
      case TricepsExtensionExerciseName.tricepsExtensionOnFloor:
        return 38;
      case TricepsExtensionExerciseName.tricepsPressdown:
        return 39;
      case TricepsExtensionExerciseName.weightedDip:
        return 40;
    }
  }

  static TricepsExtensionExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return TricepsExtensionExerciseName.benchDip;
      case 1:
        return TricepsExtensionExerciseName.weightedBenchDip;
      case 2:
        return TricepsExtensionExerciseName.bodyWeightDip;
      case 3:
        return TricepsExtensionExerciseName.cableKickback;
      case 4:
        return TricepsExtensionExerciseName.cableLyingTricepsExtension;
      case 5:
        return TricepsExtensionExerciseName.cableOverheadTricepsExtension;
      case 6:
        return TricepsExtensionExerciseName.dumbbellKickback;
      case 7:
        return TricepsExtensionExerciseName.dumbbellLyingTricepsExtension;
      case 8:
        return TricepsExtensionExerciseName.ezBarOverheadTricepsExtension;
      case 9:
        return TricepsExtensionExerciseName.inclineDip;
      case 10:
        return TricepsExtensionExerciseName.weightedInclineDip;
      case 11:
        return TricepsExtensionExerciseName.inclineEzBarLyingTricepsExtension;
      case 12:
        return TricepsExtensionExerciseName.lyingDumbbellPulloverToExtension;
      case 13:
        return TricepsExtensionExerciseName.lyingEzBarTricepsExtension;
      case 14:
        return TricepsExtensionExerciseName
            .lyingTricepsExtensionToCloseGripBenchPress;
      case 15:
        return TricepsExtensionExerciseName.overheadDumbbellTricepsExtension;
      case 16:
        return TricepsExtensionExerciseName.recliningTricepsPress;
      case 17:
        return TricepsExtensionExerciseName.reverseGripPressdown;
      case 18:
        return TricepsExtensionExerciseName.reverseGripTricepsPressdown;
      case 19:
        return TricepsExtensionExerciseName.ropePressdown;
      case 20:
        return TricepsExtensionExerciseName
            .seatedBarbellOverheadTricepsExtension;
      case 21:
        return TricepsExtensionExerciseName
            .seatedDumbbellOverheadTricepsExtension;
      case 22:
        return TricepsExtensionExerciseName.seatedEzBarOverheadTricepsExtension;
      case 23:
        return TricepsExtensionExerciseName
            .seatedSingleArmOverheadDumbbellExtension;
      case 24:
        return TricepsExtensionExerciseName
            .singleArmDumbbellOverheadTricepsExtension;
      case 25:
        return TricepsExtensionExerciseName
            .singleDumbbellSeatedOverheadTricepsExtension;
      case 26:
        return TricepsExtensionExerciseName.singleLegBenchDipAndKick;
      case 27:
        return TricepsExtensionExerciseName.weightedSingleLegBenchDipAndKick;
      case 28:
        return TricepsExtensionExerciseName.singleLegDip;
      case 29:
        return TricepsExtensionExerciseName.weightedSingleLegDip;
      case 30:
        return TricepsExtensionExerciseName.staticLyingTricepsExtension;
      case 31:
        return TricepsExtensionExerciseName.suspendedDip;
      case 32:
        return TricepsExtensionExerciseName.weightedSuspendedDip;
      case 33:
        return TricepsExtensionExerciseName
            .swissBallDumbbellLyingTricepsExtension;
      case 34:
        return TricepsExtensionExerciseName.swissBallEzBarLyingTricepsExtension;
      case 35:
        return TricepsExtensionExerciseName
            .swissBallEzBarOverheadTricepsExtension;
      case 36:
        return TricepsExtensionExerciseName.tabletopDip;
      case 37:
        return TricepsExtensionExerciseName.weightedTabletopDip;
      case 38:
        return TricepsExtensionExerciseName.tricepsExtensionOnFloor;
      case 39:
        return TricepsExtensionExerciseName.tricepsPressdown;
      case 40:
        return TricepsExtensionExerciseName.weightedDip;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WarmUpExerciseName {
  quadrupedRocking,
  neckTilts,
  ankleCircles,
  ankleDorsiflexionWithBand,
  ankleInternalRotation,
  armCircles,
  bentOverReachToSky,
  catCamel,
  elbowToFootLunge,
  forwardAndBackwardLegSwings,
  groiners,
  invertedHamstringStretch,
  lateralDuckUnder,
  neckRotations,
  oppositeArmAndLegBalance,
  reachRollAndLift,
  scorpion,
  shoulderCircles,
  sideToSideLegSwings,
  sleeperStretch,
  slideOut,
  swissBallHipCrossover,
  swissBallReachRollAndLift,
  swissBallWindshieldWipers,
  thoracicRotation,
  walkingHighKicks,
  walkingHighKnees,
  walkingKneeHugs,
  walkingLegCradles,
  walkout,
  walkoutFromPushUpPosition
}

extension WarmUpExerciseNameExt on WarmUpExerciseName {
  int get value {
    switch (this) {
      case WarmUpExerciseName.quadrupedRocking:
        return 0;
      case WarmUpExerciseName.neckTilts:
        return 1;
      case WarmUpExerciseName.ankleCircles:
        return 2;
      case WarmUpExerciseName.ankleDorsiflexionWithBand:
        return 3;
      case WarmUpExerciseName.ankleInternalRotation:
        return 4;
      case WarmUpExerciseName.armCircles:
        return 5;
      case WarmUpExerciseName.bentOverReachToSky:
        return 6;
      case WarmUpExerciseName.catCamel:
        return 7;
      case WarmUpExerciseName.elbowToFootLunge:
        return 8;
      case WarmUpExerciseName.forwardAndBackwardLegSwings:
        return 9;
      case WarmUpExerciseName.groiners:
        return 10;
      case WarmUpExerciseName.invertedHamstringStretch:
        return 11;
      case WarmUpExerciseName.lateralDuckUnder:
        return 12;
      case WarmUpExerciseName.neckRotations:
        return 13;
      case WarmUpExerciseName.oppositeArmAndLegBalance:
        return 14;
      case WarmUpExerciseName.reachRollAndLift:
        return 15;
      case WarmUpExerciseName.scorpion:
        return 16;
      case WarmUpExerciseName.shoulderCircles:
        return 17;
      case WarmUpExerciseName.sideToSideLegSwings:
        return 18;
      case WarmUpExerciseName.sleeperStretch:
        return 19;
      case WarmUpExerciseName.slideOut:
        return 20;
      case WarmUpExerciseName.swissBallHipCrossover:
        return 21;
      case WarmUpExerciseName.swissBallReachRollAndLift:
        return 22;
      case WarmUpExerciseName.swissBallWindshieldWipers:
        return 23;
      case WarmUpExerciseName.thoracicRotation:
        return 24;
      case WarmUpExerciseName.walkingHighKicks:
        return 25;
      case WarmUpExerciseName.walkingHighKnees:
        return 26;
      case WarmUpExerciseName.walkingKneeHugs:
        return 27;
      case WarmUpExerciseName.walkingLegCradles:
        return 28;
      case WarmUpExerciseName.walkout:
        return 29;
      case WarmUpExerciseName.walkoutFromPushUpPosition:
        return 30;
    }
  }

  static WarmUpExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return WarmUpExerciseName.quadrupedRocking;
      case 1:
        return WarmUpExerciseName.neckTilts;
      case 2:
        return WarmUpExerciseName.ankleCircles;
      case 3:
        return WarmUpExerciseName.ankleDorsiflexionWithBand;
      case 4:
        return WarmUpExerciseName.ankleInternalRotation;
      case 5:
        return WarmUpExerciseName.armCircles;
      case 6:
        return WarmUpExerciseName.bentOverReachToSky;
      case 7:
        return WarmUpExerciseName.catCamel;
      case 8:
        return WarmUpExerciseName.elbowToFootLunge;
      case 9:
        return WarmUpExerciseName.forwardAndBackwardLegSwings;
      case 10:
        return WarmUpExerciseName.groiners;
      case 11:
        return WarmUpExerciseName.invertedHamstringStretch;
      case 12:
        return WarmUpExerciseName.lateralDuckUnder;
      case 13:
        return WarmUpExerciseName.neckRotations;
      case 14:
        return WarmUpExerciseName.oppositeArmAndLegBalance;
      case 15:
        return WarmUpExerciseName.reachRollAndLift;
      case 16:
        return WarmUpExerciseName.scorpion;
      case 17:
        return WarmUpExerciseName.shoulderCircles;
      case 18:
        return WarmUpExerciseName.sideToSideLegSwings;
      case 19:
        return WarmUpExerciseName.sleeperStretch;
      case 20:
        return WarmUpExerciseName.slideOut;
      case 21:
        return WarmUpExerciseName.swissBallHipCrossover;
      case 22:
        return WarmUpExerciseName.swissBallReachRollAndLift;
      case 23:
        return WarmUpExerciseName.swissBallWindshieldWipers;
      case 24:
        return WarmUpExerciseName.thoracicRotation;
      case 25:
        return WarmUpExerciseName.walkingHighKicks;
      case 26:
        return WarmUpExerciseName.walkingHighKnees;
      case 27:
        return WarmUpExerciseName.walkingKneeHugs;
      case 28:
        return WarmUpExerciseName.walkingLegCradles;
      case 29:
        return WarmUpExerciseName.walkout;
      case 30:
        return WarmUpExerciseName.walkoutFromPushUpPosition;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum RunExerciseName { run, walk, jog, sprint }

extension RunExerciseNameExt on RunExerciseName {
  int get value {
    switch (this) {
      case RunExerciseName.run:
        return 0;
      case RunExerciseName.walk:
        return 1;
      case RunExerciseName.jog:
        return 2;
      case RunExerciseName.sprint:
        return 3;
    }
  }

  static RunExerciseName fromValue(int value) {
    switch (value) {
      case 0:
        return RunExerciseName.run;
      case 1:
        return RunExerciseName.walk;
      case 2:
        return RunExerciseName.jog;
      case 3:
        return RunExerciseName.sprint;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum WaterType { fresh, salt, en13319, custom }

extension WaterTypeExt on WaterType {
  int get value {
    switch (this) {
      case WaterType.fresh:
        return 0;
      case WaterType.salt:
        return 1;
      case WaterType.en13319:
        return 2;
      case WaterType.custom:
        return 3;
    }
  }

  static WaterType fromValue(int value) {
    switch (value) {
      case 0:
        return WaterType.fresh;
      case 1:
        return WaterType.salt;
      case 2:
        return WaterType.en13319;
      case 3:
        return WaterType.custom;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TissueModelType { zhl16c }

extension TissueModelTypeExt on TissueModelType {
  int get value {
    switch (this) {
      case TissueModelType.zhl16c:
        return 0;
    }
  }

  static TissueModelType fromValue(int value) {
    switch (value) {
      case 0:
        return TissueModelType.zhl16c;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DiveGasStatus { disabled, enabled, backupOnly }

extension DiveGasStatusExt on DiveGasStatus {
  int get value {
    switch (this) {
      case DiveGasStatus.disabled:
        return 0;
      case DiveGasStatus.enabled:
        return 1;
      case DiveGasStatus.backupOnly:
        return 2;
    }
  }

  static DiveGasStatus fromValue(int value) {
    switch (value) {
      case 0:
        return DiveGasStatus.disabled;
      case 1:
        return DiveGasStatus.enabled;
      case 2:
        return DiveGasStatus.backupOnly;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DiveAlarmType { depth, time }

extension DiveAlarmTypeExt on DiveAlarmType {
  int get value {
    switch (this) {
      case DiveAlarmType.depth:
        return 0;
      case DiveAlarmType.time:
        return 1;
    }
  }

  static DiveAlarmType fromValue(int value) {
    switch (value) {
      case 0:
        return DiveAlarmType.depth;
      case 1:
        return DiveAlarmType.time;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum DiveBacklightMode { atDepth, alwaysOn }

extension DiveBacklightModeExt on DiveBacklightMode {
  int get value {
    switch (this) {
      case DiveBacklightMode.atDepth:
        return 0;
      case DiveBacklightMode.alwaysOn:
        return 1;
    }
  }

  static DiveBacklightMode fromValue(int value) {
    switch (value) {
      case 0:
        return DiveBacklightMode.atDepth;
      case 1:
        return DiveBacklightMode.alwaysOn;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum FaveroProduct { assiomaUno, assiomaDuo }

extension FaveroProductExt on FaveroProduct {
  int get value {
    switch (this) {
      case FaveroProduct.assiomaUno:
        return 10;
      case FaveroProduct.assiomaDuo:
        return 12;
    }
  }

  static FaveroProduct fromValue(int value) {
    switch (value) {
      case 10:
        return FaveroProduct.assiomaUno;
      case 12:
        return FaveroProduct.assiomaDuo;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum ClimbProEvent { approach, start, complete }

extension ClimbProEventExt on ClimbProEvent {
  int get value {
    switch (this) {
      case ClimbProEvent.approach:
        return 0;
      case ClimbProEvent.start:
        return 1;
      case ClimbProEvent.complete:
        return 2;
    }
  }

  static ClimbProEvent fromValue(int value) {
    switch (value) {
      case 0:
        return ClimbProEvent.approach;
      case 1:
        return ClimbProEvent.start;
      case 2:
        return ClimbProEvent.complete;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum TapSensitivity { high, medium, low }

extension TapSensitivityExt on TapSensitivity {
  int get value {
    switch (this) {
      case TapSensitivity.high:
        return 0;
      case TapSensitivity.medium:
        return 1;
      case TapSensitivity.low:
        return 2;
    }
  }

  static TapSensitivity fromValue(int value) {
    switch (value) {
      case 0:
        return TapSensitivity.high;
      case 1:
        return TapSensitivity.medium;
      case 2:
        return TapSensitivity.low;
      default:
        throw ArgumentError.value(value);
    }
  }
}

enum RadarThreatLevelType {
  threatUnknown,
  threatNone,
  threatApproaching,
  threatApproachingFast
}

extension RadarThreatLevelTypeExt on RadarThreatLevelType {
  int get value {
    switch (this) {
      case RadarThreatLevelType.threatUnknown:
        return 0;
      case RadarThreatLevelType.threatNone:
        return 1;
      case RadarThreatLevelType.threatApproaching:
        return 2;
      case RadarThreatLevelType.threatApproachingFast:
        return 3;
    }
  }

  static RadarThreatLevelType fromValue(int value) {
    switch (value) {
      case 0:
        return RadarThreatLevelType.threatUnknown;
      case 1:
        return RadarThreatLevelType.threatNone;
      case 2:
        return RadarThreatLevelType.threatApproaching;
      case 3:
        return RadarThreatLevelType.threatApproachingFast;
      default:
        throw ArgumentError.value(value);
    }
  }
}
