/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';

// ignore_for_file: constant_identifier_names

class ExdDataFieldConfigurationMessage extends DataMessage {
  ExdDataFieldConfigurationMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: ExdDataFieldConfigurationMessage.NAME,
            globalId: ExdDataFieldConfigurationMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              ExdDataFieldConfigurationScreenIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ExdDataFieldConfigurationScreenIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ExdDataFieldConfigurationConceptField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ExdDataFieldConfigurationConceptField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ExdDataFieldConfigurationFieldIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ExdDataFieldConfigurationFieldIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ExdDataFieldConfigurationConceptCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ExdDataFieldConfigurationConceptCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ExdDataFieldConfigurationDisplayTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ExdDataFieldConfigurationDisplayTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ExdDataFieldConfigurationTitleField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ExdDataFieldConfigurationTitleField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 201;
  static const NAME = 'exd_data_field_configuration';

  final bool growable;

  /// Returns an instance of ExdDataFieldConfigurationMessage from a bytes list.
  static ExdDataFieldConfigurationMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        ExdDataFieldConfigurationMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the screenIndex field. Returns null if the field is not defined in the message.
  int? get screenIndex {
    final field = getField(ExdDataFieldConfigurationScreenIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the screenIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set screenIndex(int? value) {
    final field = getField(ExdDataFieldConfigurationScreenIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the conceptField field. Returns null if the field is not defined in the message.
  int? get conceptField {
    final field = getField(ExdDataFieldConfigurationConceptField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the conceptField field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set conceptField(int? value) {
    final field = getField(ExdDataFieldConfigurationConceptField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the fieldId field. Returns null if the field is not defined in the message.
  int? get fieldId {
    final field = getField(ExdDataFieldConfigurationFieldIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fieldId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fieldId(int? value) {
    final field = getField(ExdDataFieldConfigurationFieldIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the conceptCount field. Returns null if the field is not defined in the message.
  int? get conceptCount {
    final field = getField(ExdDataFieldConfigurationConceptCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the conceptCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set conceptCount(int? value) {
    final field = getField(ExdDataFieldConfigurationConceptCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the displayType field. Returns null if the field is not defined in the message.
  ExdDisplayType? get displayType {
    final field = getField(ExdDataFieldConfigurationDisplayTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ExdDisplayTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the displayType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set displayType(ExdDisplayType? value) {
    final field = getField(ExdDataFieldConfigurationDisplayTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the title field. Returns null if the field is not defined in the message.
  String? get title {
    final field = getField(ExdDataFieldConfigurationTitleField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the title field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set title(String? value) {
    final field = getField(ExdDataFieldConfigurationTitleField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class ExdDataFieldConfigurationScreenIndexField extends Field {
  ExdDataFieldConfigurationScreenIndexField(
      {int size = 0, bool growable = true})
      : super(
            name: 'screen_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class ExdDataFieldConfigurationConceptField extends Field {
  ExdDataFieldConfigurationConceptField({int size = 0, bool growable = true})
      : super(
            name: 'concept_field',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class ExdDataFieldConfigurationFieldIdField extends Field {
  ExdDataFieldConfigurationFieldIdField({int size = 0, bool growable = true})
      : super(
            name: 'field_id',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class ExdDataFieldConfigurationConceptCountField extends Field {
  ExdDataFieldConfigurationConceptCountField(
      {int size = 0, bool growable = true})
      : super(
            name: 'concept_count',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class ExdDataFieldConfigurationDisplayTypeField extends Field {
  ExdDataFieldConfigurationDisplayTypeField(
      {int size = 0, bool growable = true})
      : super(
            name: 'display_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class ExdDataFieldConfigurationTitleField extends Field {
  ExdDataFieldConfigurationTitleField({int size = 0, bool growable = true})
      : super(
            name: 'title',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}
