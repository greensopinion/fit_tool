/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class FieldCapabilitiesMessage extends DataMessage {
  FieldCapabilitiesMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: FieldCapabilitiesMessage.NAME,
            globalId: FieldCapabilitiesMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldCapabilitiesFileField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldCapabilitiesFileField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldCapabilitiesMesgNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldCapabilitiesMesgNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldCapabilitiesFieldNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldCapabilitiesFieldNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldCapabilitiesCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldCapabilitiesCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 39;
  static const NAME = 'field_capabilities';

  final bool growable;

  /// Returns an instance of FieldCapabilitiesMessage from a bytes list.
  static FieldCapabilitiesMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        FieldCapabilitiesMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the file field. Returns null if the field is not defined in the message.
  FileType? get file {
    final field = getField(FieldCapabilitiesFileField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return FileTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the file field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set file(FileType? value) {
    final field = getField(FieldCapabilitiesFileField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the mesgNum field. Returns null if the field is not defined in the message.
  int? get mesgNum {
    final field = getField(FieldCapabilitiesMesgNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the mesgNum field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set mesgNum(int? value) {
    final field = getField(FieldCapabilitiesMesgNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the fieldNum field. Returns null if the field is not defined in the message.
  int? get fieldNum {
    final field = getField(FieldCapabilitiesFieldNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fieldNum field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fieldNum(int? value) {
    final field = getField(FieldCapabilitiesFieldNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the count field. Returns null if the field is not defined in the message.
  int? get count {
    final field = getField(FieldCapabilitiesCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the count field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set count(int? value) {
    final field = getField(FieldCapabilitiesCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class FieldCapabilitiesFileField extends Field {
  FieldCapabilitiesFileField({int size = 0, bool growable = true})
      : super(
            name: 'file',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class FieldCapabilitiesMesgNumField extends Field {
  FieldCapabilitiesMesgNumField({int size = 0, bool growable = true})
      : super(
            name: 'mesg_num',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class FieldCapabilitiesFieldNumField extends Field {
  FieldCapabilitiesFieldNumField({int size = 0, bool growable = true})
      : super(
            name: 'field_num',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class FieldCapabilitiesCountField extends Field {
  FieldCapabilitiesCountField({int size = 0, bool growable = true})
      : super(
            name: 'count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}
