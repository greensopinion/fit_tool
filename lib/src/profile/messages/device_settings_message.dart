/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';

class DeviceSettingsMessage extends DataMessage {
  DeviceSettingsMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: DeviceSettingsMessage.NAME,
            globalId: DeviceSettingsMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              DeviceSettingsActiveTimeZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsActiveTimeZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsUtcOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceSettingsUtcOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsTimeOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceSettingsTimeOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsTimeModeField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceSettingsTimeModeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsTimeZoneOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsTimeZoneOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsBacklightModeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsBacklightModeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsActivityTrackerEnabledField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsActivityTrackerEnabledField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsClockTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceSettingsClockTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsPagesEnabledField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsPagesEnabledField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsMoveAlertEnabledField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsMoveAlertEnabledField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsDateModeField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceSettingsDateModeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsDisplayOrientationField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsDisplayOrientationField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsMountingSideField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsMountingSideField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsDefaultPageField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsDefaultPageField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsAutosyncMinStepsField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsAutosyncMinStepsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsAutosyncMinTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsAutosyncMinTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsLactateThresholdAutodetectEnabledField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsLactateThresholdAutodetectEnabledField
                                  .ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsBleAutoUploadEnabledField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsBleAutoUploadEnabledField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsAutoSyncFrequencyField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsAutoSyncFrequencyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsAutoActivityDetectField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsAutoActivityDetectField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsNumberOfScreensField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsNumberOfScreensField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsSmartNotificationDisplayOrientationField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsSmartNotificationDisplayOrientationField
                                  .ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsTapInterfaceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsTapInterfaceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceSettingsTapSensitivityField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceSettingsTapSensitivityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 2;
  static const NAME = 'device_settings';

  final bool growable;

  /// Returns an instance of DeviceSettingsMessage from a bytes list.
  static DeviceSettingsMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = DeviceSettingsMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the activeTimeZone field. Returns null if the field is not defined in the message.
  int? get activeTimeZone {
    final field = getField(DeviceSettingsActiveTimeZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the activeTimeZone field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activeTimeZone(int? value) {
    final field = getField(DeviceSettingsActiveTimeZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the utcOffset field. Returns null if the field is not defined in the message.
  int? get utcOffset {
    final field = getField(DeviceSettingsUtcOffsetField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the utcOffset field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set utcOffset(int? value) {
    final field = getField(DeviceSettingsUtcOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timeOffset field. Returns null if the field is not defined in the message.
  int? get timeOffset {
    final field = getField(DeviceSettingsTimeOffsetField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeOffset field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeOffset(int? value) {
    final field = getField(DeviceSettingsTimeOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timeMode field. Returns null if the field is not defined in the message.
  TimeMode? get timeMode {
    final field = getField(DeviceSettingsTimeModeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return TimeModeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the timeMode field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeMode(TimeMode? value) {
    final field = getField(DeviceSettingsTimeModeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timeZoneOffset field. Returns null if the field is not defined in the message.
  double? get timeZoneOffset {
    final field = getField(DeviceSettingsTimeZoneOffsetField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeZoneOffset field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeZoneOffset(double? value) {
    final field = getField(DeviceSettingsTimeZoneOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the backlightMode field. Returns null if the field is not defined in the message.
  BacklightMode? get backlightMode {
    final field = getField(DeviceSettingsBacklightModeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return BacklightModeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the backlightMode field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set backlightMode(BacklightMode? value) {
    final field = getField(DeviceSettingsBacklightModeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the activityTrackerEnabled field. Returns null if the field is not defined in the message.
  bool? get activityTrackerEnabled {
    final field = getField(DeviceSettingsActivityTrackerEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the activityTrackerEnabled field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activityTrackerEnabled(bool? value) {
    final field = getField(DeviceSettingsActivityTrackerEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get clockTime {
    final field = getField(DeviceSettingsClockTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set clockTime(int? value) {
    final field = getField(DeviceSettingsClockTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the pagesEnabled field. Returns null if the field is not defined in the message.
  int? get pagesEnabled {
    final field = getField(DeviceSettingsPagesEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the pagesEnabled field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set pagesEnabled(int? value) {
    final field = getField(DeviceSettingsPagesEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the moveAlertEnabled field. Returns null if the field is not defined in the message.
  bool? get moveAlertEnabled {
    final field = getField(DeviceSettingsMoveAlertEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the moveAlertEnabled field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set moveAlertEnabled(bool? value) {
    final field = getField(DeviceSettingsMoveAlertEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the dateMode field. Returns null if the field is not defined in the message.
  DateMode? get dateMode {
    final field = getField(DeviceSettingsDateModeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DateModeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the dateMode field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set dateMode(DateMode? value) {
    final field = getField(DeviceSettingsDateModeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the displayOrientation field. Returns null if the field is not defined in the message.
  DisplayOrientation? get displayOrientation {
    final field = getField(DeviceSettingsDisplayOrientationField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayOrientationExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the displayOrientation field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set displayOrientation(DisplayOrientation? value) {
    final field = getField(DeviceSettingsDisplayOrientationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the mountingSide field. Returns null if the field is not defined in the message.
  Side? get mountingSide {
    final field = getField(DeviceSettingsMountingSideField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SideExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the mountingSide field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set mountingSide(Side? value) {
    final field = getField(DeviceSettingsMountingSideField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the defaultPage field. Returns null if the field is not defined in the message.
  int? get defaultPage {
    final field = getField(DeviceSettingsDefaultPageField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the defaultPage field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set defaultPage(int? value) {
    final field = getField(DeviceSettingsDefaultPageField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the autosyncMinSteps field. Returns null if the field is not defined in the message.
  int? get autosyncMinSteps {
    final field = getField(DeviceSettingsAutosyncMinStepsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the autosyncMinSteps field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set autosyncMinSteps(int? value) {
    final field = getField(DeviceSettingsAutosyncMinStepsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the autosyncMinTime field. Returns null if the field is not defined in the message.
  int? get autosyncMinTime {
    final field = getField(DeviceSettingsAutosyncMinTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the autosyncMinTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set autosyncMinTime(int? value) {
    final field = getField(DeviceSettingsAutosyncMinTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the lactateThresholdAutodetectEnabled field. Returns null if the field is not defined in the message.
  bool? get lactateThresholdAutodetectEnabled {
    final field =
        getField(DeviceSettingsLactateThresholdAutodetectEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the lactateThresholdAutodetectEnabled field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set lactateThresholdAutodetectEnabled(bool? value) {
    final field =
        getField(DeviceSettingsLactateThresholdAutodetectEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the bleAutoUploadEnabled field. Returns null if the field is not defined in the message.
  bool? get bleAutoUploadEnabled {
    final field = getField(DeviceSettingsBleAutoUploadEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the bleAutoUploadEnabled field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set bleAutoUploadEnabled(bool? value) {
    final field = getField(DeviceSettingsBleAutoUploadEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the autoSyncFrequency field. Returns null if the field is not defined in the message.
  AutoSyncFrequency? get autoSyncFrequency {
    final field = getField(DeviceSettingsAutoSyncFrequencyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return AutoSyncFrequencyExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the autoSyncFrequency field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set autoSyncFrequency(AutoSyncFrequency? value) {
    final field = getField(DeviceSettingsAutoSyncFrequencyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the autoActivityDetect field. Returns null if the field is not defined in the message.
  int? get autoActivityDetect {
    final field = getField(DeviceSettingsAutoActivityDetectField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the autoActivityDetect field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set autoActivityDetect(int? value) {
    final field = getField(DeviceSettingsAutoActivityDetectField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the numberOfScreens field. Returns null if the field is not defined in the message.
  int? get numberOfScreens {
    final field = getField(DeviceSettingsNumberOfScreensField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the numberOfScreens field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set numberOfScreens(int? value) {
    final field = getField(DeviceSettingsNumberOfScreensField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the smartNotificationDisplayOrientation field. Returns null if the field is not defined in the message.
  DisplayOrientation? get smartNotificationDisplayOrientation {
    final field =
        getField(DeviceSettingsSmartNotificationDisplayOrientationField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayOrientationExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the smartNotificationDisplayOrientation field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set smartNotificationDisplayOrientation(DisplayOrientation? value) {
    final field =
        getField(DeviceSettingsSmartNotificationDisplayOrientationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the tapInterface field. Returns null if the field is not defined in the message.
  SwitchType? get tapInterface {
    final field = getField(DeviceSettingsTapInterfaceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SwitchTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the tapInterface field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set tapInterface(SwitchType? value) {
    final field = getField(DeviceSettingsTapInterfaceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the tapSensitivity field. Returns null if the field is not defined in the message.
  TapSensitivity? get tapSensitivity {
    final field = getField(DeviceSettingsTapSensitivityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return TapSensitivityExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the tapSensitivity field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set tapSensitivity(TapSensitivity? value) {
    final field = getField(DeviceSettingsTapSensitivityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class DeviceSettingsActiveTimeZoneField extends Field {
  DeviceSettingsActiveTimeZoneField({int size = 0, bool growable = true})
      : super(
            name: 'active_time_zone',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class DeviceSettingsUtcOffsetField extends Field {
  DeviceSettingsUtcOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'utc_offset',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class DeviceSettingsTimeOffsetField extends Field {
  DeviceSettingsTimeOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'time_offset',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class DeviceSettingsTimeModeField extends Field {
  DeviceSettingsTimeModeField({int size = 0, bool growable = true})
      : super(
            name: 'time_mode',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class DeviceSettingsTimeZoneOffsetField extends Field {
  DeviceSettingsTimeZoneOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'time_zone_offset',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 4,
            size: size,
            units: 'hr',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class DeviceSettingsBacklightModeField extends Field {
  DeviceSettingsBacklightModeField({int size = 0, bool growable = true})
      : super(
            name: 'backlight_mode',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class DeviceSettingsActivityTrackerEnabledField extends Field {
  DeviceSettingsActivityTrackerEnabledField(
      {int size = 0, bool growable = true})
      : super(
            name: 'activity_tracker_enabled',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 36;
}

class DeviceSettingsClockTimeField extends Field {
  DeviceSettingsClockTimeField({int size = 0, bool growable = true})
      : super(
            name: 'clock_time',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 39;
}

class DeviceSettingsPagesEnabledField extends Field {
  DeviceSettingsPagesEnabledField({int size = 0, bool growable = true})
      : super(
            name: 'pages_enabled',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 40;
}

class DeviceSettingsMoveAlertEnabledField extends Field {
  DeviceSettingsMoveAlertEnabledField({int size = 0, bool growable = true})
      : super(
            name: 'move_alert_enabled',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 46;
}

class DeviceSettingsDateModeField extends Field {
  DeviceSettingsDateModeField({int size = 0, bool growable = true})
      : super(
            name: 'date_mode',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 47;
}

class DeviceSettingsDisplayOrientationField extends Field {
  DeviceSettingsDisplayOrientationField({int size = 0, bool growable = true})
      : super(
            name: 'display_orientation',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 55;
}

class DeviceSettingsMountingSideField extends Field {
  DeviceSettingsMountingSideField({int size = 0, bool growable = true})
      : super(
            name: 'mounting_side',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 56;
}

class DeviceSettingsDefaultPageField extends Field {
  DeviceSettingsDefaultPageField({int size = 0, bool growable = true})
      : super(
            name: 'default_page',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 57;
}

class DeviceSettingsAutosyncMinStepsField extends Field {
  DeviceSettingsAutosyncMinStepsField({int size = 0, bool growable = true})
      : super(
            name: 'autosync_min_steps',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'steps',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 58;
}

class DeviceSettingsAutosyncMinTimeField extends Field {
  DeviceSettingsAutosyncMinTimeField({int size = 0, bool growable = true})
      : super(
            name: 'autosync_min_time',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'minutes',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 59;
}

class DeviceSettingsLactateThresholdAutodetectEnabledField extends Field {
  DeviceSettingsLactateThresholdAutodetectEnabledField(
      {int size = 0, bool growable = true})
      : super(
            name: 'lactate_threshold_autodetect_enabled',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 80;
}

class DeviceSettingsBleAutoUploadEnabledField extends Field {
  DeviceSettingsBleAutoUploadEnabledField({int size = 0, bool growable = true})
      : super(
            name: 'ble_auto_upload_enabled',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 86;
}

class DeviceSettingsAutoSyncFrequencyField extends Field {
  DeviceSettingsAutoSyncFrequencyField({int size = 0, bool growable = true})
      : super(
            name: 'auto_sync_frequency',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 89;
}

class DeviceSettingsAutoActivityDetectField extends Field {
  DeviceSettingsAutoActivityDetectField({int size = 0, bool growable = true})
      : super(
            name: 'auto_activity_detect',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 90;
}

class DeviceSettingsNumberOfScreensField extends Field {
  DeviceSettingsNumberOfScreensField({int size = 0, bool growable = true})
      : super(
            name: 'number_of_screens',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 94;
}

class DeviceSettingsSmartNotificationDisplayOrientationField extends Field {
  DeviceSettingsSmartNotificationDisplayOrientationField(
      {int size = 0, bool growable = true})
      : super(
            name: 'smart_notification_display_orientation',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 95;
}

class DeviceSettingsTapInterfaceField extends Field {
  DeviceSettingsTapInterfaceField({int size = 0, bool growable = true})
      : super(
            name: 'tap_interface',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 134;
}

class DeviceSettingsTapSensitivityField extends Field {
  DeviceSettingsTapSensitivityField({int size = 0, bool growable = true})
      : super(
            name: 'tap_sensitivity',
            id: ID,
            type: BaseType.ENUM,
            offset: 1,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 174;
}
