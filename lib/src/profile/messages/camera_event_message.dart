/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class CameraEventMessage extends DataMessage {

   CameraEventMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: CameraEventMessage.NAME,
            globalId: CameraEventMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage?.getFieldDefinition(TimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              CameraEventTimestampMsField(
                  size: definitionMessage?.getFieldDefinition(CameraEventTimestampMsField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              CameraEventCameraEventTypeField(
                  size: definitionMessage?.getFieldDefinition(CameraEventCameraEventTypeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              CameraEventCameraFileUuidField(
                  size: definitionMessage?.getFieldDefinition(CameraEventCameraFileUuidField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              CameraEventCameraOrientationField(
                  size: definitionMessage?.getFieldDefinition(CameraEventCameraOrientationField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 161;
  static const NAME = 'camera_event';

  final bool growable;

  static CameraEventMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = CameraEventMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
     final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
   set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get timestampMs {
     final field = getField(CameraEventTimestampMsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set timestampMs(int? value) {
    final field = getField(CameraEventTimestampMsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  CameraEventType? get cameraEventType {
     final field = getField(CameraEventCameraEventTypeField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return CameraEventTypeExt.fromValue(value);
    } else {
      return null;
    }
  }
   set cameraEventType(CameraEventType? value) {
    final field = getField(CameraEventCameraEventTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  String? get cameraFileUuid {
     final field = getField(CameraEventCameraFileUuidField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set cameraFileUuid(String? value) {
    final field = getField(CameraEventCameraFileUuidField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  CameraOrientationType? get cameraOrientation {
     final field = getField(CameraEventCameraOrientationField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return CameraOrientationTypeExt.fromValue(value);
    } else {
      return null;
    }
  }
   set cameraOrientation(CameraOrientationType? value) {
    final field = getField(CameraEventCameraOrientationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }



}



class CameraEventTimestampMsField extends Field {
 CameraEventTimestampMsField({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_ms',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class CameraEventCameraEventTypeField extends Field {
 CameraEventCameraEventTypeField({int size = 0, bool growable = true})
      : super(
            name: 'camera_event_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class CameraEventCameraFileUuidField extends Field {
 CameraEventCameraFileUuidField({int size = 0, bool growable = true})
      : super(
            name: 'camera_file_uuid',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class CameraEventCameraOrientationField extends Field {
 CameraEventCameraOrientationField({int size = 0, bool growable = true})
      : super(
            name: 'camera_orientation',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}