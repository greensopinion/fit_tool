/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';

class AntChannelIdMessage extends DataMessage {
  AntChannelIdMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: AntChannelIdMessage.NAME,
            globalId: AntChannelIdMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              AntChannelIdChannelNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AntChannelIdChannelNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntChannelIdDeviceTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntChannelIdDeviceTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntChannelIdDeviceNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntChannelIdDeviceNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntChannelIdTransmissionTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AntChannelIdTransmissionTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntChannelIdDeviceIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntChannelIdDeviceIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 82;
  static const NAME = 'ant_channel_id';

  final bool growable;

  /// Returns an instance of AntChannelIdMessage from a bytes list.
  static AntChannelIdMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = AntChannelIdMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the channelNumber field. Returns null if the field is not defined in the message.
  int? get channelNumber {
    final field = getField(AntChannelIdChannelNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the channelNumber field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set channelNumber(int? value) {
    final field = getField(AntChannelIdChannelNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the deviceType field. Returns null if the field is not defined in the message.
  int? get deviceType {
    final field = getField(AntChannelIdDeviceTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set deviceType(int? value) {
    final field = getField(AntChannelIdDeviceTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the deviceNumber field. Returns null if the field is not defined in the message.
  int? get deviceNumber {
    final field = getField(AntChannelIdDeviceNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceNumber field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set deviceNumber(int? value) {
    final field = getField(AntChannelIdDeviceNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the transmissionType field. Returns null if the field is not defined in the message.
  int? get transmissionType {
    final field = getField(AntChannelIdTransmissionTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the transmissionType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set transmissionType(int? value) {
    final field = getField(AntChannelIdTransmissionTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the deviceIndex field. Returns null if the field is not defined in the message.
  int? get deviceIndex {
    final field = getField(AntChannelIdDeviceIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set deviceIndex(int? value) {
    final field = getField(AntChannelIdDeviceIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class AntChannelIdChannelNumberField extends Field {
  AntChannelIdChannelNumberField({int size = 0, bool growable = true})
      : super(
            name: 'channel_number',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class AntChannelIdDeviceTypeField extends Field {
  AntChannelIdDeviceTypeField({int size = 0, bool growable = true})
      : super(
            name: 'device_type',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class AntChannelIdDeviceNumberField extends Field {
  AntChannelIdDeviceNumberField({int size = 0, bool growable = true})
      : super(
            name: 'device_number',
            id: ID,
            type: BaseType.UINT16Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class AntChannelIdTransmissionTypeField extends Field {
  AntChannelIdTransmissionTypeField({int size = 0, bool growable = true})
      : super(
            name: 'transmission_type',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class AntChannelIdDeviceIndexField extends Field {
  AntChannelIdDeviceIndexField({int size = 0, bool growable = true})
      : super(
            name: 'device_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}
