/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class ClimbProMessage extends DataMessage {
  ClimbProMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: ClimbProMessage.NAME,
            globalId: ClimbProMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ClimbProPositionLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(ClimbProPositionLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ClimbProPositionLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(ClimbProPositionLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ClimbProClimbProEventField(
                  size: definitionMessage
                          ?.getFieldDefinition(ClimbProClimbProEventField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ClimbProClimbNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(ClimbProClimbNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ClimbProClimbCategoryField(
                  size: definitionMessage
                          ?.getFieldDefinition(ClimbProClimbCategoryField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ClimbProCurrentDistField(
                  size: definitionMessage
                          ?.getFieldDefinition(ClimbProCurrentDistField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 317;
  static const NAME = 'climb_pro';

  final bool growable;

  /// Returns an instance of ClimbProMessage from a bytes list.
  static ClimbProMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = ClimbProMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the positionLat field. Returns null if the field is not defined in the message.
  double? get positionLat {
    final field = getField(ClimbProPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the positionLat field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set positionLat(double? value) {
    final field = getField(ClimbProPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the positionLong field. Returns null if the field is not defined in the message.
  double? get positionLong {
    final field = getField(ClimbProPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the positionLong field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set positionLong(double? value) {
    final field = getField(ClimbProPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the climbProEvent field. Returns null if the field is not defined in the message.
  ClimbProEvent? get climbProEvent {
    final field = getField(ClimbProClimbProEventField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ClimbProEventExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the climbProEvent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set climbProEvent(ClimbProEvent? value) {
    final field = getField(ClimbProClimbProEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the climbNumber field. Returns null if the field is not defined in the message.
  int? get climbNumber {
    final field = getField(ClimbProClimbNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the climbNumber field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set climbNumber(int? value) {
    final field = getField(ClimbProClimbNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the climbCategory field. Returns null if the field is not defined in the message.
  int? get climbCategory {
    final field = getField(ClimbProClimbCategoryField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the climbCategory field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set climbCategory(int? value) {
    final field = getField(ClimbProClimbCategoryField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the currentDist field. Returns null if the field is not defined in the message.
  double? get currentDist {
    final field = getField(ClimbProCurrentDistField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the currentDist field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set currentDist(double? value) {
    final field = getField(ClimbProCurrentDistField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class ClimbProPositionLatField extends Field {
  ClimbProPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class ClimbProPositionLongField extends Field {
  ClimbProPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class ClimbProClimbProEventField extends Field {
  ClimbProClimbProEventField({int size = 0, bool growable = true})
      : super(
            name: 'climb_pro_event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class ClimbProClimbNumberField extends Field {
  ClimbProClimbNumberField({int size = 0, bool growable = true})
      : super(
            name: 'climb_number',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class ClimbProClimbCategoryField extends Field {
  ClimbProClimbCategoryField({int size = 0, bool growable = true})
      : super(
            name: 'climb_category',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class ClimbProCurrentDistField extends Field {
  ClimbProCurrentDistField({int size = 0, bool growable = true})
      : super(
            name: 'current_dist',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}
