/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class FileCapabilitiesMessage extends DataMessage {

   FileCapabilitiesMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: FileCapabilitiesMessage.NAME,
            globalId: FileCapabilitiesMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage?.getFieldDefinition(MessageIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              FileCapabilitiesTypeField(
                  size: definitionMessage?.getFieldDefinition(FileCapabilitiesTypeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              FileCapabilitiesFlagsField(
                  size: definitionMessage?.getFieldDefinition(FileCapabilitiesFlagsField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              FileCapabilitiesDirectoryField(
                  size: definitionMessage?.getFieldDefinition(FileCapabilitiesDirectoryField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              FileCapabilitiesMaxCountField(
                  size: definitionMessage?.getFieldDefinition(FileCapabilitiesMaxCountField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              FileCapabilitiesMaxSizeField(
                  size: definitionMessage?.getFieldDefinition(FileCapabilitiesMaxSizeField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 37;
  static const NAME = 'file_capabilities';

  final bool growable;

  static FileCapabilitiesMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = FileCapabilitiesMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  int? get messageIndex {
     final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  FileType? get type {
     final field = getField(FileCapabilitiesTypeField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return FileTypeExt.fromValue(value);
    } else {
      return null;
    }
  }
   set type(FileType? value) {
    final field = getField(FileCapabilitiesTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  int? get flags {
     final field = getField(FileCapabilitiesFlagsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set flags(int? value) {
    final field = getField(FileCapabilitiesFlagsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  String? get directory {
     final field = getField(FileCapabilitiesDirectoryField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set directory(String? value) {
    final field = getField(FileCapabilitiesDirectoryField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxCount {
     final field = getField(FileCapabilitiesMaxCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxCount(int? value) {
    final field = getField(FileCapabilitiesMaxCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxSize {
     final field = getField(FileCapabilitiesMaxSizeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxSize(int? value) {
    final field = getField(FileCapabilitiesMaxSizeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class FileCapabilitiesTypeField extends Field {
 FileCapabilitiesTypeField({int size = 0, bool growable = true})
      : super(
            name: 'type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class FileCapabilitiesFlagsField extends Field {
 FileCapabilitiesFlagsField({int size = 0, bool growable = true})
      : super(
            name: 'flags',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class FileCapabilitiesDirectoryField extends Field {
 FileCapabilitiesDirectoryField({int size = 0, bool growable = true})
      : super(
            name: 'directory',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class FileCapabilitiesMaxCountField extends Field {
 FileCapabilitiesMaxCountField({int size = 0, bool growable = true})
      : super(
            name: 'max_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}
class FileCapabilitiesMaxSizeField extends Field {
 FileCapabilitiesMaxSizeField({int size = 0, bool growable = true})
      : super(
            name: 'max_size',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bytes',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 4;
}