/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';

// ignore_for_file: constant_identifier_names

class CapabilitiesMessage extends DataMessage {
  CapabilitiesMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: CapabilitiesMessage.NAME,
            globalId: CapabilitiesMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              CapabilitiesLanguagesField(
                  size: definitionMessage
                          ?.getFieldDefinition(CapabilitiesLanguagesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              CapabilitiesSportsField(
                  size: definitionMessage
                          ?.getFieldDefinition(CapabilitiesSportsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              CapabilitiesWorkoutsSupportedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              CapabilitiesWorkoutsSupportedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              CapabilitiesConnectivitySupportedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              CapabilitiesConnectivitySupportedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 1;
  static const NAME = 'capabilities';

  final bool growable;

  /// Returns an instance of CapabilitiesMessage from a bytes list.
  static CapabilitiesMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = CapabilitiesMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the languages field. Returns null if the field is not defined in the message.
  int? get languages {
    final field = getField(CapabilitiesLanguagesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the languages field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set languages(int? value) {
    final field = getField(CapabilitiesLanguagesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the sports field. Returns null if the field is not defined in the message.
  int? get sports {
    final field = getField(CapabilitiesSportsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the sports field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sports(int? value) {
    final field = getField(CapabilitiesSportsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the workoutsSupported field. Returns null if the field is not defined in the message.
  int? get workoutsSupported {
    final field = getField(CapabilitiesWorkoutsSupportedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the workoutsSupported field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set workoutsSupported(int? value) {
    final field = getField(CapabilitiesWorkoutsSupportedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the connectivitySupported field. Returns null if the field is not defined in the message.
  int? get connectivitySupported {
    final field = getField(CapabilitiesConnectivitySupportedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the connectivitySupported field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set connectivitySupported(int? value) {
    final field = getField(CapabilitiesConnectivitySupportedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class CapabilitiesLanguagesField extends Field {
  CapabilitiesLanguagesField({int size = 0, bool growable = true})
      : super(
            name: 'languages',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class CapabilitiesSportsField extends Field {
  CapabilitiesSportsField({int size = 0, bool growable = true})
      : super(
            name: 'sports',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class CapabilitiesWorkoutsSupportedField extends Field {
  CapabilitiesWorkoutsSupportedField({int size = 0, bool growable = true})
      : super(
            name: 'workouts_supported',
            id: ID,
            type: BaseType.UINT32Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 21;
}

class CapabilitiesConnectivitySupportedField extends Field {
  CapabilitiesConnectivitySupportedField({int size = 0, bool growable = true})
      : super(
            name: 'connectivity_supported',
            id: ID,
            type: BaseType.UINT32Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 23;
}
