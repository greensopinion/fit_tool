/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import 'common_fields.dart';

class AccelerometerDataMessage extends DataMessage {
  AccelerometerDataMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: AccelerometerDataMessage.NAME,
            globalId: AccelerometerDataMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataTimestampMsField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataTimestampMsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataSampleTimeOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataSampleTimeOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataAccelXField(
                  size: definitionMessage
                          ?.getFieldDefinition(AccelerometerDataAccelXField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataAccelYField(
                  size: definitionMessage
                          ?.getFieldDefinition(AccelerometerDataAccelYField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataAccelZField(
                  size: definitionMessage
                          ?.getFieldDefinition(AccelerometerDataAccelZField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataCalibratedAccelXField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataCalibratedAccelXField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataCalibratedAccelYField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataCalibratedAccelYField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataCalibratedAccelZField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataCalibratedAccelZField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataCompressedCalibratedAccelXField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataCompressedCalibratedAccelXField
                                  .ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataCompressedCalibratedAccelYField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataCompressedCalibratedAccelYField
                                  .ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AccelerometerDataCompressedCalibratedAccelZField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AccelerometerDataCompressedCalibratedAccelZField
                                  .ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 165;
  static const NAME = 'accelerometer_data';

  final bool growable;

  /// Returns an instance of AccelerometerDataMessage from a bytes list.
  static AccelerometerDataMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        AccelerometerDataMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timestampMs field. Returns null if the field is not defined in the message.
  int? get timestampMs {
    final field = getField(AccelerometerDataTimestampMsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestampMs field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestampMs(int? value) {
    final field = getField(AccelerometerDataTimestampMsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the sampleTimeOffset field. Returns null if the field is not defined in the message.
  int? get sampleTimeOffset {
    final field = getField(AccelerometerDataSampleTimeOffsetField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the sampleTimeOffset field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sampleTimeOffset(int? value) {
    final field = getField(AccelerometerDataSampleTimeOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the accelX field. Returns null if the field is not defined in the message.
  int? get accelX {
    final field = getField(AccelerometerDataAccelXField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the accelX field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set accelX(int? value) {
    final field = getField(AccelerometerDataAccelXField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the accelY field. Returns null if the field is not defined in the message.
  int? get accelY {
    final field = getField(AccelerometerDataAccelYField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the accelY field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set accelY(int? value) {
    final field = getField(AccelerometerDataAccelYField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the accelZ field. Returns null if the field is not defined in the message.
  int? get accelZ {
    final field = getField(AccelerometerDataAccelZField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the accelZ field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set accelZ(int? value) {
    final field = getField(AccelerometerDataAccelZField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the calibratedAccelX field. Returns null if the field is not defined in the message.
  double? get calibratedAccelX {
    final field = getField(AccelerometerDataCalibratedAccelXField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the calibratedAccelX field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set calibratedAccelX(double? value) {
    final field = getField(AccelerometerDataCalibratedAccelXField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the calibratedAccelY field. Returns null if the field is not defined in the message.
  double? get calibratedAccelY {
    final field = getField(AccelerometerDataCalibratedAccelYField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the calibratedAccelY field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set calibratedAccelY(double? value) {
    final field = getField(AccelerometerDataCalibratedAccelYField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the calibratedAccelZ field. Returns null if the field is not defined in the message.
  double? get calibratedAccelZ {
    final field = getField(AccelerometerDataCalibratedAccelZField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the calibratedAccelZ field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set calibratedAccelZ(double? value) {
    final field = getField(AccelerometerDataCalibratedAccelZField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the compressedCalibratedAccelX field. Returns null if the field is not defined in the message.
  int? get compressedCalibratedAccelX {
    final field = getField(AccelerometerDataCompressedCalibratedAccelXField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the compressedCalibratedAccelX field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set compressedCalibratedAccelX(int? value) {
    final field = getField(AccelerometerDataCompressedCalibratedAccelXField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the compressedCalibratedAccelY field. Returns null if the field is not defined in the message.
  int? get compressedCalibratedAccelY {
    final field = getField(AccelerometerDataCompressedCalibratedAccelYField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the compressedCalibratedAccelY field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set compressedCalibratedAccelY(int? value) {
    final field = getField(AccelerometerDataCompressedCalibratedAccelYField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the compressedCalibratedAccelZ field. Returns null if the field is not defined in the message.
  int? get compressedCalibratedAccelZ {
    final field = getField(AccelerometerDataCompressedCalibratedAccelZField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the compressedCalibratedAccelZ field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set compressedCalibratedAccelZ(int? value) {
    final field = getField(AccelerometerDataCompressedCalibratedAccelZField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class AccelerometerDataTimestampMsField extends Field {
  AccelerometerDataTimestampMsField({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_ms',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class AccelerometerDataSampleTimeOffsetField extends Field {
  AccelerometerDataSampleTimeOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'sample_time_offset',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class AccelerometerDataAccelXField extends Field {
  AccelerometerDataAccelXField({int size = 0, bool growable = true})
      : super(
            name: 'accel_x',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class AccelerometerDataAccelYField extends Field {
  AccelerometerDataAccelYField({int size = 0, bool growable = true})
      : super(
            name: 'accel_y',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class AccelerometerDataAccelZField extends Field {
  AccelerometerDataAccelZField({int size = 0, bool growable = true})
      : super(
            name: 'accel_z',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class AccelerometerDataCalibratedAccelXField extends Field {
  AccelerometerDataCalibratedAccelXField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_accel_x',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'g',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class AccelerometerDataCalibratedAccelYField extends Field {
  AccelerometerDataCalibratedAccelYField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_accel_y',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'g',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class AccelerometerDataCalibratedAccelZField extends Field {
  AccelerometerDataCalibratedAccelZField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_accel_z',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'g',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class AccelerometerDataCompressedCalibratedAccelXField extends Field {
  AccelerometerDataCompressedCalibratedAccelXField(
      {int size = 0, bool growable = true})
      : super(
            name: 'compressed_calibrated_accel_x',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mG',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class AccelerometerDataCompressedCalibratedAccelYField extends Field {
  AccelerometerDataCompressedCalibratedAccelYField(
      {int size = 0, bool growable = true})
      : super(
            name: 'compressed_calibrated_accel_y',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mG',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class AccelerometerDataCompressedCalibratedAccelZField extends Field {
  AccelerometerDataCompressedCalibratedAccelZField(
      {int size = 0, bool growable = true})
      : super(
            name: 'compressed_calibrated_accel_z',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mG',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 10;
}
