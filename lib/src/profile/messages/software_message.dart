/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class SoftwareMessage extends DataMessage {

   SoftwareMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: SoftwareMessage.NAME,
            globalId: SoftwareMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage?.getFieldDefinition(MessageIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SoftwareVersionField(
                  size: definitionMessage?.getFieldDefinition(SoftwareVersionField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SoftwarePartNumberField(
                  size: definitionMessage?.getFieldDefinition(SoftwarePartNumberField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 35;
  static const NAME = 'software';

  final bool growable;

  static SoftwareMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = SoftwareMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  int? get messageIndex {
     final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get version {
     final field = getField(SoftwareVersionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set version(double? value) {
    final field = getField(SoftwareVersionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  String? get partNumber {
     final field = getField(SoftwarePartNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set partNumber(String? value) {
    final field = getField(SoftwarePartNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class SoftwareVersionField extends Field {
 SoftwareVersionField({int size = 0, bool growable = true})
      : super(
            name: 'version',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}
class SoftwarePartNumberField extends Field {
 SoftwarePartNumberField({int size = 0, bool growable = true})
      : super(
            name: 'part_number',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 5;
}