/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class LapMessage extends DataMessage {
  LapMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: LapMessage.NAME,
            globalId: LapMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEventField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEventField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEventTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEventTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapStartTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapStartTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapStartPositionLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapStartPositionLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapStartPositionLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapStartPositionLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEndPositionLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEndPositionLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEndPositionLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEndPositionLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalElapsedTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalElapsedTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalTimerTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalTimerTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalFatCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalFatCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalAscentField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalAscentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalDescentField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalDescentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapIntensityField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapIntensityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapLapTriggerField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapLapTriggerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEventGroupField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEventGroupField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapNumLengthsField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapNumLengthsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapNormalizedPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapNormalizedPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapLeftRightBalanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapLeftRightBalanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapFirstLengthIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapFirstLengthIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgStrokeDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgStrokeDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapSwimStrokeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapSwimStrokeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapSubSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapSubSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapNumActiveLengthsField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapNumActiveLengthsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalWorkField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalWorkField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapGpsAccuracyField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapGpsAccuracyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgPosGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgPosGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgNegGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgNegGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxPosGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxPosGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxNegGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxNegGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalMovingTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalMovingTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgPosVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgPosVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgNegVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgNegVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxPosVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxPosVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxNegVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxNegVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTimeInHrZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTimeInHrZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTimeInSpeedZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTimeInSpeedZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTimeInCadenceZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTimeInCadenceZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTimeInPowerZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTimeInPowerZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapRepetitionNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapRepetitionNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMinAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMinAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMinHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMinHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapWorkoutStepIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapWorkoutStepIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapOpponentScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapOpponentScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapStrokeCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapStrokeCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapZoneCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapZoneCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgVerticalOscillationField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgVerticalOscillationField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgStanceTimePercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgStanceTimePercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgStanceTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgStanceTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgFractionalCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgFractionalCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxFractionalCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxFractionalCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalFractionalCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalFractionalCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapPlayerScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapPlayerScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgTotalHemoglobinConcField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgTotalHemoglobinConcField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMinTotalHemoglobinConcField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapMinTotalHemoglobinConcField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxTotalHemoglobinConcField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapMaxTotalHemoglobinConcField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgSaturatedHemoglobinPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgSaturatedHemoglobinPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMinSaturatedHemoglobinPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapMinSaturatedHemoglobinPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxSaturatedHemoglobinPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapMaxSaturatedHemoglobinPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgLeftTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgLeftTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgRightTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgRightTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgLeftPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgLeftPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgRightPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgRightPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgCombinedPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgCombinedPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTimeStandingField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTimeStandingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapStandCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapStandCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgLeftPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgLeftPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgRightPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgRightPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgLeftPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgLeftPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgLeftPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgLeftPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgRightPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgRightPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgRightPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapAvgRightPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgPowerPositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgPowerPositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxPowerPositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxPowerPositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgCadencePositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgCadencePositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxCadencePositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxCadencePositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEnhancedAvgSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEnhancedAvgSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEnhancedMaxSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEnhancedMaxSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEnhancedAvgAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEnhancedAvgAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEnhancedMinAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEnhancedMinAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapEnhancedMaxAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapEnhancedMaxAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgLevMotorPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgLevMotorPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxLevMotorPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxLevMotorPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapLevBatteryConsumptionField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapLevBatteryConsumptionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgVerticalRatioField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgVerticalRatioField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgStanceTimeBalanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgStanceTimeBalanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgStepLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgStepLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgVamField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgVamField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalGritField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalGritField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalFlowField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalFlowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapJumpCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapJumpCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgGritField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgGritField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgFlowField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgFlowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalFractionalAscentField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapTotalFractionalAscentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapTotalFractionalDescentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              LapTotalFractionalDescentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapAvgCoreTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapAvgCoreTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMinCoreTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMinCoreTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LapMaxCoreTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(LapMaxCoreTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 19;
  static const NAME = 'lap';

  final bool growable;

  static LapMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = LapMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  Event? get event {
    final field = getField(LapEventField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventExt.fromValue(value);
    } else {
      return null;
    }
  }

  set event(Event? value) {
    final field = getField(LapEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  EventType? get eventType {
    final field = getField(LapEventTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set eventType(EventType? value) {
    final field = getField(LapEventTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get startTime {
    final field = getField(LapStartTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set startTime(int? value) {
    final field = getField(LapStartTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get startPositionLat {
    final field = getField(LapStartPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set startPositionLat(double? value) {
    final field = getField(LapStartPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get startPositionLong {
    final field = getField(LapStartPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set startPositionLong(double? value) {
    final field = getField(LapStartPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get endPositionLat {
    final field = getField(LapEndPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set endPositionLat(double? value) {
    final field = getField(LapEndPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get endPositionLong {
    final field = getField(LapEndPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set endPositionLong(double? value) {
    final field = getField(LapEndPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalElapsedTime {
    final field = getField(LapTotalElapsedTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalElapsedTime(double? value) {
    final field = getField(LapTotalElapsedTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalTimerTime {
    final field = getField(LapTotalTimerTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalTimerTime(double? value) {
    final field = getField(LapTotalTimerTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalDistance {
    final field = getField(LapTotalDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalDistance(double? value) {
    final field = getField(LapTotalDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalCycles {
    final field = getField(LapTotalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalCycles(int? value) {
    final field = getField(LapTotalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalStrides {
    final field = getField(LapTotalCyclesField.ID);
    final typeField = getField(LapSportField.ID);

    final isSubFieldValid =
        typeField != null && [1, 11].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalStrides(int? value) {
    final field = getField(LapTotalCyclesField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalStrokes {
    final field = getField(LapTotalCyclesField.ID);
    final typeField = getField(LapSportField.ID);

    final isSubFieldValid =
        typeField != null && [2, 5, 15, 37].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalStrokes(int? value) {
    final field = getField(LapTotalCyclesField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalCalories {
    final field = getField(LapTotalCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalCalories(int? value) {
    final field = getField(LapTotalCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalFatCalories {
    final field = getField(LapTotalFatCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFatCalories(int? value) {
    final field = getField(LapTotalFatCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgSpeed {
    final field = getField(LapAvgSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgSpeed(double? value) {
    final field = getField(LapAvgSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxSpeed {
    final field = getField(LapMaxSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxSpeed(double? value) {
    final field = getField(LapMaxSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgHeartRate {
    final field = getField(LapAvgHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgHeartRate(int? value) {
    final field = getField(LapAvgHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxHeartRate {
    final field = getField(LapMaxHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxHeartRate(int? value) {
    final field = getField(LapMaxHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgCadence {
    final field = getField(LapAvgCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCadence(int? value) {
    final field = getField(LapAvgCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgRunningCadence {
    final field = getField(LapAvgCadenceField.ID);
    final typeField = getField(LapSportField.ID);

    final isSubFieldValid =
        typeField != null && [1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRunningCadence(int? value) {
    final field = getField(LapAvgCadenceField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxCadence {
    final field = getField(LapMaxCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxCadence(int? value) {
    final field = getField(LapMaxCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxRunningCadence {
    final field = getField(LapMaxCadenceField.ID);
    final typeField = getField(LapSportField.ID);

    final isSubFieldValid =
        typeField != null && [1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxRunningCadence(int? value) {
    final field = getField(LapMaxCadenceField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgPower {
    final field = getField(LapAvgPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPower(int? value) {
    final field = getField(LapAvgPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxPower {
    final field = getField(LapMaxPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPower(int? value) {
    final field = getField(LapMaxPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalAscent {
    final field = getField(LapTotalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalAscent(int? value) {
    final field = getField(LapTotalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalDescent {
    final field = getField(LapTotalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalDescent(int? value) {
    final field = getField(LapTotalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  Intensity? get intensity {
    final field = getField(LapIntensityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return IntensityExt.fromValue(value);
    } else {
      return null;
    }
  }

  set intensity(Intensity? value) {
    final field = getField(LapIntensityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  LapTrigger? get lapTrigger {
    final field = getField(LapLapTriggerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return LapTriggerExt.fromValue(value);
    } else {
      return null;
    }
  }

  set lapTrigger(LapTrigger? value) {
    final field = getField(LapLapTriggerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  Sport? get sport {
    final field = getField(LapSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SportExt.fromValue(value);
    } else {
      return null;
    }
  }

  set sport(Sport? value) {
    final field = getField(LapSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  int? get eventGroup {
    final field = getField(LapEventGroupField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set eventGroup(int? value) {
    final field = getField(LapEventGroupField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get numLengths {
    final field = getField(LapNumLengthsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set numLengths(int? value) {
    final field = getField(LapNumLengthsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get normalizedPower {
    final field = getField(LapNormalizedPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set normalizedPower(int? value) {
    final field = getField(LapNormalizedPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get leftRightBalance {
    final field = getField(LapLeftRightBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set leftRightBalance(int? value) {
    final field = getField(LapLeftRightBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get firstLengthIndex {
    final field = getField(LapFirstLengthIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set firstLengthIndex(int? value) {
    final field = getField(LapFirstLengthIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStrokeDistance {
    final field = getField(LapAvgStrokeDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStrokeDistance(double? value) {
    final field = getField(LapAvgStrokeDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  SwimStroke? get swimStroke {
    final field = getField(LapSwimStrokeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SwimStrokeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set swimStroke(SwimStroke? value) {
    final field = getField(LapSwimStrokeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  SubSport? get subSport {
    final field = getField(LapSubSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SubSportExt.fromValue(value);
    } else {
      return null;
    }
  }

  set subSport(SubSport? value) {
    final field = getField(LapSubSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  int? get numActiveLengths {
    final field = getField(LapNumActiveLengthsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set numActiveLengths(int? value) {
    final field = getField(LapNumActiveLengthsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalWork {
    final field = getField(LapTotalWorkField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalWork(int? value) {
    final field = getField(LapTotalWorkField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgAltitude {
    final field = getField(LapAvgAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgAltitude(double? value) {
    final field = getField(LapAvgAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxAltitude {
    final field = getField(LapMaxAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxAltitude(double? value) {
    final field = getField(LapMaxAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get gpsAccuracy {
    final field = getField(LapGpsAccuracyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set gpsAccuracy(int? value) {
    final field = getField(LapGpsAccuracyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgGrade {
    final field = getField(LapAvgGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgGrade(double? value) {
    final field = getField(LapAvgGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgPosGrade {
    final field = getField(LapAvgPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPosGrade(double? value) {
    final field = getField(LapAvgPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgNegGrade {
    final field = getField(LapAvgNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgNegGrade(double? value) {
    final field = getField(LapAvgNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxPosGrade {
    final field = getField(LapMaxPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPosGrade(double? value) {
    final field = getField(LapMaxPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxNegGrade {
    final field = getField(LapMaxNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxNegGrade(double? value) {
    final field = getField(LapMaxNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgTemperature {
    final field = getField(LapAvgTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgTemperature(int? value) {
    final field = getField(LapAvgTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxTemperature {
    final field = getField(LapMaxTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxTemperature(int? value) {
    final field = getField(LapMaxTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalMovingTime {
    final field = getField(LapTotalMovingTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalMovingTime(double? value) {
    final field = getField(LapTotalMovingTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgPosVerticalSpeed {
    final field = getField(LapAvgPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPosVerticalSpeed(double? value) {
    final field = getField(LapAvgPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgNegVerticalSpeed {
    final field = getField(LapAvgNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgNegVerticalSpeed(double? value) {
    final field = getField(LapAvgNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxPosVerticalSpeed {
    final field = getField(LapMaxPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPosVerticalSpeed(double? value) {
    final field = getField(LapMaxPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxNegVerticalSpeed {
    final field = getField(LapMaxNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxNegVerticalSpeed(double? value) {
    final field = getField(LapMaxNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInHrZone {
    final field = getField(LapTimeInHrZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInHrZone(double? value) {
    final field = getField(LapTimeInHrZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInSpeedZone {
    final field = getField(LapTimeInSpeedZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInSpeedZone(double? value) {
    final field = getField(LapTimeInSpeedZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInCadenceZone {
    final field = getField(LapTimeInCadenceZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInCadenceZone(double? value) {
    final field = getField(LapTimeInCadenceZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInPowerZone {
    final field = getField(LapTimeInPowerZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInPowerZone(double? value) {
    final field = getField(LapTimeInPowerZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get repetitionNum {
    final field = getField(LapRepetitionNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set repetitionNum(int? value) {
    final field = getField(LapRepetitionNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minAltitude {
    final field = getField(LapMinAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minAltitude(double? value) {
    final field = getField(LapMinAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get minHeartRate {
    final field = getField(LapMinHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minHeartRate(int? value) {
    final field = getField(LapMinHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get workoutStepIndex {
    final field = getField(LapWorkoutStepIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set workoutStepIndex(int? value) {
    final field = getField(LapWorkoutStepIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get opponentScore {
    final field = getField(LapOpponentScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set opponentScore(int? value) {
    final field = getField(LapOpponentScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get strokeCount {
    final field = getField(LapStrokeCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set strokeCount(int? value) {
    final field = getField(LapStrokeCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get zoneCount {
    final field = getField(LapZoneCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set zoneCount(int? value) {
    final field = getField(LapZoneCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgVerticalOscillation {
    final field = getField(LapAvgVerticalOscillationField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgVerticalOscillation(double? value) {
    final field = getField(LapAvgVerticalOscillationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStanceTimePercent {
    final field = getField(LapAvgStanceTimePercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStanceTimePercent(double? value) {
    final field = getField(LapAvgStanceTimePercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStanceTime {
    final field = getField(LapAvgStanceTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStanceTime(double? value) {
    final field = getField(LapAvgStanceTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgFractionalCadence {
    final field = getField(LapAvgFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgFractionalCadence(double? value) {
    final field = getField(LapAvgFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxFractionalCadence {
    final field = getField(LapMaxFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxFractionalCadence(double? value) {
    final field = getField(LapMaxFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFractionalCycles {
    final field = getField(LapTotalFractionalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFractionalCycles(double? value) {
    final field = getField(LapTotalFractionalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get playerScore {
    final field = getField(LapPlayerScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set playerScore(int? value) {
    final field = getField(LapPlayerScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgTotalHemoglobinConc {
    final field = getField(LapAvgTotalHemoglobinConcField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgTotalHemoglobinConc(double? value) {
    final field = getField(LapAvgTotalHemoglobinConcField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minTotalHemoglobinConc {
    final field = getField(LapMinTotalHemoglobinConcField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minTotalHemoglobinConc(double? value) {
    final field = getField(LapMinTotalHemoglobinConcField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxTotalHemoglobinConc {
    final field = getField(LapMaxTotalHemoglobinConcField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxTotalHemoglobinConc(double? value) {
    final field = getField(LapMaxTotalHemoglobinConcField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgSaturatedHemoglobinPercent {
    final field = getField(LapAvgSaturatedHemoglobinPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgSaturatedHemoglobinPercent(double? value) {
    final field = getField(LapAvgSaturatedHemoglobinPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minSaturatedHemoglobinPercent {
    final field = getField(LapMinSaturatedHemoglobinPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minSaturatedHemoglobinPercent(double? value) {
    final field = getField(LapMinSaturatedHemoglobinPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxSaturatedHemoglobinPercent {
    final field = getField(LapMaxSaturatedHemoglobinPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxSaturatedHemoglobinPercent(double? value) {
    final field = getField(LapMaxSaturatedHemoglobinPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftTorqueEffectiveness {
    final field = getField(LapAvgLeftTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftTorqueEffectiveness(double? value) {
    final field = getField(LapAvgLeftTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightTorqueEffectiveness {
    final field = getField(LapAvgRightTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightTorqueEffectiveness(double? value) {
    final field = getField(LapAvgRightTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftPedalSmoothness {
    final field = getField(LapAvgLeftPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPedalSmoothness(double? value) {
    final field = getField(LapAvgLeftPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightPedalSmoothness {
    final field = getField(LapAvgRightPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPedalSmoothness(double? value) {
    final field = getField(LapAvgRightPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgCombinedPedalSmoothness {
    final field = getField(LapAvgCombinedPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCombinedPedalSmoothness(double? value) {
    final field = getField(LapAvgCombinedPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeStanding {
    final field = getField(LapTimeStandingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeStanding(double? value) {
    final field = getField(LapTimeStandingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get standCount {
    final field = getField(LapStandCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set standCount(int? value) {
    final field = getField(LapStandCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgLeftPco {
    final field = getField(LapAvgLeftPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPco(int? value) {
    final field = getField(LapAvgLeftPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgRightPco {
    final field = getField(LapAvgRightPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPco(int? value) {
    final field = getField(LapAvgRightPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftPowerPhase {
    final field = getField(LapAvgLeftPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPowerPhase(double? value) {
    final field = getField(LapAvgLeftPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftPowerPhasePeak {
    final field = getField(LapAvgLeftPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPowerPhasePeak(double? value) {
    final field = getField(LapAvgLeftPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightPowerPhase {
    final field = getField(LapAvgRightPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPowerPhase(double? value) {
    final field = getField(LapAvgRightPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightPowerPhasePeak {
    final field = getField(LapAvgRightPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPowerPhasePeak(double? value) {
    final field = getField(LapAvgRightPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgPowerPosition {
    final field = getField(LapAvgPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPowerPosition(int? value) {
    final field = getField(LapAvgPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxPowerPosition {
    final field = getField(LapMaxPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPowerPosition(int? value) {
    final field = getField(LapMaxPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgCadencePosition {
    final field = getField(LapAvgCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCadencePosition(int? value) {
    final field = getField(LapAvgCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxCadencePosition {
    final field = getField(LapMaxCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxCadencePosition(int? value) {
    final field = getField(LapMaxCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedAvgSpeed {
    final field = getField(LapEnhancedAvgSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedAvgSpeed(double? value) {
    final field = getField(LapEnhancedAvgSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedMaxSpeed {
    final field = getField(LapEnhancedMaxSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedMaxSpeed(double? value) {
    final field = getField(LapEnhancedMaxSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedAvgAltitude {
    final field = getField(LapEnhancedAvgAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedAvgAltitude(double? value) {
    final field = getField(LapEnhancedAvgAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedMinAltitude {
    final field = getField(LapEnhancedMinAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedMinAltitude(double? value) {
    final field = getField(LapEnhancedMinAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedMaxAltitude {
    final field = getField(LapEnhancedMaxAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedMaxAltitude(double? value) {
    final field = getField(LapEnhancedMaxAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgLevMotorPower {
    final field = getField(LapAvgLevMotorPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLevMotorPower(int? value) {
    final field = getField(LapAvgLevMotorPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxLevMotorPower {
    final field = getField(LapMaxLevMotorPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxLevMotorPower(int? value) {
    final field = getField(LapMaxLevMotorPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get levBatteryConsumption {
    final field = getField(LapLevBatteryConsumptionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set levBatteryConsumption(double? value) {
    final field = getField(LapLevBatteryConsumptionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgVerticalRatio {
    final field = getField(LapAvgVerticalRatioField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgVerticalRatio(double? value) {
    final field = getField(LapAvgVerticalRatioField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStanceTimeBalance {
    final field = getField(LapAvgStanceTimeBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStanceTimeBalance(double? value) {
    final field = getField(LapAvgStanceTimeBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStepLength {
    final field = getField(LapAvgStepLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStepLength(double? value) {
    final field = getField(LapAvgStepLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgVam {
    final field = getField(LapAvgVamField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgVam(double? value) {
    final field = getField(LapAvgVamField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalGrit {
    final field = getField(LapTotalGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalGrit(double? value) {
    final field = getField(LapTotalGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFlow {
    final field = getField(LapTotalFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFlow(double? value) {
    final field = getField(LapTotalFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get jumpCount {
    final field = getField(LapJumpCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set jumpCount(int? value) {
    final field = getField(LapJumpCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgGrit {
    final field = getField(LapAvgGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgGrit(double? value) {
    final field = getField(LapAvgGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgFlow {
    final field = getField(LapAvgFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgFlow(double? value) {
    final field = getField(LapAvgFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFractionalAscent {
    final field = getField(LapTotalFractionalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFractionalAscent(double? value) {
    final field = getField(LapTotalFractionalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFractionalDescent {
    final field = getField(LapTotalFractionalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFractionalDescent(double? value) {
    final field = getField(LapTotalFractionalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgCoreTemperature {
    final field = getField(LapAvgCoreTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCoreTemperature(double? value) {
    final field = getField(LapAvgCoreTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minCoreTemperature {
    final field = getField(LapMinCoreTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minCoreTemperature(double? value) {
    final field = getField(LapMinCoreTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxCoreTemperature {
    final field = getField(LapMaxCoreTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxCoreTemperature(double? value) {
    final field = getField(LapMaxCoreTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
}

class LapEventField extends Field {
  LapEventField({int size = 0, bool growable = true})
      : super(
            name: 'event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class LapEventTypeField extends Field {
  LapEventTypeField({int size = 0, bool growable = true})
      : super(
            name: 'event_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class LapStartTimeField extends Field {
  LapStartTimeField({int size = 0, bool growable = true})
      : super(
            name: 'start_time',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class LapStartPositionLatField extends Field {
  LapStartPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class LapStartPositionLongField extends Field {
  LapStartPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class LapEndPositionLatField extends Field {
  LapEndPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'end_position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class LapEndPositionLongField extends Field {
  LapEndPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'end_position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class LapTotalElapsedTimeField extends Field {
  LapTotalElapsedTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_elapsed_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class LapTotalTimerTimeField extends Field {
  LapTotalTimerTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_timer_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class LapTotalDistanceField extends Field {
  LapTotalDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'total_distance',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class LapTotalCyclesField extends Field {
  LapTotalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_cycles',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'total_strides',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'strides',
                  referenceMap: {
                    LapSportField.ID: [1, 11]
                  }),
              SubField(
                  name: 'total_strokes',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'strokes',
                  referenceMap: {
                    LapSportField.ID: [2, 5, 15, 37]
                  })
            ]);

  static const ID = 10;
}

class LapTotalCaloriesField extends Field {
  LapTotalCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class LapTotalFatCaloriesField extends Field {
  LapTotalFatCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fat_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class LapAvgSpeedField extends Field {
  LapAvgSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class LapMaxSpeedField extends Field {
  LapMaxSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 14;
}

class LapAvgHeartRateField extends Field {
  LapAvgHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'avg_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 15;
}

class LapMaxHeartRateField extends Field {
  LapMaxHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'max_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 16;
}

class LapAvgCadenceField extends Field {
  LapAvgCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'avg_running_cadence',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  units: 'strides/min',
                  referenceMap: {
                    LapSportField.ID: [1]
                  })
            ]);

  static const ID = 17;
}

class LapMaxCadenceField extends Field {
  LapMaxCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'max_running_cadence',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  units: 'strides/min',
                  referenceMap: {
                    LapSportField.ID: [1]
                  })
            ]);

  static const ID = 18;
}

class LapAvgPowerField extends Field {
  LapAvgPowerField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 19;
}

class LapMaxPowerField extends Field {
  LapMaxPowerField({int size = 0, bool growable = true})
      : super(
            name: 'max_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 20;
}

class LapTotalAscentField extends Field {
  LapTotalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_ascent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 21;
}

class LapTotalDescentField extends Field {
  LapTotalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_descent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 22;
}

class LapIntensityField extends Field {
  LapIntensityField({int size = 0, bool growable = true})
      : super(
            name: 'intensity',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 23;
}

class LapLapTriggerField extends Field {
  LapLapTriggerField({int size = 0, bool growable = true})
      : super(
            name: 'lap_trigger',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 24;
}

class LapSportField extends Field {
  LapSportField({int size = 0, bool growable = true})
      : super(
            name: 'sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 25;
}

class LapEventGroupField extends Field {
  LapEventGroupField({int size = 0, bool growable = true})
      : super(
            name: 'event_group',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 26;
}

class LapNumLengthsField extends Field {
  LapNumLengthsField({int size = 0, bool growable = true})
      : super(
            name: 'num_lengths',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'lengths',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 32;
}

class LapNormalizedPowerField extends Field {
  LapNormalizedPowerField({int size = 0, bool growable = true})
      : super(
            name: 'normalized_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 33;
}

class LapLeftRightBalanceField extends Field {
  LapLeftRightBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'left_right_balance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 34;
}

class LapFirstLengthIndexField extends Field {
  LapFirstLengthIndexField({int size = 0, bool growable = true})
      : super(
            name: 'first_length_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 35;
}

class LapAvgStrokeDistanceField extends Field {
  LapAvgStrokeDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stroke_distance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 37;
}

class LapSwimStrokeField extends Field {
  LapSwimStrokeField({int size = 0, bool growable = true})
      : super(
            name: 'swim_stroke',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 38;
}

class LapSubSportField extends Field {
  LapSubSportField({int size = 0, bool growable = true})
      : super(
            name: 'sub_sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 39;
}

class LapNumActiveLengthsField extends Field {
  LapNumActiveLengthsField({int size = 0, bool growable = true})
      : super(
            name: 'num_active_lengths',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'lengths',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 40;
}

class LapTotalWorkField extends Field {
  LapTotalWorkField({int size = 0, bool growable = true})
      : super(
            name: 'total_work',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'J',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 41;
}

class LapAvgAltitudeField extends Field {
  LapAvgAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 42;
}

class LapMaxAltitudeField extends Field {
  LapMaxAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'max_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 43;
}

class LapGpsAccuracyField extends Field {
  LapGpsAccuracyField({int size = 0, bool growable = true})
      : super(
            name: 'gps_accuracy',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 44;
}

class LapAvgGradeField extends Field {
  LapAvgGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 45;
}

class LapAvgPosGradeField extends Field {
  LapAvgPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 46;
}

class LapAvgNegGradeField extends Field {
  LapAvgNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 47;
}

class LapMaxPosGradeField extends Field {
  LapMaxPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 48;
}

class LapMaxNegGradeField extends Field {
  LapMaxNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 49;
}

class LapAvgTemperatureField extends Field {
  LapAvgTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'avg_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 50;
}

class LapMaxTemperatureField extends Field {
  LapMaxTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'max_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 51;
}

class LapTotalMovingTimeField extends Field {
  LapTotalMovingTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_moving_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 52;
}

class LapAvgPosVerticalSpeedField extends Field {
  LapAvgPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 53;
}

class LapAvgNegVerticalSpeedField extends Field {
  LapAvgNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 54;
}

class LapMaxPosVerticalSpeedField extends Field {
  LapMaxPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 55;
}

class LapMaxNegVerticalSpeedField extends Field {
  LapMaxNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 56;
}

class LapTimeInHrZoneField extends Field {
  LapTimeInHrZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_hr_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 57;
}

class LapTimeInSpeedZoneField extends Field {
  LapTimeInSpeedZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_speed_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 58;
}

class LapTimeInCadenceZoneField extends Field {
  LapTimeInCadenceZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_cadence_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 59;
}

class LapTimeInPowerZoneField extends Field {
  LapTimeInPowerZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_power_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 60;
}

class LapRepetitionNumField extends Field {
  LapRepetitionNumField({int size = 0, bool growable = true})
      : super(
            name: 'repetition_num',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 61;
}

class LapMinAltitudeField extends Field {
  LapMinAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'min_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 62;
}

class LapMinHeartRateField extends Field {
  LapMinHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'min_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 63;
}

class LapWorkoutStepIndexField extends Field {
  LapWorkoutStepIndexField({int size = 0, bool growable = true})
      : super(
            name: 'wkt_step_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 71;
}

class LapOpponentScoreField extends Field {
  LapOpponentScoreField({int size = 0, bool growable = true})
      : super(
            name: 'opponent_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 74;
}

class LapStrokeCountField extends Field {
  LapStrokeCountField({int size = 0, bool growable = true})
      : super(
            name: 'stroke_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 75;
}

class LapZoneCountField extends Field {
  LapZoneCountField({int size = 0, bool growable = true})
      : super(
            name: 'zone_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 76;
}

class LapAvgVerticalOscillationField extends Field {
  LapAvgVerticalOscillationField({int size = 0, bool growable = true})
      : super(
            name: 'avg_vertical_oscillation',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 77;
}

class LapAvgStanceTimePercentField extends Field {
  LapAvgStanceTimePercentField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stance_time_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 78;
}

class LapAvgStanceTimeField extends Field {
  LapAvgStanceTimeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stance_time',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 79;
}

class LapAvgFractionalCadenceField extends Field {
  LapAvgFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 80;
}

class LapMaxFractionalCadenceField extends Field {
  LapMaxFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 81;
}

class LapTotalFractionalCyclesField extends Field {
  LapTotalFractionalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_cycles',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 82;
}

class LapPlayerScoreField extends Field {
  LapPlayerScoreField({int size = 0, bool growable = true})
      : super(
            name: 'player_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 83;
}

class LapAvgTotalHemoglobinConcField extends Field {
  LapAvgTotalHemoglobinConcField({int size = 0, bool growable = true})
      : super(
            name: 'avg_total_hemoglobin_conc',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 84;
}

class LapMinTotalHemoglobinConcField extends Field {
  LapMinTotalHemoglobinConcField({int size = 0, bool growable = true})
      : super(
            name: 'min_total_hemoglobin_conc',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 85;
}

class LapMaxTotalHemoglobinConcField extends Field {
  LapMaxTotalHemoglobinConcField({int size = 0, bool growable = true})
      : super(
            name: 'max_total_hemoglobin_conc',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 86;
}

class LapAvgSaturatedHemoglobinPercentField extends Field {
  LapAvgSaturatedHemoglobinPercentField({int size = 0, bool growable = true})
      : super(
            name: 'avg_saturated_hemoglobin_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 87;
}

class LapMinSaturatedHemoglobinPercentField extends Field {
  LapMinSaturatedHemoglobinPercentField({int size = 0, bool growable = true})
      : super(
            name: 'min_saturated_hemoglobin_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 88;
}

class LapMaxSaturatedHemoglobinPercentField extends Field {
  LapMaxSaturatedHemoglobinPercentField({int size = 0, bool growable = true})
      : super(
            name: 'max_saturated_hemoglobin_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 89;
}

class LapAvgLeftTorqueEffectivenessField extends Field {
  LapAvgLeftTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 91;
}

class LapAvgRightTorqueEffectivenessField extends Field {
  LapAvgRightTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 92;
}

class LapAvgLeftPedalSmoothnessField extends Field {
  LapAvgLeftPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 93;
}

class LapAvgRightPedalSmoothnessField extends Field {
  LapAvgRightPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 94;
}

class LapAvgCombinedPedalSmoothnessField extends Field {
  LapAvgCombinedPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_combined_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 95;
}

class LapTimeStandingField extends Field {
  LapTimeStandingField({int size = 0, bool growable = true})
      : super(
            name: 'time_standing',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 98;
}

class LapStandCountField extends Field {
  LapStandCountField({int size = 0, bool growable = true})
      : super(
            name: 'stand_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 99;
}

class LapAvgLeftPcoField extends Field {
  LapAvgLeftPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 100;
}

class LapAvgRightPcoField extends Field {
  LapAvgRightPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 101;
}

class LapAvgLeftPowerPhaseField extends Field {
  LapAvgLeftPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 102;
}

class LapAvgLeftPowerPhasePeakField extends Field {
  LapAvgLeftPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 103;
}

class LapAvgRightPowerPhaseField extends Field {
  LapAvgRightPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 104;
}

class LapAvgRightPowerPhasePeakField extends Field {
  LapAvgRightPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 105;
}

class LapAvgPowerPositionField extends Field {
  LapAvgPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 106;
}

class LapMaxPowerPositionField extends Field {
  LapMaxPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 107;
}

class LapAvgCadencePositionField extends Field {
  LapAvgCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 108;
}

class LapMaxCadencePositionField extends Field {
  LapMaxCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 109;
}

class LapEnhancedAvgSpeedField extends Field {
  LapEnhancedAvgSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_avg_speed',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 110;
}

class LapEnhancedMaxSpeedField extends Field {
  LapEnhancedMaxSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_max_speed',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 111;
}

class LapEnhancedAvgAltitudeField extends Field {
  LapEnhancedAvgAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_avg_altitude',
            id: ID,
            type: BaseType.UINT32,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 112;
}

class LapEnhancedMinAltitudeField extends Field {
  LapEnhancedMinAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_min_altitude',
            id: ID,
            type: BaseType.UINT32,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 113;
}

class LapEnhancedMaxAltitudeField extends Field {
  LapEnhancedMaxAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_max_altitude',
            id: ID,
            type: BaseType.UINT32,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 114;
}

class LapAvgLevMotorPowerField extends Field {
  LapAvgLevMotorPowerField({int size = 0, bool growable = true})
      : super(
            name: 'avg_lev_motor_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 115;
}

class LapMaxLevMotorPowerField extends Field {
  LapMaxLevMotorPowerField({int size = 0, bool growable = true})
      : super(
            name: 'max_lev_motor_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 116;
}

class LapLevBatteryConsumptionField extends Field {
  LapLevBatteryConsumptionField({int size = 0, bool growable = true})
      : super(
            name: 'lev_battery_consumption',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 117;
}

class LapAvgVerticalRatioField extends Field {
  LapAvgVerticalRatioField({int size = 0, bool growable = true})
      : super(
            name: 'avg_vertical_ratio',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 118;
}

class LapAvgStanceTimeBalanceField extends Field {
  LapAvgStanceTimeBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stance_time_balance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 119;
}

class LapAvgStepLengthField extends Field {
  LapAvgStepLengthField({int size = 0, bool growable = true})
      : super(
            name: 'avg_step_length',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 120;
}

class LapAvgVamField extends Field {
  LapAvgVamField({int size = 0, bool growable = true})
      : super(
            name: 'avg_vam',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 121;
}

class LapTotalGritField extends Field {
  LapTotalGritField({int size = 0, bool growable = true})
      : super(
            name: 'total_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 149;
}

class LapTotalFlowField extends Field {
  LapTotalFlowField({int size = 0, bool growable = true})
      : super(
            name: 'total_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 150;
}

class LapJumpCountField extends Field {
  LapJumpCountField({int size = 0, bool growable = true})
      : super(
            name: 'jump_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 151;
}

class LapAvgGritField extends Field {
  LapAvgGritField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 153;
}

class LapAvgFlowField extends Field {
  LapAvgFlowField({int size = 0, bool growable = true})
      : super(
            name: 'avg_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 154;
}

class LapTotalFractionalAscentField extends Field {
  LapTotalFractionalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_ascent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 156;
}

class LapTotalFractionalDescentField extends Field {
  LapTotalFractionalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_descent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 157;
}

class LapAvgCoreTemperatureField extends Field {
  LapAvgCoreTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'avg_core_temperature',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 158;
}

class LapMinCoreTemperatureField extends Field {
  LapMinCoreTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'min_core_temperature',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 159;
}

class LapMaxCoreTemperatureField extends Field {
  LapMaxCoreTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'max_core_temperature',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 160;
}
