/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';

class FieldDescriptionMessage extends DataMessage {
  FieldDescriptionMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: FieldDescriptionMessage.NAME,
            globalId: FieldDescriptionMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              FieldDescriptionDeveloperDataIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionDeveloperDataIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionFieldDefinitionNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionFieldDefinitionNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionFitBaseTypeIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionFitBaseTypeIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionFieldNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionFieldNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionArrayField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldDescriptionArrayField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionComponentsField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionComponentsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionScaleField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldDescriptionScaleField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldDescriptionOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionUnitsField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldDescriptionUnitsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionBitsField(
                  size: definitionMessage
                          ?.getFieldDefinition(FieldDescriptionBitsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionAccumulateField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionAccumulateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionFitBaseUnitIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionFitBaseUnitIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionNativeMesgNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionNativeMesgNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FieldDescriptionNativeFieldNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              FieldDescriptionNativeFieldNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 206;
  static const NAME = 'field_description';

  final bool growable;

  /// Returns an instance of FieldDescriptionMessage from a bytes list.
  static FieldDescriptionMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        FieldDescriptionMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the developerDataIndex field. Returns null if the field is not defined in the message.
  int? get developerDataIndex {
    final field = getField(FieldDescriptionDeveloperDataIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the developerDataIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set developerDataIndex(int? value) {
    final field = getField(FieldDescriptionDeveloperDataIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the fieldDefinitionNumber field. Returns null if the field is not defined in the message.
  int? get fieldDefinitionNumber {
    final field = getField(FieldDescriptionFieldDefinitionNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fieldDefinitionNumber field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fieldDefinitionNumber(int? value) {
    final field = getField(FieldDescriptionFieldDefinitionNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the fitBaseTypeId field. Returns null if the field is not defined in the message.
  int? get fitBaseTypeId {
    final field = getField(FieldDescriptionFitBaseTypeIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fitBaseTypeId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fitBaseTypeId(int? value) {
    final field = getField(FieldDescriptionFitBaseTypeIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the fieldName field. Returns null if the field is not defined in the message.
  String? get fieldName {
    final field = getField(FieldDescriptionFieldNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fieldName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fieldName(String? value) {
    final field = getField(FieldDescriptionFieldNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the array field. Returns null if the field is not defined in the message.
  int? get array {
    final field = getField(FieldDescriptionArrayField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the array field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set array(int? value) {
    final field = getField(FieldDescriptionArrayField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the components field. Returns null if the field is not defined in the message.
  String? get components {
    final field = getField(FieldDescriptionComponentsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the components field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set components(String? value) {
    final field = getField(FieldDescriptionComponentsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the scale field. Returns null if the field is not defined in the message.
  int? get scale {
    final field = getField(FieldDescriptionScaleField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the scale field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set scale(int? value) {
    final field = getField(FieldDescriptionScaleField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the offset field. Returns null if the field is not defined in the message.
  int? get offset {
    final field = getField(FieldDescriptionOffsetField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the offset field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set offset(int? value) {
    final field = getField(FieldDescriptionOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the units field. Returns null if the field is not defined in the message.
  String? get units {
    final field = getField(FieldDescriptionUnitsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the units field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set units(String? value) {
    final field = getField(FieldDescriptionUnitsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the bits field. Returns null if the field is not defined in the message.
  String? get bits {
    final field = getField(FieldDescriptionBitsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the bits field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set bits(String? value) {
    final field = getField(FieldDescriptionBitsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the accumulate field. Returns null if the field is not defined in the message.
  String? get accumulate {
    final field = getField(FieldDescriptionAccumulateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the accumulate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set accumulate(String? value) {
    final field = getField(FieldDescriptionAccumulateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the fitBaseUnitId field. Returns null if the field is not defined in the message.
  int? get fitBaseUnitId {
    final field = getField(FieldDescriptionFitBaseUnitIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fitBaseUnitId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fitBaseUnitId(int? value) {
    final field = getField(FieldDescriptionFitBaseUnitIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the nativeMesgNum field. Returns null if the field is not defined in the message.
  int? get nativeMesgNum {
    final field = getField(FieldDescriptionNativeMesgNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the nativeMesgNum field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set nativeMesgNum(int? value) {
    final field = getField(FieldDescriptionNativeMesgNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the nativeFieldNum field. Returns null if the field is not defined in the message.
  int? get nativeFieldNum {
    final field = getField(FieldDescriptionNativeFieldNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the nativeFieldNum field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set nativeFieldNum(int? value) {
    final field = getField(FieldDescriptionNativeFieldNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class FieldDescriptionDeveloperDataIndexField extends Field {
  FieldDescriptionDeveloperDataIndexField({int size = 0, bool growable = true})
      : super(
            name: 'developer_data_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class FieldDescriptionFieldDefinitionNumberField extends Field {
  FieldDescriptionFieldDefinitionNumberField(
      {int size = 0, bool growable = true})
      : super(
            name: 'field_definition_number',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class FieldDescriptionFitBaseTypeIdField extends Field {
  FieldDescriptionFitBaseTypeIdField({int size = 0, bool growable = true})
      : super(
            name: 'fit_base_type_id',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class FieldDescriptionFieldNameField extends Field {
  FieldDescriptionFieldNameField({int size = 0, bool growable = true})
      : super(
            name: 'field_name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class FieldDescriptionArrayField extends Field {
  FieldDescriptionArrayField({int size = 0, bool growable = true})
      : super(
            name: 'array',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class FieldDescriptionComponentsField extends Field {
  FieldDescriptionComponentsField({int size = 0, bool growable = true})
      : super(
            name: 'components',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class FieldDescriptionScaleField extends Field {
  FieldDescriptionScaleField({int size = 0, bool growable = true})
      : super(
            name: 'scale',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class FieldDescriptionOffsetField extends Field {
  FieldDescriptionOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'offset',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class FieldDescriptionUnitsField extends Field {
  FieldDescriptionUnitsField({int size = 0, bool growable = true})
      : super(
            name: 'units',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class FieldDescriptionBitsField extends Field {
  FieldDescriptionBitsField({int size = 0, bool growable = true})
      : super(
            name: 'bits',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class FieldDescriptionAccumulateField extends Field {
  FieldDescriptionAccumulateField({int size = 0, bool growable = true})
      : super(
            name: 'accumulate',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class FieldDescriptionFitBaseUnitIdField extends Field {
  FieldDescriptionFitBaseUnitIdField({int size = 0, bool growable = true})
      : super(
            name: 'fit_base_unit_id',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class FieldDescriptionNativeMesgNumField extends Field {
  FieldDescriptionNativeMesgNumField({int size = 0, bool growable = true})
      : super(
            name: 'native_mesg_num',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 14;
}

class FieldDescriptionNativeFieldNumField extends Field {
  FieldDescriptionNativeFieldNumField({int size = 0, bool growable = true})
      : super(
            name: 'native_field_num',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 15;
}
