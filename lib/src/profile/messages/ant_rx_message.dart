/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class AntRxMessage extends DataMessage {

   AntRxMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: AntRxMessage.NAME,
            globalId: AntRxMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage?.getFieldDefinition(TimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              AntRxFractionalTimestampField(
                  size: definitionMessage?.getFieldDefinition(AntRxFractionalTimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              AntRxMesgIdField(
                  size: definitionMessage?.getFieldDefinition(AntRxMesgIdField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              AntRxMesgDataField(
                  size: definitionMessage?.getFieldDefinition(AntRxMesgDataField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              AntRxChannelNumberField(
                  size: definitionMessage?.getFieldDefinition(AntRxChannelNumberField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              AntRxDataField(
                  size: definitionMessage?.getFieldDefinition(AntRxDataField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 80;
  static const NAME = 'ant_rx';

  final bool growable;

  static AntRxMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = AntRxMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
     final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
   set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get fractionalTimestamp {
     final field = getField(AntRxFractionalTimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set fractionalTimestamp(double? value) {
    final field = getField(AntRxFractionalTimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get mesgId {
     final field = getField(AntRxMesgIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set mesgId(int? value) {
    final field = getField(AntRxMesgIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get mesgData {
     final field = getField(AntRxMesgDataField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set mesgData(int? value) {
    final field = getField(AntRxMesgDataField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get channelNumber {
     final field = getField(AntRxChannelNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set channelNumber(int? value) {
    final field = getField(AntRxChannelNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get data {
     final field = getField(AntRxDataField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set data(int? value) {
    final field = getField(AntRxDataField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class AntRxFractionalTimestampField extends Field {
 AntRxFractionalTimestampField({int size = 0, bool growable = true})
      : super(
            name: 'fractional_timestamp',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 32768,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class AntRxMesgIdField extends Field {
 AntRxMesgIdField({int size = 0, bool growable = true})
      : super(
            name: 'mesg_id',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class AntRxMesgDataField extends Field {
 AntRxMesgDataField({int size = 0, bool growable = true})
      : super(
            name: 'mesg_data',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class AntRxChannelNumberField extends Field {
 AntRxChannelNumberField({int size = 0, bool growable = true})
      : super(
            name: 'channel_number',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}
class AntRxDataField extends Field {
 AntRxDataField({int size = 0, bool growable = true})
      : super(
            name: 'data',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 4;
}