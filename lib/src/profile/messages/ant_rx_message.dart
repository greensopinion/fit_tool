/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class AntRxMessage extends DataMessage {
  AntRxMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: AntRxMessage.NAME,
            globalId: AntRxMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntRxFractionalTimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntRxFractionalTimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntRxMesgIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntRxMesgIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntRxMesgDataField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntRxMesgDataField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntRxChannelNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntRxChannelNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AntRxDataField(
                  size: definitionMessage
                          ?.getFieldDefinition(AntRxDataField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 80;
  static const NAME = 'ant_rx';

  final bool growable;

  /// Returns an instance of AntRxMessage from a bytes list.
  static AntRxMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = AntRxMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the fractionalTimestamp field. Returns null if the field is not defined in the message.
  double? get fractionalTimestamp {
    final field = getField(AntRxFractionalTimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fractionalTimestamp field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fractionalTimestamp(double? value) {
    final field = getField(AntRxFractionalTimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the mesgId field. Returns null if the field is not defined in the message.
  int? get mesgId {
    final field = getField(AntRxMesgIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the mesgId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set mesgId(int? value) {
    final field = getField(AntRxMesgIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the mesgData field. Returns null if the field is not defined in the message.
  int? get mesgData {
    final field = getField(AntRxMesgDataField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the mesgData field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set mesgData(int? value) {
    final field = getField(AntRxMesgDataField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the channelNumber field. Returns null if the field is not defined in the message.
  int? get channelNumber {
    final field = getField(AntRxChannelNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the channelNumber field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set channelNumber(int? value) {
    final field = getField(AntRxChannelNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the data field. Returns null if the field is not defined in the message.
  int? get data {
    final field = getField(AntRxDataField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set data(int? value) {
    final field = getField(AntRxDataField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class AntRxFractionalTimestampField extends Field {
  AntRxFractionalTimestampField({int size = 0, bool growable = true})
      : super(
            name: 'fractional_timestamp',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 32768,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class AntRxMesgIdField extends Field {
  AntRxMesgIdField({int size = 0, bool growable = true})
      : super(
            name: 'mesg_id',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class AntRxMesgDataField extends Field {
  AntRxMesgDataField({int size = 0, bool growable = true})
      : super(
            name: 'mesg_data',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class AntRxChannelNumberField extends Field {
  AntRxChannelNumberField({int size = 0, bool growable = true})
      : super(
            name: 'channel_number',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class AntRxDataField extends Field {
  AntRxDataField({int size = 0, bool growable = true})
      : super(
            name: 'data',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}
