/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class HrZoneMessage extends DataMessage {
  HrZoneMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: HrZoneMessage.NAME,
            globalId: HrZoneMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              HrZoneHighBpmField(
                  size: definitionMessage
                          ?.getFieldDefinition(HrZoneHighBpmField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              HrZoneNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(HrZoneNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 8;
  static const NAME = 'hr_zone';

  final bool growable;

  /// Returns an instance of HrZoneMessage from a bytes list.
  static HrZoneMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = HrZoneMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the highBpm field. Returns null if the field is not defined in the message.
  int? get highBpm {
    final field = getField(HrZoneHighBpmField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the highBpm field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set highBpm(int? value) {
    final field = getField(HrZoneHighBpmField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the hrZoneName field. Returns null if the field is not defined in the message.
  String? get hrZoneName {
    final field = getField(HrZoneNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the hrZoneName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set hrZoneName(String? value) {
    final field = getField(HrZoneNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class HrZoneHighBpmField extends Field {
  HrZoneHighBpmField({int size = 0, bool growable = true})
      : super(
            name: 'high_bpm',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class HrZoneNameField extends Field {
  HrZoneNameField({int size = 0, bool growable = true})
      : super(
            name: 'name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}
