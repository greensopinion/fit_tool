/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class ExdDataConceptConfigurationMessage extends DataMessage {

   ExdDataConceptConfigurationMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: ExdDataConceptConfigurationMessage.NAME,
            globalId: ExdDataConceptConfigurationMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              ExdDataConceptConfigurationScreenIndexField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationScreenIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationConceptField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationConceptField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationFieldIdField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationFieldIdField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationConceptIndexField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationConceptIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationDataPageField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationDataPageField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationConceptKeyField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationConceptKeyField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationScalingField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationScalingField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationDataUnitsField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationDataUnitsField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationQualifierField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationQualifierField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationDescriptorField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationDescriptorField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdDataConceptConfigurationIsSignedField(
                  size: definitionMessage?.getFieldDefinition(ExdDataConceptConfigurationIsSignedField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 202;
  static const NAME = 'exd_data_concept_configuration';

  final bool growable;

  static ExdDataConceptConfigurationMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = ExdDataConceptConfigurationMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  int? get screenIndex {
     final field = getField(ExdDataConceptConfigurationScreenIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set screenIndex(int? value) {
    final field = getField(ExdDataConceptConfigurationScreenIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get conceptField {
     final field = getField(ExdDataConceptConfigurationConceptField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set conceptField(int? value) {
    final field = getField(ExdDataConceptConfigurationConceptField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get fieldId {
     final field = getField(ExdDataConceptConfigurationFieldIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set fieldId(int? value) {
    final field = getField(ExdDataConceptConfigurationFieldIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get conceptIndex {
     final field = getField(ExdDataConceptConfigurationConceptIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set conceptIndex(int? value) {
    final field = getField(ExdDataConceptConfigurationConceptIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get dataPage {
     final field = getField(ExdDataConceptConfigurationDataPageField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set dataPage(int? value) {
    final field = getField(ExdDataConceptConfigurationDataPageField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get conceptKey {
     final field = getField(ExdDataConceptConfigurationConceptKeyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set conceptKey(int? value) {
    final field = getField(ExdDataConceptConfigurationConceptKeyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get scaling {
     final field = getField(ExdDataConceptConfigurationScalingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set scaling(int? value) {
    final field = getField(ExdDataConceptConfigurationScalingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  ExdDataUnits? get dataUnits {
     final field = getField(ExdDataConceptConfigurationDataUnitsField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ExdDataUnitsExt.fromValue(value);
    } else {
      return null;
    }
  }
   set dataUnits(ExdDataUnits? value) {
    final field = getField(ExdDataConceptConfigurationDataUnitsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  ExdQualifiers? get qualifier {
     final field = getField(ExdDataConceptConfigurationQualifierField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ExdQualifiersExt.fromValue(value);
    } else {
      return null;
    }
  }
   set qualifier(ExdQualifiers? value) {
    final field = getField(ExdDataConceptConfigurationQualifierField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  ExdDescriptors? get descriptor {
     final field = getField(ExdDataConceptConfigurationDescriptorField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ExdDescriptorsExt.fromValue(value);
    } else {
      return null;
    }
  }
   set descriptor(ExdDescriptors? value) {
    final field = getField(ExdDataConceptConfigurationDescriptorField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  bool? get isSigned {
     final field = getField(ExdDataConceptConfigurationIsSignedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set isSigned(bool? value) {
    final field = getField(ExdDataConceptConfigurationIsSignedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class ExdDataConceptConfigurationScreenIndexField extends Field {
 ExdDataConceptConfigurationScreenIndexField({int size = 0, bool growable = true})
      : super(
            name: 'screen_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class ExdDataConceptConfigurationConceptField extends Field {
 ExdDataConceptConfigurationConceptField({int size = 0, bool growable = true})
      : super(
            name: 'concept_field',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class ExdDataConceptConfigurationFieldIdField extends Field {
 ExdDataConceptConfigurationFieldIdField({int size = 0, bool growable = true})
      : super(
            name: 'field_id',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class ExdDataConceptConfigurationConceptIndexField extends Field {
 ExdDataConceptConfigurationConceptIndexField({int size = 0, bool growable = true})
      : super(
            name: 'concept_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}
class ExdDataConceptConfigurationDataPageField extends Field {
 ExdDataConceptConfigurationDataPageField({int size = 0, bool growable = true})
      : super(
            name: 'data_page',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 4;
}
class ExdDataConceptConfigurationConceptKeyField extends Field {
 ExdDataConceptConfigurationConceptKeyField({int size = 0, bool growable = true})
      : super(
            name: 'concept_key',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 5;
}
class ExdDataConceptConfigurationScalingField extends Field {
 ExdDataConceptConfigurationScalingField({int size = 0, bool growable = true})
      : super(
            name: 'scaling',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 6;
}
class ExdDataConceptConfigurationDataUnitsField extends Field {
 ExdDataConceptConfigurationDataUnitsField({int size = 0, bool growable = true})
      : super(
            name: 'data_units',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 8;
}
class ExdDataConceptConfigurationQualifierField extends Field {
 ExdDataConceptConfigurationQualifierField({int size = 0, bool growable = true})
      : super(
            name: 'qualifier',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 9;
}
class ExdDataConceptConfigurationDescriptorField extends Field {
 ExdDataConceptConfigurationDescriptorField({int size = 0, bool growable = true})
      : super(
            name: 'descriptor',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 10;
}
class ExdDataConceptConfigurationIsSignedField extends Field {
 ExdDataConceptConfigurationIsSignedField({int size = 0, bool growable = true})
      : super(
            name: 'is_signed',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 11;
}