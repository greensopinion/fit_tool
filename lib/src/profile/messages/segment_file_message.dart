/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class SegmentFileMessage extends DataMessage {
  SegmentFileMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: SegmentFileMessage.NAME,
            globalId: SegmentFileMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileFileUuidField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentFileFileUuidField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileEnabledField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentFileEnabledField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileUserProfilePrimaryKeyField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentFileUserProfilePrimaryKeyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileLeaderTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentFileLeaderTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileLeaderGroupPrimaryKeyField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentFileLeaderGroupPrimaryKeyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileLeaderActivityIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentFileLeaderActivityIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileLeaderActivityIdStringField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentFileLeaderActivityIdStringField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentFileDefaultRaceLeaderField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentFileDefaultRaceLeaderField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 151;
  static const NAME = 'segment_file';

  final bool growable;

  static SegmentFileMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = SegmentFileMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  String? get fileUuid {
    final field = getField(SegmentFileFileUuidField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set fileUuid(String? value) {
    final field = getField(SegmentFileFileUuidField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  bool? get enabled {
    final field = getField(SegmentFileEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enabled(bool? value) {
    final field = getField(SegmentFileEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get userProfilePrimaryKey {
    final field = getField(SegmentFileUserProfilePrimaryKeyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set userProfilePrimaryKey(int? value) {
    final field = getField(SegmentFileUserProfilePrimaryKeyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  SegmentLeaderboardType? get leaderType {
    final field = getField(SegmentFileLeaderTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SegmentLeaderboardTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set leaderType(SegmentLeaderboardType? value) {
    final field = getField(SegmentFileLeaderTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  int? get leaderGroupPrimaryKey {
    final field = getField(SegmentFileLeaderGroupPrimaryKeyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set leaderGroupPrimaryKey(int? value) {
    final field = getField(SegmentFileLeaderGroupPrimaryKeyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get leaderActivityId {
    final field = getField(SegmentFileLeaderActivityIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set leaderActivityId(int? value) {
    final field = getField(SegmentFileLeaderActivityIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  String? get leaderActivityIdString {
    final field = getField(SegmentFileLeaderActivityIdStringField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set leaderActivityIdString(String? value) {
    final field = getField(SegmentFileLeaderActivityIdStringField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get defaultRaceLeader {
    final field = getField(SegmentFileDefaultRaceLeaderField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set defaultRaceLeader(int? value) {
    final field = getField(SegmentFileDefaultRaceLeaderField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
}

class SegmentFileFileUuidField extends Field {
  SegmentFileFileUuidField({int size = 0, bool growable = true})
      : super(
            name: 'file_uuid',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class SegmentFileEnabledField extends Field {
  SegmentFileEnabledField({int size = 0, bool growable = true})
      : super(
            name: 'enabled',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class SegmentFileUserProfilePrimaryKeyField extends Field {
  SegmentFileUserProfilePrimaryKeyField({int size = 0, bool growable = true})
      : super(
            name: 'user_profile_primary_key',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class SegmentFileLeaderTypeField extends Field {
  SegmentFileLeaderTypeField({int size = 0, bool growable = true})
      : super(
            name: 'leader_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class SegmentFileLeaderGroupPrimaryKeyField extends Field {
  SegmentFileLeaderGroupPrimaryKeyField({int size = 0, bool growable = true})
      : super(
            name: 'leader_group_primary_key',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class SegmentFileLeaderActivityIdField extends Field {
  SegmentFileLeaderActivityIdField({int size = 0, bool growable = true})
      : super(
            name: 'leader_activity_id',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class SegmentFileLeaderActivityIdStringField extends Field {
  SegmentFileLeaderActivityIdStringField({int size = 0, bool growable = true})
      : super(
            name: 'leader_activity_id_string',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class SegmentFileDefaultRaceLeaderField extends Field {
  SegmentFileDefaultRaceLeaderField({int size = 0, bool growable = true})
      : super(
            name: 'default_race_leader',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 11;
}
