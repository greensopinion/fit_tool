/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class MonitoringInfoMessage extends DataMessage {
  MonitoringInfoMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: MonitoringInfoMessage.NAME,
            globalId: MonitoringInfoMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringInfoLocalTimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringInfoLocalTimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringInfoActivityTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringInfoActivityTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringInfoCyclesToDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringInfoCyclesToDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringInfoCyclesToCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringInfoCyclesToCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringInfoRestingMetabolicRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringInfoRestingMetabolicRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 103;
  static const NAME = 'monitoring_info';

  final bool growable;

  /// Returns an instance of MonitoringInfoMessage from a bytes list.
  static MonitoringInfoMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = MonitoringInfoMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the localTimestamp field. Returns null if the field is not defined in the message.
  int? get localTimestamp {
    final field = getField(MonitoringInfoLocalTimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the localTimestamp field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set localTimestamp(int? value) {
    final field = getField(MonitoringInfoLocalTimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the activityType field. Returns null if the field is not defined in the message.
  List<ActivityType>? get activityType {
    final field = getField(MonitoringInfoActivityTypeField.ID);
    if (field != null && field.isValid()) {
      final values = field.getValues();
      return values.map((item) => ActivityTypeExt.fromValue(item)).toList();
    } else {
      return null;
    }
  }

  /// Sets the activityType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activityType(List<ActivityType>? value) {
    final field = getField(MonitoringInfoActivityTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value.map((item) => item.value).toList();
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the cyclesToDistance field. Returns null if the field is not defined in the message.
  List<double>? get cyclesToDistance {
    final field = getField(MonitoringInfoCyclesToDistanceField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the cyclesToDistance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cyclesToDistance(List<double>? value) {
    final field = getField(MonitoringInfoCyclesToDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the cyclesToCalories field. Returns null if the field is not defined in the message.
  List<double>? get cyclesToCalories {
    final field = getField(MonitoringInfoCyclesToCaloriesField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the cyclesToCalories field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cyclesToCalories(List<double>? value) {
    final field = getField(MonitoringInfoCyclesToCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the restingMetabolicRate field. Returns null if the field is not defined in the message.
  int? get restingMetabolicRate {
    final field = getField(MonitoringInfoRestingMetabolicRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the restingMetabolicRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set restingMetabolicRate(int? value) {
    final field = getField(MonitoringInfoRestingMetabolicRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class MonitoringInfoLocalTimestampField extends Field {
  MonitoringInfoLocalTimestampField({int size = 0, bool growable = true})
      : super(
            name: 'local_timestamp',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: 'local_date_time',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class MonitoringInfoActivityTypeField extends Field {
  MonitoringInfoActivityTypeField({int size = 0, bool growable = true})
      : super(
            name: 'activity_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class MonitoringInfoCyclesToDistanceField extends Field {
  MonitoringInfoCyclesToDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'cycles_to_distance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 5000,
            size: size,
            units: 'm/cycle',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class MonitoringInfoCyclesToCaloriesField extends Field {
  MonitoringInfoCyclesToCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'cycles_to_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 5000,
            size: size,
            units: 'kcal/cycle',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class MonitoringInfoRestingMetabolicRateField extends Field {
  MonitoringInfoRestingMetabolicRateField({int size = 0, bool growable = true})
      : super(
            name: 'resting_metabolic_rate',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal / day',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 5;
}
