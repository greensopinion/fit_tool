/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class WorkoutStepMessage extends DataMessage {
  WorkoutStepMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: WorkoutStepMessage.NAME,
            globalId: WorkoutStepMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepWorkoutStepNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutStepWorkoutStepNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepDurationTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepDurationTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepDurationValueField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepDurationValueField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepTargetTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepTargetTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepTargetValueField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepTargetValueField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepCustomTargetValueLowField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutStepCustomTargetValueLowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepCustomTargetValueHighField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutStepCustomTargetValueHighField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepIntensityField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepIntensityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepNotesField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepNotesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepEquipmentField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepEquipmentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepExerciseCategoryField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutStepExerciseCategoryField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepExerciseNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutStepExerciseNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepExerciseWeightField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutStepExerciseWeightField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutStepWeightDisplayUnitField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutStepWeightDisplayUnitField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 27;
  static const NAME = 'workout_step';

  final bool growable;

  /// Returns an instance of WorkoutStepMessage from a bytes list.
  static WorkoutStepMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = WorkoutStepMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the workoutStepName field. Returns null if the field is not defined in the message.
  String? get workoutStepName {
    final field = getField(WorkoutStepWorkoutStepNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the workoutStepName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set workoutStepName(String? value) {
    final field = getField(WorkoutStepWorkoutStepNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the durationType field. Returns null if the field is not defined in the message.
  WorkoutStepDuration? get durationType {
    final field = getField(WorkoutStepDurationTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return WorkoutStepDurationExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the durationType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set durationType(WorkoutStepDuration? value) {
    final field = getField(WorkoutStepDurationTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the durationValue field. Returns null if the field is not defined in the message.
  int? get durationValue {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set durationValue(int? value) {
    final field = getField(WorkoutStepDurationValueField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield durationTime
  double? get durationTime {
    final field = getField(WorkoutStepDurationValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [0, 28].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set durationTime(double? value) {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield durationDistance
  double? get durationDistance {
    final field = getField(WorkoutStepDurationValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set durationDistance(double? value) {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield durationHr
  int? get durationHr {
    final field = getField(WorkoutStepDurationValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [2, 3].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set durationHr(int? value) {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield durationCalories
  int? get durationCalories {
    final field = getField(WorkoutStepDurationValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [4].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set durationCalories(int? value) {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield durationStep
  int? get durationStep {
    final field = getField(WorkoutStepDurationValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid = typeField != null &&
        [6, 7, 8, 9, 10, 11, 12, 13].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set durationStep(int? value) {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield durationPower
  int? get durationPower {
    final field = getField(WorkoutStepDurationValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [14, 15].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set durationPower(int? value) {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield durationReps
  int? get durationReps {
    final field = getField(WorkoutStepDurationValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [29].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the durationValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set durationReps(int? value) {
    final field = getField(WorkoutStepDurationValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the targetType field. Returns null if the field is not defined in the message.
  WorkoutStepTarget? get targetType {
    final field = getField(WorkoutStepTargetTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return WorkoutStepTargetExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the targetType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set targetType(WorkoutStepTarget? value) {
    final field = getField(WorkoutStepTargetTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the targetValue field. Returns null if the field is not defined in the message.
  int? get targetValue {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set targetValue(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetSpeedZone
  int? get targetSpeedZone {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [0].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetSpeedZone(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetHrZone
  int? get targetHrZone {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetHrZone(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetCadenceZone
  int? get targetCadenceZone {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [3].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetCadenceZone(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetPowerZone
  int? get targetPowerZone {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [4].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetPowerZone(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetRepeatSteps
  int? get targetRepeatSteps {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [6].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetRepeatSteps(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetRepeatTime
  double? get targetRepeatTime {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [7].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetRepeatTime(double? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetRepeatDistance
  double? get targetRepeatDistance {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [8].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetRepeatDistance(double? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetRepeatCalories
  int? get targetRepeatCalories {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [9].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetRepeatCalories(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetRepeatHr
  int? get targetRepeatHr {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [10, 11].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetRepeatHr(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetRepeatPower
  int? get targetRepeatPower {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepDurationTypeField.ID);

    final isSubFieldValid =
        typeField != null && [12, 13].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetRepeatPower(int? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield targetStrokeType
  SwimStroke? get targetStrokeType {
    final field = getField(WorkoutStepTargetValueField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [11].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the targetValue subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set targetStrokeType(SwimStroke? value) {
    final field = getField(WorkoutStepTargetValueField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the customTargetValueLow field. Returns null if the field is not defined in the message.
  int? get customTargetValueLow {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueLow field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set customTargetValueLow(int? value) {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetSpeedLow
  double? get customTargetSpeedLow {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [0, 12].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueLow subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetSpeedLow(double? value) {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetHeartRateLow
  int? get customTargetHeartRateLow {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [1, 13].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueLow subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetHeartRateLow(int? value) {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetCadenceLow
  int? get customTargetCadenceLow {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [3].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueLow subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetCadenceLow(int? value) {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetPowerLow
  int? get customTargetPowerLow {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [4, 7, 8, 9, 10].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueLow subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetPowerLow(int? value) {
    final field = getField(WorkoutStepCustomTargetValueLowField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the customTargetValueHigh field. Returns null if the field is not defined in the message.
  int? get customTargetValueHigh {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueHigh field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set customTargetValueHigh(int? value) {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetSpeedHigh
  double? get customTargetSpeedHigh {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [0, 12].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueHigh subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetSpeedHigh(double? value) {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetHeartRateHigh
  int? get customTargetHeartRateHigh {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [1, 13].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueHigh subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetHeartRateHigh(int? value) {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetCadenceHigh
  int? get customTargetCadenceHigh {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [3].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueHigh subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetCadenceHigh(int? value) {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield customTargetPowerHigh
  int? get customTargetPowerHigh {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    final typeField = getField(WorkoutStepTargetTypeField.ID);

    final isSubFieldValid =
        typeField != null && [4, 7, 8, 9, 10].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the customTargetValueHigh subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set customTargetPowerHigh(int? value) {
    final field = getField(WorkoutStepCustomTargetValueHighField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the intensity field. Returns null if the field is not defined in the message.
  Intensity? get intensity {
    final field = getField(WorkoutStepIntensityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return IntensityExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the intensity field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set intensity(Intensity? value) {
    final field = getField(WorkoutStepIntensityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the notes field. Returns null if the field is not defined in the message.
  String? get notes {
    final field = getField(WorkoutStepNotesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the notes field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set notes(String? value) {
    final field = getField(WorkoutStepNotesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the equipment field. Returns null if the field is not defined in the message.
  WorkoutEquipment? get equipment {
    final field = getField(WorkoutStepEquipmentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return WorkoutEquipmentExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the equipment field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set equipment(WorkoutEquipment? value) {
    final field = getField(WorkoutStepEquipmentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the exerciseCategory field. Returns null if the field is not defined in the message.
  int? get exerciseCategory {
    final field = getField(WorkoutStepExerciseCategoryField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the exerciseCategory field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set exerciseCategory(int? value) {
    final field = getField(WorkoutStepExerciseCategoryField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the exerciseName field. Returns null if the field is not defined in the message.
  int? get exerciseName {
    final field = getField(WorkoutStepExerciseNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the exerciseName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set exerciseName(int? value) {
    final field = getField(WorkoutStepExerciseNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the exerciseWeight field. Returns null if the field is not defined in the message.
  double? get exerciseWeight {
    final field = getField(WorkoutStepExerciseWeightField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the exerciseWeight field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set exerciseWeight(double? value) {
    final field = getField(WorkoutStepExerciseWeightField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the weightDisplayUnit field. Returns null if the field is not defined in the message.
  int? get weightDisplayUnit {
    final field = getField(WorkoutStepWeightDisplayUnitField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the weightDisplayUnit field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set weightDisplayUnit(int? value) {
    final field = getField(WorkoutStepWeightDisplayUnitField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class WorkoutStepWorkoutStepNameField extends Field {
  WorkoutStepWorkoutStepNameField({int size = 0, bool growable = true})
      : super(
            name: 'wkt_step_name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class WorkoutStepDurationTypeField extends Field {
  WorkoutStepDurationTypeField({int size = 0, bool growable = true})
      : super(
            name: 'duration_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class WorkoutStepDurationValueField extends Field {
  WorkoutStepDurationValueField({int size = 0, bool growable = true})
      : super(
            name: 'duration_value',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'duration_time',
                  type: BaseType.UINT32,
                  scale: 1000,
                  offset: 0,
                  units: 's',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [0, 28]
                  }),
              SubField(
                  name: 'duration_distance',
                  type: BaseType.UINT32,
                  scale: 100,
                  offset: 0,
                  units: 'm',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [1]
                  }),
              SubField(
                  name: 'duration_hr',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or bpm',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [2, 3]
                  }),
              SubField(
                  name: 'duration_calories',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'calories',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [4]
                  }),
              SubField(
                  name: 'duration_step',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13
                    ]
                  }),
              SubField(
                  name: 'duration_power',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or watts',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [14, 15]
                  }),
              SubField(
                  name: 'duration_reps',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [29]
                  })
            ]);

  static const ID = 2;
}

class WorkoutStepTargetTypeField extends Field {
  WorkoutStepTargetTypeField({int size = 0, bool growable = true})
      : super(
            name: 'target_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class WorkoutStepTargetValueField extends Field {
  WorkoutStepTargetValueField({int size = 0, bool growable = true})
      : super(
            name: 'target_value',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'target_speed_zone',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [0]
                  }),
              SubField(
                  name: 'target_hr_zone',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [1]
                  }),
              SubField(
                  name: 'target_cadence_zone',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [3]
                  }),
              SubField(
                  name: 'target_power_zone',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [4]
                  }),
              SubField(
                  name: 'repeat_steps',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [6]
                  }),
              SubField(
                  name: 'repeat_time',
                  type: BaseType.UINT32,
                  scale: 1000,
                  offset: 0,
                  units: 's',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [7]
                  }),
              SubField(
                  name: 'repeat_distance',
                  type: BaseType.UINT32,
                  scale: 100,
                  offset: 0,
                  units: 'm',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [8]
                  }),
              SubField(
                  name: 'repeat_calories',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'calories',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [9]
                  }),
              SubField(
                  name: 'repeat_hr',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or bpm',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [10, 11]
                  }),
              SubField(
                  name: 'repeat_power',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or watts',
                  referenceMap: {
                    WorkoutStepDurationTypeField.ID: [12, 13]
                  }),
              SubField(
                  name: 'target_stroke_type',
                  type: BaseType.ENUM,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [11]
                  })
            ]);

  static const ID = 4;
}

class WorkoutStepCustomTargetValueLowField extends Field {
  WorkoutStepCustomTargetValueLowField({int size = 0, bool growable = true})
      : super(
            name: 'custom_target_value_low',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'custom_target_speed_low',
                  type: BaseType.UINT32,
                  scale: 1000,
                  offset: 0,
                  units: 'm/s',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [0, 12]
                  }),
              SubField(
                  name: 'custom_target_heart_rate_low',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or bpm',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [1, 13]
                  }),
              SubField(
                  name: 'custom_target_cadence_low',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'rpm',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [3]
                  }),
              SubField(
                  name: 'custom_target_power_low',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or watts',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [4, 7, 8, 9, 10]
                  })
            ]);

  static const ID = 5;
}

class WorkoutStepCustomTargetValueHighField extends Field {
  WorkoutStepCustomTargetValueHighField({int size = 0, bool growable = true})
      : super(
            name: 'custom_target_value_high',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'custom_target_speed_high',
                  type: BaseType.UINT32,
                  scale: 1000,
                  offset: 0,
                  units: 'm/s',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [0, 12]
                  }),
              SubField(
                  name: 'custom_target_heart_rate_high',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or bpm',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [1, 13]
                  }),
              SubField(
                  name: 'custom_target_cadence_high',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'rpm',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [3]
                  }),
              SubField(
                  name: 'custom_target_power_high',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: '% or watts',
                  referenceMap: {
                    WorkoutStepTargetTypeField.ID: [4, 7, 8, 9, 10]
                  })
            ]);

  static const ID = 6;
}

class WorkoutStepIntensityField extends Field {
  WorkoutStepIntensityField({int size = 0, bool growable = true})
      : super(
            name: 'intensity',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class WorkoutStepNotesField extends Field {
  WorkoutStepNotesField({int size = 0, bool growable = true})
      : super(
            name: 'notes',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class WorkoutStepEquipmentField extends Field {
  WorkoutStepEquipmentField({int size = 0, bool growable = true})
      : super(
            name: 'equipment',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class WorkoutStepExerciseCategoryField extends Field {
  WorkoutStepExerciseCategoryField({int size = 0, bool growable = true})
      : super(
            name: 'exercise_category',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class WorkoutStepExerciseNameField extends Field {
  WorkoutStepExerciseNameField({int size = 0, bool growable = true})
      : super(
            name: 'exercise_name',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class WorkoutStepExerciseWeightField extends Field {
  WorkoutStepExerciseWeightField({int size = 0, bool growable = true})
      : super(
            name: 'exercise_weight',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'kg',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class WorkoutStepWeightDisplayUnitField extends Field {
  WorkoutStepWeightDisplayUnitField({int size = 0, bool growable = true})
      : super(
            name: 'weight_display_unit',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 13;
}
