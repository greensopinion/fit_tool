/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class RecordMessage extends DataMessage {
  RecordMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: RecordMessage.NAME,
            globalId: RecordMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordPositionLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordPositionLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordPositionLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordPositionLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCompressedSpeedDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordCompressedSpeedDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordResistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordResistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTimeFromCourseField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordTimeFromCourseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCycleLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordCycleLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordSpeed1sField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordSpeed1sField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTotalCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordTotalCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCompressedAccumulatedPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordCompressedAccumulatedPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordAccumulatedPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordAccumulatedPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordLeftRightBalanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordLeftRightBalanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordGpsAccuracyField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordGpsAccuracyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordVerticalOscillationField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordVerticalOscillationField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordStanceTimePercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordStanceTimePercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordStanceTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordStanceTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordActivityTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordActivityTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordLeftTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordLeftTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordRightTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordRightTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordLeftPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordLeftPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordRightPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordRightPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCombinedPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordCombinedPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTime128Field(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordTime128Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordStrokeTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordStrokeTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordBallSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordBallSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCadence256Field(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordCadence256Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordFractionalCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordFractionalCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTotalHemoglobinConcField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordTotalHemoglobinConcField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTotalHemoglobinConcMinField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordTotalHemoglobinConcMinField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTotalHemoglobinConcMaxField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordTotalHemoglobinConcMaxField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordSaturatedHemoglobinPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordSaturatedHemoglobinPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordSaturatedHemoglobinPercentMinField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordSaturatedHemoglobinPercentMinField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordSaturatedHemoglobinPercentMaxField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordSaturatedHemoglobinPercentMaxField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordDeviceIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordDeviceIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordLeftPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordLeftPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordRightPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordRightPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordLeftPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordLeftPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordLeftPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordLeftPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordRightPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordRightPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordRightPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordRightPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordEnhancedSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordEnhancedSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordEnhancedAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordEnhancedAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordBatterySocField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordBatterySocField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordMotorPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordMotorPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordVerticalRatioField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordVerticalRatioField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordStanceTimeBalanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordStanceTimeBalanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordStepLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordStepLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordAbsolutePressureField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordAbsolutePressureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordDepthField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordDepthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordNextStopDepthField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordNextStopDepthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordNextStopTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordNextStopTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordTimeToSurfaceField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordTimeToSurfaceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordNdlTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordNdlTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCnsLoadField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordCnsLoadField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordN2LoadField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordN2LoadField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordGritField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordGritField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordFlowField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordFlowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordEbikeTravelRangeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordEbikeTravelRangeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordEbikeBatteryLevelField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordEbikeBatteryLevelField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordEbikeAssistModeField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordEbikeAssistModeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordEbikeAssistLevelPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              RecordEbikeAssistLevelPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              RecordCoreTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(RecordCoreTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 20;
  static const NAME = 'record';

  final bool growable;

  /// Returns an instance of RecordMessage from a bytes list.
  static RecordMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = RecordMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the positionLat field. Returns null if the field is not defined in the message.
  double? get positionLat {
    final field = getField(RecordPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the positionLat field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set positionLat(double? value) {
    final field = getField(RecordPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the positionLong field. Returns null if the field is not defined in the message.
  double? get positionLong {
    final field = getField(RecordPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the positionLong field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set positionLong(double? value) {
    final field = getField(RecordPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the altitude field. Returns null if the field is not defined in the message.
  double? get altitude {
    final field = getField(RecordAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the altitude field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set altitude(double? value) {
    final field = getField(RecordAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the heartRate field. Returns null if the field is not defined in the message.
  int? get heartRate {
    final field = getField(RecordHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the heartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set heartRate(int? value) {
    final field = getField(RecordHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the cadence field. Returns null if the field is not defined in the message.
  int? get cadence {
    final field = getField(RecordCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the cadence field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cadence(int? value) {
    final field = getField(RecordCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the distance field. Returns null if the field is not defined in the message.
  double? get distance {
    final field = getField(RecordDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the distance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set distance(double? value) {
    final field = getField(RecordDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the speed field. Returns null if the field is not defined in the message.
  double? get speed {
    final field = getField(RecordSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the speed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set speed(double? value) {
    final field = getField(RecordSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the power field. Returns null if the field is not defined in the message.
  int? get power {
    final field = getField(RecordPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the power field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set power(int? value) {
    final field = getField(RecordPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the compressedSpeedDistance field. Returns null if the field is not defined in the message.
  Uint8List? get compressedSpeedDistance {
    final field = getField(RecordCompressedSpeedDistanceField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the compressedSpeedDistance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set compressedSpeedDistance(Uint8List? value) {
    final field = getField(RecordCompressedSpeedDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the grade field. Returns null if the field is not defined in the message.
  double? get grade {
    final field = getField(RecordGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the grade field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set grade(double? value) {
    final field = getField(RecordGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the resistance field. Returns null if the field is not defined in the message.
  int? get resistance {
    final field = getField(RecordResistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the resistance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set resistance(int? value) {
    final field = getField(RecordResistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timeFromCourse field. Returns null if the field is not defined in the message.
  double? get timeFromCourse {
    final field = getField(RecordTimeFromCourseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeFromCourse field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeFromCourse(double? value) {
    final field = getField(RecordTimeFromCourseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the cycleLength field. Returns null if the field is not defined in the message.
  double? get cycleLength {
    final field = getField(RecordCycleLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the cycleLength field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cycleLength(double? value) {
    final field = getField(RecordCycleLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the temperature field. Returns null if the field is not defined in the message.
  int? get temperature {
    final field = getField(RecordTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the temperature field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set temperature(int? value) {
    final field = getField(RecordTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the speed1s field. Returns null if the field is not defined in the message.
  List<double>? get speed1s {
    final field = getField(RecordSpeed1sField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the speed1s field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set speed1s(List<double>? value) {
    final field = getField(RecordSpeed1sField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the cycles field. Returns null if the field is not defined in the message.
  int? get cycles {
    final field = getField(RecordCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the cycles field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cycles(int? value) {
    final field = getField(RecordCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalCycles field. Returns null if the field is not defined in the message.
  int? get totalCycles {
    final field = getField(RecordTotalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalCycles field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalCycles(int? value) {
    final field = getField(RecordTotalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the compressedAccumulatedPower field. Returns null if the field is not defined in the message.
  int? get compressedAccumulatedPower {
    final field = getField(RecordCompressedAccumulatedPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the compressedAccumulatedPower field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set compressedAccumulatedPower(int? value) {
    final field = getField(RecordCompressedAccumulatedPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the accumulatedPower field. Returns null if the field is not defined in the message.
  int? get accumulatedPower {
    final field = getField(RecordAccumulatedPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the accumulatedPower field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set accumulatedPower(int? value) {
    final field = getField(RecordAccumulatedPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the leftRightBalance field. Returns null if the field is not defined in the message.
  int? get leftRightBalance {
    final field = getField(RecordLeftRightBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the leftRightBalance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set leftRightBalance(int? value) {
    final field = getField(RecordLeftRightBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the gpsAccuracy field. Returns null if the field is not defined in the message.
  int? get gpsAccuracy {
    final field = getField(RecordGpsAccuracyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the gpsAccuracy field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set gpsAccuracy(int? value) {
    final field = getField(RecordGpsAccuracyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the verticalSpeed field. Returns null if the field is not defined in the message.
  double? get verticalSpeed {
    final field = getField(RecordVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the verticalSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set verticalSpeed(double? value) {
    final field = getField(RecordVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the calories field. Returns null if the field is not defined in the message.
  int? get calories {
    final field = getField(RecordCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the calories field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set calories(int? value) {
    final field = getField(RecordCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the verticalOscillation field. Returns null if the field is not defined in the message.
  double? get verticalOscillation {
    final field = getField(RecordVerticalOscillationField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the verticalOscillation field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set verticalOscillation(double? value) {
    final field = getField(RecordVerticalOscillationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the stanceTimePercent field. Returns null if the field is not defined in the message.
  double? get stanceTimePercent {
    final field = getField(RecordStanceTimePercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the stanceTimePercent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set stanceTimePercent(double? value) {
    final field = getField(RecordStanceTimePercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the stanceTime field. Returns null if the field is not defined in the message.
  double? get stanceTime {
    final field = getField(RecordStanceTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the stanceTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set stanceTime(double? value) {
    final field = getField(RecordStanceTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the activityType field. Returns null if the field is not defined in the message.
  ActivityType? get activityType {
    final field = getField(RecordActivityTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ActivityTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the activityType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activityType(ActivityType? value) {
    final field = getField(RecordActivityTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the leftTorqueEffectiveness field. Returns null if the field is not defined in the message.
  double? get leftTorqueEffectiveness {
    final field = getField(RecordLeftTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the leftTorqueEffectiveness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set leftTorqueEffectiveness(double? value) {
    final field = getField(RecordLeftTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rightTorqueEffectiveness field. Returns null if the field is not defined in the message.
  double? get rightTorqueEffectiveness {
    final field = getField(RecordRightTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the rightTorqueEffectiveness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rightTorqueEffectiveness(double? value) {
    final field = getField(RecordRightTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the leftPedalSmoothness field. Returns null if the field is not defined in the message.
  double? get leftPedalSmoothness {
    final field = getField(RecordLeftPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the leftPedalSmoothness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set leftPedalSmoothness(double? value) {
    final field = getField(RecordLeftPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rightPedalSmoothness field. Returns null if the field is not defined in the message.
  double? get rightPedalSmoothness {
    final field = getField(RecordRightPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the rightPedalSmoothness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rightPedalSmoothness(double? value) {
    final field = getField(RecordRightPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the combinedPedalSmoothness field. Returns null if the field is not defined in the message.
  double? get combinedPedalSmoothness {
    final field = getField(RecordCombinedPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the combinedPedalSmoothness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set combinedPedalSmoothness(double? value) {
    final field = getField(RecordCombinedPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the time128 field. Returns null if the field is not defined in the message.
  double? get time128 {
    final field = getField(RecordTime128Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the time128 field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set time128(double? value) {
    final field = getField(RecordTime128Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the strokeType field. Returns null if the field is not defined in the message.
  StrokeType? get strokeType {
    final field = getField(RecordStrokeTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return StrokeTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the strokeType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set strokeType(StrokeType? value) {
    final field = getField(RecordStrokeTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the zone field. Returns null if the field is not defined in the message.
  int? get zone {
    final field = getField(RecordZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the zone field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set zone(int? value) {
    final field = getField(RecordZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the ballSpeed field. Returns null if the field is not defined in the message.
  double? get ballSpeed {
    final field = getField(RecordBallSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the ballSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set ballSpeed(double? value) {
    final field = getField(RecordBallSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the cadence256 field. Returns null if the field is not defined in the message.
  double? get cadence256 {
    final field = getField(RecordCadence256Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the cadence256 field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cadence256(double? value) {
    final field = getField(RecordCadence256Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the fractionalCadence field. Returns null if the field is not defined in the message.
  double? get fractionalCadence {
    final field = getField(RecordFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the fractionalCadence field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set fractionalCadence(double? value) {
    final field = getField(RecordFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalHemoglobinConc field. Returns null if the field is not defined in the message.
  double? get totalHemoglobinConc {
    final field = getField(RecordTotalHemoglobinConcField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalHemoglobinConc field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalHemoglobinConc(double? value) {
    final field = getField(RecordTotalHemoglobinConcField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalHemoglobinConcMin field. Returns null if the field is not defined in the message.
  double? get totalHemoglobinConcMin {
    final field = getField(RecordTotalHemoglobinConcMinField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalHemoglobinConcMin field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalHemoglobinConcMin(double? value) {
    final field = getField(RecordTotalHemoglobinConcMinField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalHemoglobinConcMax field. Returns null if the field is not defined in the message.
  double? get totalHemoglobinConcMax {
    final field = getField(RecordTotalHemoglobinConcMaxField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalHemoglobinConcMax field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalHemoglobinConcMax(double? value) {
    final field = getField(RecordTotalHemoglobinConcMaxField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the saturatedHemoglobinPercent field. Returns null if the field is not defined in the message.
  double? get saturatedHemoglobinPercent {
    final field = getField(RecordSaturatedHemoglobinPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the saturatedHemoglobinPercent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set saturatedHemoglobinPercent(double? value) {
    final field = getField(RecordSaturatedHemoglobinPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the saturatedHemoglobinPercentMin field. Returns null if the field is not defined in the message.
  double? get saturatedHemoglobinPercentMin {
    final field = getField(RecordSaturatedHemoglobinPercentMinField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the saturatedHemoglobinPercentMin field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set saturatedHemoglobinPercentMin(double? value) {
    final field = getField(RecordSaturatedHemoglobinPercentMinField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the saturatedHemoglobinPercentMax field. Returns null if the field is not defined in the message.
  double? get saturatedHemoglobinPercentMax {
    final field = getField(RecordSaturatedHemoglobinPercentMaxField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the saturatedHemoglobinPercentMax field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set saturatedHemoglobinPercentMax(double? value) {
    final field = getField(RecordSaturatedHemoglobinPercentMaxField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the deviceIndex field. Returns null if the field is not defined in the message.
  int? get deviceIndex {
    final field = getField(RecordDeviceIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set deviceIndex(int? value) {
    final field = getField(RecordDeviceIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the leftPco field. Returns null if the field is not defined in the message.
  int? get leftPco {
    final field = getField(RecordLeftPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the leftPco field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set leftPco(int? value) {
    final field = getField(RecordLeftPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rightPco field. Returns null if the field is not defined in the message.
  int? get rightPco {
    final field = getField(RecordRightPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the rightPco field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rightPco(int? value) {
    final field = getField(RecordRightPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the leftPowerPhase field. Returns null if the field is not defined in the message.
  List<double>? get leftPowerPhase {
    final field = getField(RecordLeftPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the leftPowerPhase field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set leftPowerPhase(List<double>? value) {
    final field = getField(RecordLeftPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the leftPowerPhasePeak field. Returns null if the field is not defined in the message.
  List<double>? get leftPowerPhasePeak {
    final field = getField(RecordLeftPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the leftPowerPhasePeak field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set leftPowerPhasePeak(List<double>? value) {
    final field = getField(RecordLeftPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rightPowerPhase field. Returns null if the field is not defined in the message.
  List<double>? get rightPowerPhase {
    final field = getField(RecordRightPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the rightPowerPhase field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rightPowerPhase(List<double>? value) {
    final field = getField(RecordRightPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rightPowerPhasePeak field. Returns null if the field is not defined in the message.
  List<double>? get rightPowerPhasePeak {
    final field = getField(RecordRightPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the rightPowerPhasePeak field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rightPowerPhasePeak(List<double>? value) {
    final field = getField(RecordRightPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the enhancedSpeed field. Returns null if the field is not defined in the message.
  double? get enhancedSpeed {
    final field = getField(RecordEnhancedSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the enhancedSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set enhancedSpeed(double? value) {
    final field = getField(RecordEnhancedSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the enhancedAltitude field. Returns null if the field is not defined in the message.
  double? get enhancedAltitude {
    final field = getField(RecordEnhancedAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the enhancedAltitude field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set enhancedAltitude(double? value) {
    final field = getField(RecordEnhancedAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the batterySoc field. Returns null if the field is not defined in the message.
  double? get batterySoc {
    final field = getField(RecordBatterySocField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the batterySoc field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set batterySoc(double? value) {
    final field = getField(RecordBatterySocField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the motorPower field. Returns null if the field is not defined in the message.
  int? get motorPower {
    final field = getField(RecordMotorPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the motorPower field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set motorPower(int? value) {
    final field = getField(RecordMotorPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the verticalRatio field. Returns null if the field is not defined in the message.
  double? get verticalRatio {
    final field = getField(RecordVerticalRatioField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the verticalRatio field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set verticalRatio(double? value) {
    final field = getField(RecordVerticalRatioField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the stanceTimeBalance field. Returns null if the field is not defined in the message.
  double? get stanceTimeBalance {
    final field = getField(RecordStanceTimeBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the stanceTimeBalance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set stanceTimeBalance(double? value) {
    final field = getField(RecordStanceTimeBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the stepLength field. Returns null if the field is not defined in the message.
  double? get stepLength {
    final field = getField(RecordStepLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the stepLength field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set stepLength(double? value) {
    final field = getField(RecordStepLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the absolutePressure field. Returns null if the field is not defined in the message.
  int? get absolutePressure {
    final field = getField(RecordAbsolutePressureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the absolutePressure field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set absolutePressure(int? value) {
    final field = getField(RecordAbsolutePressureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the depth field. Returns null if the field is not defined in the message.
  double? get depth {
    final field = getField(RecordDepthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the depth field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set depth(double? value) {
    final field = getField(RecordDepthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the nextStopDepth field. Returns null if the field is not defined in the message.
  double? get nextStopDepth {
    final field = getField(RecordNextStopDepthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the nextStopDepth field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set nextStopDepth(double? value) {
    final field = getField(RecordNextStopDepthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the nextStopTime field. Returns null if the field is not defined in the message.
  int? get nextStopTime {
    final field = getField(RecordNextStopTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the nextStopTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set nextStopTime(int? value) {
    final field = getField(RecordNextStopTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timeToSurface field. Returns null if the field is not defined in the message.
  int? get timeToSurface {
    final field = getField(RecordTimeToSurfaceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeToSurface field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeToSurface(int? value) {
    final field = getField(RecordTimeToSurfaceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the ndlTime field. Returns null if the field is not defined in the message.
  int? get ndlTime {
    final field = getField(RecordNdlTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the ndlTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set ndlTime(int? value) {
    final field = getField(RecordNdlTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the cnsLoad field. Returns null if the field is not defined in the message.
  int? get cnsLoad {
    final field = getField(RecordCnsLoadField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the cnsLoad field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cnsLoad(int? value) {
    final field = getField(RecordCnsLoadField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the n2Load field. Returns null if the field is not defined in the message.
  int? get n2Load {
    final field = getField(RecordN2LoadField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the n2Load field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set n2Load(int? value) {
    final field = getField(RecordN2LoadField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the grit field. Returns null if the field is not defined in the message.
  int? get grit {
    final field = getField(RecordGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the grit field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set grit(int? value) {
    final field = getField(RecordGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the flow field. Returns null if the field is not defined in the message.
  int? get flow {
    final field = getField(RecordFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the flow field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set flow(int? value) {
    final field = getField(RecordFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the ebikeTravelRange field. Returns null if the field is not defined in the message.
  int? get ebikeTravelRange {
    final field = getField(RecordEbikeTravelRangeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the ebikeTravelRange field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set ebikeTravelRange(int? value) {
    final field = getField(RecordEbikeTravelRangeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the ebikeBatteryLevel field. Returns null if the field is not defined in the message.
  int? get ebikeBatteryLevel {
    final field = getField(RecordEbikeBatteryLevelField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the ebikeBatteryLevel field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set ebikeBatteryLevel(int? value) {
    final field = getField(RecordEbikeBatteryLevelField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the ebikeAssistMode field. Returns null if the field is not defined in the message.
  int? get ebikeAssistMode {
    final field = getField(RecordEbikeAssistModeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the ebikeAssistMode field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set ebikeAssistMode(int? value) {
    final field = getField(RecordEbikeAssistModeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the ebikeAssistLevelPercent field. Returns null if the field is not defined in the message.
  int? get ebikeAssistLevelPercent {
    final field = getField(RecordEbikeAssistLevelPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the ebikeAssistLevelPercent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set ebikeAssistLevelPercent(int? value) {
    final field = getField(RecordEbikeAssistLevelPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the coreTemperature field. Returns null if the field is not defined in the message.
  double? get coreTemperature {
    final field = getField(RecordCoreTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the coreTemperature field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set coreTemperature(double? value) {
    final field = getField(RecordCoreTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class RecordPositionLatField extends Field {
  RecordPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: 'sint32',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class RecordPositionLongField extends Field {
  RecordPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: 'sint32',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class RecordAltitudeField extends Field {
  RecordAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class RecordHeartRateField extends Field {
  RecordHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class RecordCadenceField extends Field {
  RecordCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class RecordDistanceField extends Field {
  RecordDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'distance',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class RecordSpeedField extends Field {
  RecordSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class RecordPowerField extends Field {
  RecordPowerField({int size = 0, bool growable = true})
      : super(
            name: 'power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class RecordCompressedSpeedDistanceField extends Field {
  RecordCompressedSpeedDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'compressed_speed_distance',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm/s,m',
            mainTypeName: 'byte',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class RecordGradeField extends Field {
  RecordGradeField({int size = 0, bool growable = true})
      : super(
            name: 'grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: 'sint16',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class RecordResistanceField extends Field {
  RecordResistanceField({int size = 0, bool growable = true})
      : super(
            name: 'resistance',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class RecordTimeFromCourseField extends Field {
  RecordTimeFromCourseField({int size = 0, bool growable = true})
      : super(
            name: 'time_from_course',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: 'sint32',
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class RecordCycleLengthField extends Field {
  RecordCycleLengthField({int size = 0, bool growable = true})
      : super(
            name: 'cycle_length',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class RecordTemperatureField extends Field {
  RecordTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: 'sint8',
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class RecordSpeed1sField extends Field {
  RecordSpeed1sField({int size = 0, bool growable = true})
      : super(
            name: 'speed_1s',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 16,
            size: size,
            units: 'm/s',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 17;
}

class RecordCyclesField extends Field {
  RecordCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'cycles',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'cycles',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 18;
}

class RecordTotalCyclesField extends Field {
  RecordTotalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_cycles',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'cycles',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 19;
}

class RecordCompressedAccumulatedPowerField extends Field {
  RecordCompressedAccumulatedPowerField({int size = 0, bool growable = true})
      : super(
            name: 'compressed_accumulated_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 28;
}

class RecordAccumulatedPowerField extends Field {
  RecordAccumulatedPowerField({int size = 0, bool growable = true})
      : super(
            name: 'accumulated_power',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 29;
}

class RecordLeftRightBalanceField extends Field {
  RecordLeftRightBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'left_right_balance',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 30;
}

class RecordGpsAccuracyField extends Field {
  RecordGpsAccuracyField({int size = 0, bool growable = true})
      : super(
            name: 'gps_accuracy',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 31;
}

class RecordVerticalSpeedField extends Field {
  RecordVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: 'sint16',
            growable: growable,
            subFields: []);

  static const ID = 32;
}

class RecordCaloriesField extends Field {
  RecordCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 33;
}

class RecordVerticalOscillationField extends Field {
  RecordVerticalOscillationField({int size = 0, bool growable = true})
      : super(
            name: 'vertical_oscillation',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'mm',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 39;
}

class RecordStanceTimePercentField extends Field {
  RecordStanceTimePercentField({int size = 0, bool growable = true})
      : super(
            name: 'stance_time_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 40;
}

class RecordStanceTimeField extends Field {
  RecordStanceTimeField({int size = 0, bool growable = true})
      : super(
            name: 'stance_time',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'ms',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 41;
}

class RecordActivityTypeField extends Field {
  RecordActivityTypeField({int size = 0, bool growable = true})
      : super(
            name: 'activity_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 42;
}

class RecordLeftTorqueEffectivenessField extends Field {
  RecordLeftTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'left_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 43;
}

class RecordRightTorqueEffectivenessField extends Field {
  RecordRightTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'right_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 44;
}

class RecordLeftPedalSmoothnessField extends Field {
  RecordLeftPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'left_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 45;
}

class RecordRightPedalSmoothnessField extends Field {
  RecordRightPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'right_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 46;
}

class RecordCombinedPedalSmoothnessField extends Field {
  RecordCombinedPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'combined_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 47;
}

class RecordTime128Field extends Field {
  RecordTime128Field({int size = 0, bool growable = true})
      : super(
            name: 'time128',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 's',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 48;
}

class RecordStrokeTypeField extends Field {
  RecordStrokeTypeField({int size = 0, bool growable = true})
      : super(
            name: 'stroke_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 49;
}

class RecordZoneField extends Field {
  RecordZoneField({int size = 0, bool growable = true})
      : super(
            name: 'zone',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 50;
}

class RecordBallSpeedField extends Field {
  RecordBallSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'ball_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm/s',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 51;
}

class RecordCadence256Field extends Field {
  RecordCadence256Field({int size = 0, bool growable = true})
      : super(
            name: 'cadence256',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 256,
            size: size,
            units: 'rpm',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 52;
}

class RecordFractionalCadenceField extends Field {
  RecordFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 53;
}

class RecordTotalHemoglobinConcField extends Field {
  RecordTotalHemoglobinConcField({int size = 0, bool growable = true})
      : super(
            name: 'total_hemoglobin_conc',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 54;
}

class RecordTotalHemoglobinConcMinField extends Field {
  RecordTotalHemoglobinConcMinField({int size = 0, bool growable = true})
      : super(
            name: 'total_hemoglobin_conc_min',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 55;
}

class RecordTotalHemoglobinConcMaxField extends Field {
  RecordTotalHemoglobinConcMaxField({int size = 0, bool growable = true})
      : super(
            name: 'total_hemoglobin_conc_max',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 56;
}

class RecordSaturatedHemoglobinPercentField extends Field {
  RecordSaturatedHemoglobinPercentField({int size = 0, bool growable = true})
      : super(
            name: 'saturated_hemoglobin_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 57;
}

class RecordSaturatedHemoglobinPercentMinField extends Field {
  RecordSaturatedHemoglobinPercentMinField({int size = 0, bool growable = true})
      : super(
            name: 'saturated_hemoglobin_percent_min',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 58;
}

class RecordSaturatedHemoglobinPercentMaxField extends Field {
  RecordSaturatedHemoglobinPercentMaxField({int size = 0, bool growable = true})
      : super(
            name: 'saturated_hemoglobin_percent_max',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 59;
}

class RecordDeviceIndexField extends Field {
  RecordDeviceIndexField({int size = 0, bool growable = true})
      : super(
            name: 'device_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 62;
}

class RecordLeftPcoField extends Field {
  RecordLeftPcoField({int size = 0, bool growable = true})
      : super(
            name: 'left_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: 'sint8',
            growable: growable,
            subFields: []);

  static const ID = 67;
}

class RecordRightPcoField extends Field {
  RecordRightPcoField({int size = 0, bool growable = true})
      : super(
            name: 'right_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: 'sint8',
            growable: growable,
            subFields: []);

  static const ID = 68;
}

class RecordLeftPowerPhaseField extends Field {
  RecordLeftPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'left_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 69;
}

class RecordLeftPowerPhasePeakField extends Field {
  RecordLeftPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'left_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 70;
}

class RecordRightPowerPhaseField extends Field {
  RecordRightPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'right_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 71;
}

class RecordRightPowerPhasePeakField extends Field {
  RecordRightPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'right_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 72;
}

class RecordEnhancedSpeedField extends Field {
  RecordEnhancedSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_speed',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 73;
}

class RecordEnhancedAltitudeField extends Field {
  RecordEnhancedAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_altitude',
            id: ID,
            type: BaseType.UINT32,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 78;
}

class RecordBatterySocField extends Field {
  RecordBatterySocField({int size = 0, bool growable = true})
      : super(
            name: 'battery_soc',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 81;
}

class RecordMotorPowerField extends Field {
  RecordMotorPowerField({int size = 0, bool growable = true})
      : super(
            name: 'motor_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 82;
}

class RecordVerticalRatioField extends Field {
  RecordVerticalRatioField({int size = 0, bool growable = true})
      : super(
            name: 'vertical_ratio',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 83;
}

class RecordStanceTimeBalanceField extends Field {
  RecordStanceTimeBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'stance_time_balance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 84;
}

class RecordStepLengthField extends Field {
  RecordStepLengthField({int size = 0, bool growable = true})
      : super(
            name: 'step_length',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'mm',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 85;
}

class RecordAbsolutePressureField extends Field {
  RecordAbsolutePressureField({int size = 0, bool growable = true})
      : super(
            name: 'absolute_pressure',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Pa',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 91;
}

class RecordDepthField extends Field {
  RecordDepthField({int size = 0, bool growable = true})
      : super(
            name: 'depth',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 92;
}

class RecordNextStopDepthField extends Field {
  RecordNextStopDepthField({int size = 0, bool growable = true})
      : super(
            name: 'next_stop_depth',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 93;
}

class RecordNextStopTimeField extends Field {
  RecordNextStopTimeField({int size = 0, bool growable = true})
      : super(
            name: 'next_stop_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 94;
}

class RecordTimeToSurfaceField extends Field {
  RecordTimeToSurfaceField({int size = 0, bool growable = true})
      : super(
            name: 'time_to_surface',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 95;
}

class RecordNdlTimeField extends Field {
  RecordNdlTimeField({int size = 0, bool growable = true})
      : super(
            name: 'ndl_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 96;
}

class RecordCnsLoadField extends Field {
  RecordCnsLoadField({int size = 0, bool growable = true})
      : super(
            name: 'cns_load',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 97;
}

class RecordN2LoadField extends Field {
  RecordN2LoadField({int size = 0, bool growable = true})
      : super(
            name: 'n2_load',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 98;
}

class RecordGritField extends Field {
  RecordGritField({int size = 0, bool growable = true})
      : super(
            name: 'grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 114;
}

class RecordFlowField extends Field {
  RecordFlowField({int size = 0, bool growable = true})
      : super(
            name: 'flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 115;
}

class RecordEbikeTravelRangeField extends Field {
  RecordEbikeTravelRangeField({int size = 0, bool growable = true})
      : super(
            name: 'ebike_travel_range',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'km',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 117;
}

class RecordEbikeBatteryLevelField extends Field {
  RecordEbikeBatteryLevelField({int size = 0, bool growable = true})
      : super(
            name: 'ebike_battery_level',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 118;
}

class RecordEbikeAssistModeField extends Field {
  RecordEbikeAssistModeField({int size = 0, bool growable = true})
      : super(
            name: 'ebike_assist_mode',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'depends on sensor',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 119;
}

class RecordEbikeAssistLevelPercentField extends Field {
  RecordEbikeAssistLevelPercentField({int size = 0, bool growable = true})
      : super(
            name: 'ebike_assist_level_percent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 120;
}

class RecordCoreTemperatureField extends Field {
  RecordCoreTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'core_temperature',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 139;
}
