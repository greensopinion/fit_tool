/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class SessionMessage extends DataMessage {
  SessionMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: SessionMessage.NAME,
            globalId: SessionMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEventField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionEventField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEventTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionEventTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionStartTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionStartTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionStartPositionLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionStartPositionLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionStartPositionLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionStartPositionLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionSubSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionSubSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalElapsedTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalElapsedTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalTimerTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalTimerTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalFatCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalFatCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalAscentField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalAscentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalDescentField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalDescentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalTrainingEffectField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionTotalTrainingEffectField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionFirstLapIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionFirstLapIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionNumLapsField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionNumLapsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEventGroupField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionEventGroupField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTriggerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTriggerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionNecLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionNecLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionNecLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionNecLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionSwcLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionSwcLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionSwcLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionSwcLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionNumLengthsField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionNumLengthsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionNormalizedPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionNormalizedPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTrainingStressScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionTrainingStressScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionIntensityFactorField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionIntensityFactorField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionLeftRightBalanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionLeftRightBalanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgStrokeCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgStrokeCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgStrokeDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgStrokeDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionSwimStrokeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionSwimStrokeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionPoolLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionPoolLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionThresholdPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionThresholdPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionPoolLengthUnitField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionPoolLengthUnitField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionNumActiveLengthsField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionNumActiveLengthsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalWorkField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalWorkField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionGpsAccuracyField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionGpsAccuracyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgPosGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgPosGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgNegGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgNegGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxPosGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxPosGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxNegGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxNegGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalMovingTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalMovingTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgPosVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgPosVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgNegVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgNegVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxPosVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMaxPosVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxNegVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMaxNegVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMinHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMinHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTimeInHrZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTimeInHrZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTimeInSpeedZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTimeInSpeedZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTimeInCadenceZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTimeInCadenceZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTimeInPowerZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTimeInPowerZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgLapTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgLapTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionBestLapIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionBestLapIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMinAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMinAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionPlayerScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionPlayerScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionOpponentScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionOpponentScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionOpponentNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionOpponentNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionStrokeCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionStrokeCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionZoneCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionZoneCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxBallSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxBallSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgBallSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgBallSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgVerticalOscillationField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgVerticalOscillationField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgStanceTimePercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgStanceTimePercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgStanceTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgStanceTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgFractionalCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgFractionalCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxFractionalCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMaxFractionalCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalFractionalCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionTotalFractionalCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgTotalHemoglobinConcField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgTotalHemoglobinConcField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMinTotalHemoglobinConcField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMinTotalHemoglobinConcField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxTotalHemoglobinConcField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMaxTotalHemoglobinConcField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgSaturatedHemoglobinPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgSaturatedHemoglobinPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMinSaturatedHemoglobinPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMinSaturatedHemoglobinPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxSaturatedHemoglobinPercentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMaxSaturatedHemoglobinPercentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgLeftTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgLeftTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgRightTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgRightTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgLeftPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgLeftPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgRightPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgRightPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgCombinedPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgCombinedPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionSportIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionSportIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTimeStandingField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTimeStandingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionStandCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionStandCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgLeftPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgLeftPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgRightPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgRightPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgLeftPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgLeftPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgLeftPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgLeftPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgRightPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgRightPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgRightPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgRightPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgPowerPositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgPowerPositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxPowerPositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxPowerPositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgCadencePositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgCadencePositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxCadencePositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMaxCadencePositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEnhancedAvgSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionEnhancedAvgSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEnhancedMaxSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionEnhancedMaxSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEnhancedAvgAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionEnhancedAvgAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEnhancedMinAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionEnhancedMinAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionEnhancedMaxAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionEnhancedMaxAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgLevMotorPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgLevMotorPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxLevMotorPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionMaxLevMotorPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionLevBatteryConsumptionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionLevBatteryConsumptionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgVerticalRatioField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgVerticalRatioField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgStanceTimeBalanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgStanceTimeBalanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgStepLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgStepLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalAnaerobicTrainingEffectField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionTotalAnaerobicTrainingEffectField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgVamField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgVamField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalGritField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalGritField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalFlowField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionTotalFlowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionJumpCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionJumpCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgGritField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgGritField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgFlowField(
                  size: definitionMessage
                          ?.getFieldDefinition(SessionAvgFlowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalFractionalAscentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionTotalFractionalAscentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionTotalFractionalDescentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionTotalFractionalDescentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionAvgCoreTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionAvgCoreTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMinCoreTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMinCoreTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SessionMaxCoreTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SessionMaxCoreTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 18;
  static const NAME = 'session';

  final bool growable;

  static SessionMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = SessionMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  Event? get event {
    final field = getField(SessionEventField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventExt.fromValue(value);
    } else {
      return null;
    }
  }

  set event(Event? value) {
    final field = getField(SessionEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  EventType? get eventType {
    final field = getField(SessionEventTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set eventType(EventType? value) {
    final field = getField(SessionEventTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get startTime {
    final field = getField(SessionStartTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set startTime(int? value) {
    final field = getField(SessionStartTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get startPositionLat {
    final field = getField(SessionStartPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set startPositionLat(double? value) {
    final field = getField(SessionStartPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get startPositionLong {
    final field = getField(SessionStartPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set startPositionLong(double? value) {
    final field = getField(SessionStartPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  Sport? get sport {
    final field = getField(SessionSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SportExt.fromValue(value);
    } else {
      return null;
    }
  }

  set sport(Sport? value) {
    final field = getField(SessionSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  SubSport? get subSport {
    final field = getField(SessionSubSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SubSportExt.fromValue(value);
    } else {
      return null;
    }
  }

  set subSport(SubSport? value) {
    final field = getField(SessionSubSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  double? get totalElapsedTime {
    final field = getField(SessionTotalElapsedTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalElapsedTime(double? value) {
    final field = getField(SessionTotalElapsedTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalTimerTime {
    final field = getField(SessionTotalTimerTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalTimerTime(double? value) {
    final field = getField(SessionTotalTimerTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalDistance {
    final field = getField(SessionTotalDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalDistance(double? value) {
    final field = getField(SessionTotalDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalCycles {
    final field = getField(SessionTotalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalCycles(int? value) {
    final field = getField(SessionTotalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalStrides {
    final field = getField(SessionTotalCyclesField.ID);
    final typeField = getField(SessionSportField.ID);

    final isSubFieldValid =
        typeField != null && [1, 11].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalStrides(int? value) {
    final field = getField(SessionTotalCyclesField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalStrokes {
    final field = getField(SessionTotalCyclesField.ID);
    final typeField = getField(SessionSportField.ID);

    final isSubFieldValid =
        typeField != null && [2, 5, 15, 37].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalStrokes(int? value) {
    final field = getField(SessionTotalCyclesField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalCalories {
    final field = getField(SessionTotalCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalCalories(int? value) {
    final field = getField(SessionTotalCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalFatCalories {
    final field = getField(SessionTotalFatCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFatCalories(int? value) {
    final field = getField(SessionTotalFatCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgSpeed {
    final field = getField(SessionAvgSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgSpeed(double? value) {
    final field = getField(SessionAvgSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxSpeed {
    final field = getField(SessionMaxSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxSpeed(double? value) {
    final field = getField(SessionMaxSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgHeartRate {
    final field = getField(SessionAvgHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgHeartRate(int? value) {
    final field = getField(SessionAvgHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxHeartRate {
    final field = getField(SessionMaxHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxHeartRate(int? value) {
    final field = getField(SessionMaxHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgCadence {
    final field = getField(SessionAvgCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCadence(int? value) {
    final field = getField(SessionAvgCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgRunningCadence {
    final field = getField(SessionAvgCadenceField.ID);
    final typeField = getField(SessionSportField.ID);

    final isSubFieldValid =
        typeField != null && [1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRunningCadence(int? value) {
    final field = getField(SessionAvgCadenceField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxCadence {
    final field = getField(SessionMaxCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxCadence(int? value) {
    final field = getField(SessionMaxCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxRunningCadence {
    final field = getField(SessionMaxCadenceField.ID);
    final typeField = getField(SessionSportField.ID);

    final isSubFieldValid =
        typeField != null && [1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxRunningCadence(int? value) {
    final field = getField(SessionMaxCadenceField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgPower {
    final field = getField(SessionAvgPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPower(int? value) {
    final field = getField(SessionAvgPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxPower {
    final field = getField(SessionMaxPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPower(int? value) {
    final field = getField(SessionMaxPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalAscent {
    final field = getField(SessionTotalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalAscent(int? value) {
    final field = getField(SessionTotalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalDescent {
    final field = getField(SessionTotalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalDescent(int? value) {
    final field = getField(SessionTotalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalTrainingEffect {
    final field = getField(SessionTotalTrainingEffectField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalTrainingEffect(double? value) {
    final field = getField(SessionTotalTrainingEffectField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get firstLapIndex {
    final field = getField(SessionFirstLapIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set firstLapIndex(int? value) {
    final field = getField(SessionFirstLapIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get numLaps {
    final field = getField(SessionNumLapsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set numLaps(int? value) {
    final field = getField(SessionNumLapsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get eventGroup {
    final field = getField(SessionEventGroupField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set eventGroup(int? value) {
    final field = getField(SessionEventGroupField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  SessionTrigger? get trigger {
    final field = getField(SessionTriggerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SessionTriggerExt.fromValue(value);
    } else {
      return null;
    }
  }

  set trigger(SessionTrigger? value) {
    final field = getField(SessionTriggerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  double? get necLat {
    final field = getField(SessionNecLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set necLat(double? value) {
    final field = getField(SessionNecLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get necLong {
    final field = getField(SessionNecLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set necLong(double? value) {
    final field = getField(SessionNecLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get swcLat {
    final field = getField(SessionSwcLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set swcLat(double? value) {
    final field = getField(SessionSwcLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get swcLong {
    final field = getField(SessionSwcLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set swcLong(double? value) {
    final field = getField(SessionSwcLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get numLengths {
    final field = getField(SessionNumLengthsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set numLengths(int? value) {
    final field = getField(SessionNumLengthsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get normalizedPower {
    final field = getField(SessionNormalizedPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set normalizedPower(int? value) {
    final field = getField(SessionNormalizedPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get trainingStressScore {
    final field = getField(SessionTrainingStressScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set trainingStressScore(double? value) {
    final field = getField(SessionTrainingStressScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get intensityFactor {
    final field = getField(SessionIntensityFactorField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set intensityFactor(double? value) {
    final field = getField(SessionIntensityFactorField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get leftRightBalance {
    final field = getField(SessionLeftRightBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set leftRightBalance(int? value) {
    final field = getField(SessionLeftRightBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStrokeCount {
    final field = getField(SessionAvgStrokeCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStrokeCount(double? value) {
    final field = getField(SessionAvgStrokeCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStrokeDistance {
    final field = getField(SessionAvgStrokeDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStrokeDistance(double? value) {
    final field = getField(SessionAvgStrokeDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  SwimStroke? get swimStroke {
    final field = getField(SessionSwimStrokeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SwimStrokeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set swimStroke(SwimStroke? value) {
    final field = getField(SessionSwimStrokeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  double? get poolLength {
    final field = getField(SessionPoolLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set poolLength(double? value) {
    final field = getField(SessionPoolLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get thresholdPower {
    final field = getField(SessionThresholdPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set thresholdPower(int? value) {
    final field = getField(SessionThresholdPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  DisplayMeasure? get poolLengthUnit {
    final field = getField(SessionPoolLengthUnitField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  set poolLengthUnit(DisplayMeasure? value) {
    final field = getField(SessionPoolLengthUnitField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  int? get numActiveLengths {
    final field = getField(SessionNumActiveLengthsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set numActiveLengths(int? value) {
    final field = getField(SessionNumActiveLengthsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalWork {
    final field = getField(SessionTotalWorkField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalWork(int? value) {
    final field = getField(SessionTotalWorkField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgAltitude {
    final field = getField(SessionAvgAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgAltitude(double? value) {
    final field = getField(SessionAvgAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxAltitude {
    final field = getField(SessionMaxAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxAltitude(double? value) {
    final field = getField(SessionMaxAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get gpsAccuracy {
    final field = getField(SessionGpsAccuracyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set gpsAccuracy(int? value) {
    final field = getField(SessionGpsAccuracyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgGrade {
    final field = getField(SessionAvgGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgGrade(double? value) {
    final field = getField(SessionAvgGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgPosGrade {
    final field = getField(SessionAvgPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPosGrade(double? value) {
    final field = getField(SessionAvgPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgNegGrade {
    final field = getField(SessionAvgNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgNegGrade(double? value) {
    final field = getField(SessionAvgNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxPosGrade {
    final field = getField(SessionMaxPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPosGrade(double? value) {
    final field = getField(SessionMaxPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxNegGrade {
    final field = getField(SessionMaxNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxNegGrade(double? value) {
    final field = getField(SessionMaxNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgTemperature {
    final field = getField(SessionAvgTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgTemperature(int? value) {
    final field = getField(SessionAvgTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxTemperature {
    final field = getField(SessionMaxTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxTemperature(int? value) {
    final field = getField(SessionMaxTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalMovingTime {
    final field = getField(SessionTotalMovingTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalMovingTime(double? value) {
    final field = getField(SessionTotalMovingTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgPosVerticalSpeed {
    final field = getField(SessionAvgPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPosVerticalSpeed(double? value) {
    final field = getField(SessionAvgPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgNegVerticalSpeed {
    final field = getField(SessionAvgNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgNegVerticalSpeed(double? value) {
    final field = getField(SessionAvgNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxPosVerticalSpeed {
    final field = getField(SessionMaxPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPosVerticalSpeed(double? value) {
    final field = getField(SessionMaxPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxNegVerticalSpeed {
    final field = getField(SessionMaxNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxNegVerticalSpeed(double? value) {
    final field = getField(SessionMaxNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get minHeartRate {
    final field = getField(SessionMinHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minHeartRate(int? value) {
    final field = getField(SessionMinHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInHrZone {
    final field = getField(SessionTimeInHrZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInHrZone(double? value) {
    final field = getField(SessionTimeInHrZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInSpeedZone {
    final field = getField(SessionTimeInSpeedZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInSpeedZone(double? value) {
    final field = getField(SessionTimeInSpeedZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInCadenceZone {
    final field = getField(SessionTimeInCadenceZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInCadenceZone(double? value) {
    final field = getField(SessionTimeInCadenceZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeInPowerZone {
    final field = getField(SessionTimeInPowerZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeInPowerZone(double? value) {
    final field = getField(SessionTimeInPowerZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLapTime {
    final field = getField(SessionAvgLapTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLapTime(double? value) {
    final field = getField(SessionAvgLapTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get bestLapIndex {
    final field = getField(SessionBestLapIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set bestLapIndex(int? value) {
    final field = getField(SessionBestLapIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minAltitude {
    final field = getField(SessionMinAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minAltitude(double? value) {
    final field = getField(SessionMinAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get playerScore {
    final field = getField(SessionPlayerScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set playerScore(int? value) {
    final field = getField(SessionPlayerScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get opponentScore {
    final field = getField(SessionOpponentScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set opponentScore(int? value) {
    final field = getField(SessionOpponentScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  String? get opponentName {
    final field = getField(SessionOpponentNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set opponentName(String? value) {
    final field = getField(SessionOpponentNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get strokeCount {
    final field = getField(SessionStrokeCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set strokeCount(int? value) {
    final field = getField(SessionStrokeCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get zoneCount {
    final field = getField(SessionZoneCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set zoneCount(int? value) {
    final field = getField(SessionZoneCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxBallSpeed {
    final field = getField(SessionMaxBallSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxBallSpeed(double? value) {
    final field = getField(SessionMaxBallSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgBallSpeed {
    final field = getField(SessionAvgBallSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgBallSpeed(double? value) {
    final field = getField(SessionAvgBallSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgVerticalOscillation {
    final field = getField(SessionAvgVerticalOscillationField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgVerticalOscillation(double? value) {
    final field = getField(SessionAvgVerticalOscillationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStanceTimePercent {
    final field = getField(SessionAvgStanceTimePercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStanceTimePercent(double? value) {
    final field = getField(SessionAvgStanceTimePercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStanceTime {
    final field = getField(SessionAvgStanceTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStanceTime(double? value) {
    final field = getField(SessionAvgStanceTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgFractionalCadence {
    final field = getField(SessionAvgFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgFractionalCadence(double? value) {
    final field = getField(SessionAvgFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxFractionalCadence {
    final field = getField(SessionMaxFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxFractionalCadence(double? value) {
    final field = getField(SessionMaxFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFractionalCycles {
    final field = getField(SessionTotalFractionalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFractionalCycles(double? value) {
    final field = getField(SessionTotalFractionalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgTotalHemoglobinConc {
    final field = getField(SessionAvgTotalHemoglobinConcField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgTotalHemoglobinConc(double? value) {
    final field = getField(SessionAvgTotalHemoglobinConcField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minTotalHemoglobinConc {
    final field = getField(SessionMinTotalHemoglobinConcField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minTotalHemoglobinConc(double? value) {
    final field = getField(SessionMinTotalHemoglobinConcField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxTotalHemoglobinConc {
    final field = getField(SessionMaxTotalHemoglobinConcField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxTotalHemoglobinConc(double? value) {
    final field = getField(SessionMaxTotalHemoglobinConcField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgSaturatedHemoglobinPercent {
    final field = getField(SessionAvgSaturatedHemoglobinPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgSaturatedHemoglobinPercent(double? value) {
    final field = getField(SessionAvgSaturatedHemoglobinPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minSaturatedHemoglobinPercent {
    final field = getField(SessionMinSaturatedHemoglobinPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minSaturatedHemoglobinPercent(double? value) {
    final field = getField(SessionMinSaturatedHemoglobinPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxSaturatedHemoglobinPercent {
    final field = getField(SessionMaxSaturatedHemoglobinPercentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxSaturatedHemoglobinPercent(double? value) {
    final field = getField(SessionMaxSaturatedHemoglobinPercentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftTorqueEffectiveness {
    final field = getField(SessionAvgLeftTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftTorqueEffectiveness(double? value) {
    final field = getField(SessionAvgLeftTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightTorqueEffectiveness {
    final field = getField(SessionAvgRightTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightTorqueEffectiveness(double? value) {
    final field = getField(SessionAvgRightTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftPedalSmoothness {
    final field = getField(SessionAvgLeftPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPedalSmoothness(double? value) {
    final field = getField(SessionAvgLeftPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightPedalSmoothness {
    final field = getField(SessionAvgRightPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPedalSmoothness(double? value) {
    final field = getField(SessionAvgRightPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgCombinedPedalSmoothness {
    final field = getField(SessionAvgCombinedPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCombinedPedalSmoothness(double? value) {
    final field = getField(SessionAvgCombinedPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get sportIndex {
    final field = getField(SessionSportIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set sportIndex(int? value) {
    final field = getField(SessionSportIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get timeStanding {
    final field = getField(SessionTimeStandingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeStanding(double? value) {
    final field = getField(SessionTimeStandingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get standCount {
    final field = getField(SessionStandCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set standCount(int? value) {
    final field = getField(SessionStandCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgLeftPco {
    final field = getField(SessionAvgLeftPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPco(int? value) {
    final field = getField(SessionAvgLeftPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgRightPco {
    final field = getField(SessionAvgRightPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPco(int? value) {
    final field = getField(SessionAvgRightPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftPowerPhase {
    final field = getField(SessionAvgLeftPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPowerPhase(double? value) {
    final field = getField(SessionAvgLeftPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgLeftPowerPhasePeak {
    final field = getField(SessionAvgLeftPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLeftPowerPhasePeak(double? value) {
    final field = getField(SessionAvgLeftPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightPowerPhase {
    final field = getField(SessionAvgRightPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPowerPhase(double? value) {
    final field = getField(SessionAvgRightPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgRightPowerPhasePeak {
    final field = getField(SessionAvgRightPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgRightPowerPhasePeak(double? value) {
    final field = getField(SessionAvgRightPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgPowerPosition {
    final field = getField(SessionAvgPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgPowerPosition(int? value) {
    final field = getField(SessionAvgPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxPowerPosition {
    final field = getField(SessionMaxPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxPowerPosition(int? value) {
    final field = getField(SessionMaxPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgCadencePosition {
    final field = getField(SessionAvgCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCadencePosition(int? value) {
    final field = getField(SessionAvgCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxCadencePosition {
    final field = getField(SessionMaxCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxCadencePosition(int? value) {
    final field = getField(SessionMaxCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedAvgSpeed {
    final field = getField(SessionEnhancedAvgSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedAvgSpeed(double? value) {
    final field = getField(SessionEnhancedAvgSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedMaxSpeed {
    final field = getField(SessionEnhancedMaxSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedMaxSpeed(double? value) {
    final field = getField(SessionEnhancedMaxSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedAvgAltitude {
    final field = getField(SessionEnhancedAvgAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedAvgAltitude(double? value) {
    final field = getField(SessionEnhancedAvgAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedMinAltitude {
    final field = getField(SessionEnhancedMinAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedMinAltitude(double? value) {
    final field = getField(SessionEnhancedMinAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get enhancedMaxAltitude {
    final field = getField(SessionEnhancedMaxAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enhancedMaxAltitude(double? value) {
    final field = getField(SessionEnhancedMaxAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get avgLevMotorPower {
    final field = getField(SessionAvgLevMotorPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgLevMotorPower(int? value) {
    final field = getField(SessionAvgLevMotorPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get maxLevMotorPower {
    final field = getField(SessionMaxLevMotorPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxLevMotorPower(int? value) {
    final field = getField(SessionMaxLevMotorPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get levBatteryConsumption {
    final field = getField(SessionLevBatteryConsumptionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set levBatteryConsumption(double? value) {
    final field = getField(SessionLevBatteryConsumptionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgVerticalRatio {
    final field = getField(SessionAvgVerticalRatioField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgVerticalRatio(double? value) {
    final field = getField(SessionAvgVerticalRatioField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStanceTimeBalance {
    final field = getField(SessionAvgStanceTimeBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStanceTimeBalance(double? value) {
    final field = getField(SessionAvgStanceTimeBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgStepLength {
    final field = getField(SessionAvgStepLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgStepLength(double? value) {
    final field = getField(SessionAvgStepLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalAnaerobicTrainingEffect {
    final field = getField(SessionTotalAnaerobicTrainingEffectField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalAnaerobicTrainingEffect(double? value) {
    final field = getField(SessionTotalAnaerobicTrainingEffectField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgVam {
    final field = getField(SessionAvgVamField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgVam(double? value) {
    final field = getField(SessionAvgVamField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalGrit {
    final field = getField(SessionTotalGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalGrit(double? value) {
    final field = getField(SessionTotalGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFlow {
    final field = getField(SessionTotalFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFlow(double? value) {
    final field = getField(SessionTotalFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get jumpCount {
    final field = getField(SessionJumpCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set jumpCount(int? value) {
    final field = getField(SessionJumpCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgGrit {
    final field = getField(SessionAvgGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgGrit(double? value) {
    final field = getField(SessionAvgGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgFlow {
    final field = getField(SessionAvgFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgFlow(double? value) {
    final field = getField(SessionAvgFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFractionalAscent {
    final field = getField(SessionTotalFractionalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFractionalAscent(double? value) {
    final field = getField(SessionTotalFractionalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get totalFractionalDescent {
    final field = getField(SessionTotalFractionalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set totalFractionalDescent(double? value) {
    final field = getField(SessionTotalFractionalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get avgCoreTemperature {
    final field = getField(SessionAvgCoreTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set avgCoreTemperature(double? value) {
    final field = getField(SessionAvgCoreTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get minCoreTemperature {
    final field = getField(SessionMinCoreTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set minCoreTemperature(double? value) {
    final field = getField(SessionMinCoreTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get maxCoreTemperature {
    final field = getField(SessionMaxCoreTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set maxCoreTemperature(double? value) {
    final field = getField(SessionMaxCoreTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
}

class SessionEventField extends Field {
  SessionEventField({int size = 0, bool growable = true})
      : super(
            name: 'event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class SessionEventTypeField extends Field {
  SessionEventTypeField({int size = 0, bool growable = true})
      : super(
            name: 'event_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class SessionStartTimeField extends Field {
  SessionStartTimeField({int size = 0, bool growable = true})
      : super(
            name: 'start_time',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class SessionStartPositionLatField extends Field {
  SessionStartPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class SessionStartPositionLongField extends Field {
  SessionStartPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class SessionSportField extends Field {
  SessionSportField({int size = 0, bool growable = true})
      : super(
            name: 'sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class SessionSubSportField extends Field {
  SessionSubSportField({int size = 0, bool growable = true})
      : super(
            name: 'sub_sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class SessionTotalElapsedTimeField extends Field {
  SessionTotalElapsedTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_elapsed_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class SessionTotalTimerTimeField extends Field {
  SessionTotalTimerTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_timer_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class SessionTotalDistanceField extends Field {
  SessionTotalDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'total_distance',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class SessionTotalCyclesField extends Field {
  SessionTotalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_cycles',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'total_strides',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'strides',
                  referenceMap: {
                    SessionSportField.ID: [1, 11]
                  }),
              SubField(
                  name: 'total_strokes',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'strokes',
                  referenceMap: {
                    SessionSportField.ID: [2, 5, 15, 37]
                  })
            ]);

  static const ID = 10;
}

class SessionTotalCaloriesField extends Field {
  SessionTotalCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class SessionTotalFatCaloriesField extends Field {
  SessionTotalFatCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fat_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class SessionAvgSpeedField extends Field {
  SessionAvgSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 14;
}

class SessionMaxSpeedField extends Field {
  SessionMaxSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 15;
}

class SessionAvgHeartRateField extends Field {
  SessionAvgHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'avg_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 16;
}

class SessionMaxHeartRateField extends Field {
  SessionMaxHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'max_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 17;
}

class SessionAvgCadenceField extends Field {
  SessionAvgCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'avg_running_cadence',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  units: 'strides/min',
                  referenceMap: {
                    SessionSportField.ID: [1]
                  })
            ]);

  static const ID = 18;
}

class SessionMaxCadenceField extends Field {
  SessionMaxCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'max_running_cadence',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  units: 'strides/min',
                  referenceMap: {
                    SessionSportField.ID: [1]
                  })
            ]);

  static const ID = 19;
}

class SessionAvgPowerField extends Field {
  SessionAvgPowerField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 20;
}

class SessionMaxPowerField extends Field {
  SessionMaxPowerField({int size = 0, bool growable = true})
      : super(
            name: 'max_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 21;
}

class SessionTotalAscentField extends Field {
  SessionTotalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_ascent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 22;
}

class SessionTotalDescentField extends Field {
  SessionTotalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_descent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 23;
}

class SessionTotalTrainingEffectField extends Field {
  SessionTotalTrainingEffectField({int size = 0, bool growable = true})
      : super(
            name: 'total_training_effect',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 10,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 24;
}

class SessionFirstLapIndexField extends Field {
  SessionFirstLapIndexField({int size = 0, bool growable = true})
      : super(
            name: 'first_lap_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 25;
}

class SessionNumLapsField extends Field {
  SessionNumLapsField({int size = 0, bool growable = true})
      : super(
            name: 'num_laps',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 26;
}

class SessionEventGroupField extends Field {
  SessionEventGroupField({int size = 0, bool growable = true})
      : super(
            name: 'event_group',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 27;
}

class SessionTriggerField extends Field {
  SessionTriggerField({int size = 0, bool growable = true})
      : super(
            name: 'trigger',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 28;
}

class SessionNecLatField extends Field {
  SessionNecLatField({int size = 0, bool growable = true})
      : super(
            name: 'nec_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 29;
}

class SessionNecLongField extends Field {
  SessionNecLongField({int size = 0, bool growable = true})
      : super(
            name: 'nec_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 30;
}

class SessionSwcLatField extends Field {
  SessionSwcLatField({int size = 0, bool growable = true})
      : super(
            name: 'swc_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 31;
}

class SessionSwcLongField extends Field {
  SessionSwcLongField({int size = 0, bool growable = true})
      : super(
            name: 'swc_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 32;
}

class SessionNumLengthsField extends Field {
  SessionNumLengthsField({int size = 0, bool growable = true})
      : super(
            name: 'num_lengths',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'lengths',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 33;
}

class SessionNormalizedPowerField extends Field {
  SessionNormalizedPowerField({int size = 0, bool growable = true})
      : super(
            name: 'normalized_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 34;
}

class SessionTrainingStressScoreField extends Field {
  SessionTrainingStressScoreField({int size = 0, bool growable = true})
      : super(
            name: 'training_stress_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'tss',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 35;
}

class SessionIntensityFactorField extends Field {
  SessionIntensityFactorField({int size = 0, bool growable = true})
      : super(
            name: 'intensity_factor',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'if',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 36;
}

class SessionLeftRightBalanceField extends Field {
  SessionLeftRightBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'left_right_balance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 37;
}

class SessionAvgStrokeCountField extends Field {
  SessionAvgStrokeCountField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stroke_count',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 10,
            size: size,
            units: 'strokes/lap',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 41;
}

class SessionAvgStrokeDistanceField extends Field {
  SessionAvgStrokeDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stroke_distance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 42;
}

class SessionSwimStrokeField extends Field {
  SessionSwimStrokeField({int size = 0, bool growable = true})
      : super(
            name: 'swim_stroke',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            units: 'swim_stroke',
            mainTypeName: 'swim_stroke',
            growable: growable,
            subFields: []);

  static const ID = 43;
}

class SessionPoolLengthField extends Field {
  SessionPoolLengthField({int size = 0, bool growable = true})
      : super(
            name: 'pool_length',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 44;
}

class SessionThresholdPowerField extends Field {
  SessionThresholdPowerField({int size = 0, bool growable = true})
      : super(
            name: 'threshold_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 45;
}

class SessionPoolLengthUnitField extends Field {
  SessionPoolLengthUnitField({int size = 0, bool growable = true})
      : super(
            name: 'pool_length_unit',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 46;
}

class SessionNumActiveLengthsField extends Field {
  SessionNumActiveLengthsField({int size = 0, bool growable = true})
      : super(
            name: 'num_active_lengths',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'lengths',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 47;
}

class SessionTotalWorkField extends Field {
  SessionTotalWorkField({int size = 0, bool growable = true})
      : super(
            name: 'total_work',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'J',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 48;
}

class SessionAvgAltitudeField extends Field {
  SessionAvgAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 49;
}

class SessionMaxAltitudeField extends Field {
  SessionMaxAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'max_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 50;
}

class SessionGpsAccuracyField extends Field {
  SessionGpsAccuracyField({int size = 0, bool growable = true})
      : super(
            name: 'gps_accuracy',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 51;
}

class SessionAvgGradeField extends Field {
  SessionAvgGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 52;
}

class SessionAvgPosGradeField extends Field {
  SessionAvgPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 53;
}

class SessionAvgNegGradeField extends Field {
  SessionAvgNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 54;
}

class SessionMaxPosGradeField extends Field {
  SessionMaxPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 55;
}

class SessionMaxNegGradeField extends Field {
  SessionMaxNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 56;
}

class SessionAvgTemperatureField extends Field {
  SessionAvgTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'avg_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 57;
}

class SessionMaxTemperatureField extends Field {
  SessionMaxTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'max_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 58;
}

class SessionTotalMovingTimeField extends Field {
  SessionTotalMovingTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_moving_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 59;
}

class SessionAvgPosVerticalSpeedField extends Field {
  SessionAvgPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 60;
}

class SessionAvgNegVerticalSpeedField extends Field {
  SessionAvgNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 61;
}

class SessionMaxPosVerticalSpeedField extends Field {
  SessionMaxPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 62;
}

class SessionMaxNegVerticalSpeedField extends Field {
  SessionMaxNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 63;
}

class SessionMinHeartRateField extends Field {
  SessionMinHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'min_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 64;
}

class SessionTimeInHrZoneField extends Field {
  SessionTimeInHrZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_hr_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 65;
}

class SessionTimeInSpeedZoneField extends Field {
  SessionTimeInSpeedZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_speed_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 66;
}

class SessionTimeInCadenceZoneField extends Field {
  SessionTimeInCadenceZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_cadence_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 67;
}

class SessionTimeInPowerZoneField extends Field {
  SessionTimeInPowerZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_power_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 68;
}

class SessionAvgLapTimeField extends Field {
  SessionAvgLapTimeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_lap_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 69;
}

class SessionBestLapIndexField extends Field {
  SessionBestLapIndexField({int size = 0, bool growable = true})
      : super(
            name: 'best_lap_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 70;
}

class SessionMinAltitudeField extends Field {
  SessionMinAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'min_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 71;
}

class SessionPlayerScoreField extends Field {
  SessionPlayerScoreField({int size = 0, bool growable = true})
      : super(
            name: 'player_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 82;
}

class SessionOpponentScoreField extends Field {
  SessionOpponentScoreField({int size = 0, bool growable = true})
      : super(
            name: 'opponent_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 83;
}

class SessionOpponentNameField extends Field {
  SessionOpponentNameField({int size = 0, bool growable = true})
      : super(
            name: 'opponent_name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 84;
}

class SessionStrokeCountField extends Field {
  SessionStrokeCountField({int size = 0, bool growable = true})
      : super(
            name: 'stroke_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 85;
}

class SessionZoneCountField extends Field {
  SessionZoneCountField({int size = 0, bool growable = true})
      : super(
            name: 'zone_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 86;
}

class SessionMaxBallSpeedField extends Field {
  SessionMaxBallSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_ball_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 87;
}

class SessionAvgBallSpeedField extends Field {
  SessionAvgBallSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_ball_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 88;
}

class SessionAvgVerticalOscillationField extends Field {
  SessionAvgVerticalOscillationField({int size = 0, bool growable = true})
      : super(
            name: 'avg_vertical_oscillation',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 89;
}

class SessionAvgStanceTimePercentField extends Field {
  SessionAvgStanceTimePercentField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stance_time_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 90;
}

class SessionAvgStanceTimeField extends Field {
  SessionAvgStanceTimeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stance_time',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 91;
}

class SessionAvgFractionalCadenceField extends Field {
  SessionAvgFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 92;
}

class SessionMaxFractionalCadenceField extends Field {
  SessionMaxFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 93;
}

class SessionTotalFractionalCyclesField extends Field {
  SessionTotalFractionalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_cycles',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 94;
}

class SessionAvgTotalHemoglobinConcField extends Field {
  SessionAvgTotalHemoglobinConcField({int size = 0, bool growable = true})
      : super(
            name: 'avg_total_hemoglobin_conc',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 95;
}

class SessionMinTotalHemoglobinConcField extends Field {
  SessionMinTotalHemoglobinConcField({int size = 0, bool growable = true})
      : super(
            name: 'min_total_hemoglobin_conc',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 96;
}

class SessionMaxTotalHemoglobinConcField extends Field {
  SessionMaxTotalHemoglobinConcField({int size = 0, bool growable = true})
      : super(
            name: 'max_total_hemoglobin_conc',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'g/dL',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 97;
}

class SessionAvgSaturatedHemoglobinPercentField extends Field {
  SessionAvgSaturatedHemoglobinPercentField(
      {int size = 0, bool growable = true})
      : super(
            name: 'avg_saturated_hemoglobin_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 98;
}

class SessionMinSaturatedHemoglobinPercentField extends Field {
  SessionMinSaturatedHemoglobinPercentField(
      {int size = 0, bool growable = true})
      : super(
            name: 'min_saturated_hemoglobin_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 99;
}

class SessionMaxSaturatedHemoglobinPercentField extends Field {
  SessionMaxSaturatedHemoglobinPercentField(
      {int size = 0, bool growable = true})
      : super(
            name: 'max_saturated_hemoglobin_percent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 100;
}

class SessionAvgLeftTorqueEffectivenessField extends Field {
  SessionAvgLeftTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 101;
}

class SessionAvgRightTorqueEffectivenessField extends Field {
  SessionAvgRightTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 102;
}

class SessionAvgLeftPedalSmoothnessField extends Field {
  SessionAvgLeftPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 103;
}

class SessionAvgRightPedalSmoothnessField extends Field {
  SessionAvgRightPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 104;
}

class SessionAvgCombinedPedalSmoothnessField extends Field {
  SessionAvgCombinedPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_combined_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 105;
}

class SessionSportIndexField extends Field {
  SessionSportIndexField({int size = 0, bool growable = true})
      : super(
            name: 'sport_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 111;
}

class SessionTimeStandingField extends Field {
  SessionTimeStandingField({int size = 0, bool growable = true})
      : super(
            name: 'time_standing',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 112;
}

class SessionStandCountField extends Field {
  SessionStandCountField({int size = 0, bool growable = true})
      : super(
            name: 'stand_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 113;
}

class SessionAvgLeftPcoField extends Field {
  SessionAvgLeftPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 114;
}

class SessionAvgRightPcoField extends Field {
  SessionAvgRightPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 115;
}

class SessionAvgLeftPowerPhaseField extends Field {
  SessionAvgLeftPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 116;
}

class SessionAvgLeftPowerPhasePeakField extends Field {
  SessionAvgLeftPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 117;
}

class SessionAvgRightPowerPhaseField extends Field {
  SessionAvgRightPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 118;
}

class SessionAvgRightPowerPhasePeakField extends Field {
  SessionAvgRightPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 119;
}

class SessionAvgPowerPositionField extends Field {
  SessionAvgPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 120;
}

class SessionMaxPowerPositionField extends Field {
  SessionMaxPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 121;
}

class SessionAvgCadencePositionField extends Field {
  SessionAvgCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 122;
}

class SessionMaxCadencePositionField extends Field {
  SessionMaxCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 123;
}

class SessionEnhancedAvgSpeedField extends Field {
  SessionEnhancedAvgSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_avg_speed',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 124;
}

class SessionEnhancedMaxSpeedField extends Field {
  SessionEnhancedMaxSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_max_speed',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 125;
}

class SessionEnhancedAvgAltitudeField extends Field {
  SessionEnhancedAvgAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_avg_altitude',
            id: ID,
            type: BaseType.UINT32,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 126;
}

class SessionEnhancedMinAltitudeField extends Field {
  SessionEnhancedMinAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_min_altitude',
            id: ID,
            type: BaseType.UINT32,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 127;
}

class SessionEnhancedMaxAltitudeField extends Field {
  SessionEnhancedMaxAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'enhanced_max_altitude',
            id: ID,
            type: BaseType.UINT32,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 128;
}

class SessionAvgLevMotorPowerField extends Field {
  SessionAvgLevMotorPowerField({int size = 0, bool growable = true})
      : super(
            name: 'avg_lev_motor_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 129;
}

class SessionMaxLevMotorPowerField extends Field {
  SessionMaxLevMotorPowerField({int size = 0, bool growable = true})
      : super(
            name: 'max_lev_motor_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 130;
}

class SessionLevBatteryConsumptionField extends Field {
  SessionLevBatteryConsumptionField({int size = 0, bool growable = true})
      : super(
            name: 'lev_battery_consumption',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 131;
}

class SessionAvgVerticalRatioField extends Field {
  SessionAvgVerticalRatioField({int size = 0, bool growable = true})
      : super(
            name: 'avg_vertical_ratio',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 132;
}

class SessionAvgStanceTimeBalanceField extends Field {
  SessionAvgStanceTimeBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_stance_time_balance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 133;
}

class SessionAvgStepLengthField extends Field {
  SessionAvgStepLengthField({int size = 0, bool growable = true})
      : super(
            name: 'avg_step_length',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 134;
}

class SessionTotalAnaerobicTrainingEffectField extends Field {
  SessionTotalAnaerobicTrainingEffectField({int size = 0, bool growable = true})
      : super(
            name: 'total_anaerobic_training_effect',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 10,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 137;
}

class SessionAvgVamField extends Field {
  SessionAvgVamField({int size = 0, bool growable = true})
      : super(
            name: 'avg_vam',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 139;
}

class SessionTotalGritField extends Field {
  SessionTotalGritField({int size = 0, bool growable = true})
      : super(
            name: 'total_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 181;
}

class SessionTotalFlowField extends Field {
  SessionTotalFlowField({int size = 0, bool growable = true})
      : super(
            name: 'total_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 182;
}

class SessionJumpCountField extends Field {
  SessionJumpCountField({int size = 0, bool growable = true})
      : super(
            name: 'jump_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 183;
}

class SessionAvgGritField extends Field {
  SessionAvgGritField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 186;
}

class SessionAvgFlowField extends Field {
  SessionAvgFlowField({int size = 0, bool growable = true})
      : super(
            name: 'avg_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 187;
}

class SessionTotalFractionalAscentField extends Field {
  SessionTotalFractionalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_ascent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 199;
}

class SessionTotalFractionalDescentField extends Field {
  SessionTotalFractionalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_descent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 200;
}

class SessionAvgCoreTemperatureField extends Field {
  SessionAvgCoreTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'avg_core_temperature',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 208;
}

class SessionMinCoreTemperatureField extends Field {
  SessionMinCoreTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'min_core_temperature',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 209;
}

class SessionMaxCoreTemperatureField extends Field {
  SessionMaxCoreTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'max_core_temperature',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 210;
}
