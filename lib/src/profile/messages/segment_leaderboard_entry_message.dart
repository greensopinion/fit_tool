/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class SegmentLeaderboardEntryMessage extends DataMessage {
  SegmentLeaderboardEntryMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: SegmentLeaderboardEntryMessage.NAME,
            globalId: SegmentLeaderboardEntryMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLeaderboardEntryNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLeaderboardEntryNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLeaderboardEntryTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLeaderboardEntryTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLeaderboardEntryGroupPrimaryKeyField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLeaderboardEntryGroupPrimaryKeyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLeaderboardEntryActivityIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLeaderboardEntryActivityIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLeaderboardEntrySegmentTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLeaderboardEntrySegmentTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLeaderboardEntryActivityIdStringField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLeaderboardEntryActivityIdStringField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 149;
  static const NAME = 'segment_leaderboard_entry';

  final bool growable;

  /// Returns an instance of SegmentLeaderboardEntryMessage from a bytes list.
  static SegmentLeaderboardEntryMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        SegmentLeaderboardEntryMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the segmentLeaderboardEntryName field. Returns null if the field is not defined in the message.
  String? get segmentLeaderboardEntryName {
    final field = getField(SegmentLeaderboardEntryNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the segmentLeaderboardEntryName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set segmentLeaderboardEntryName(String? value) {
    final field = getField(SegmentLeaderboardEntryNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the type field. Returns null if the field is not defined in the message.
  SegmentLeaderboardType? get type {
    final field = getField(SegmentLeaderboardEntryTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SegmentLeaderboardTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the type field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set type(SegmentLeaderboardType? value) {
    final field = getField(SegmentLeaderboardEntryTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the groupPrimaryKey field. Returns null if the field is not defined in the message.
  int? get groupPrimaryKey {
    final field = getField(SegmentLeaderboardEntryGroupPrimaryKeyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the groupPrimaryKey field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set groupPrimaryKey(int? value) {
    final field = getField(SegmentLeaderboardEntryGroupPrimaryKeyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the activityId field. Returns null if the field is not defined in the message.
  int? get activityId {
    final field = getField(SegmentLeaderboardEntryActivityIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the activityId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activityId(int? value) {
    final field = getField(SegmentLeaderboardEntryActivityIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the segmentTime field. Returns null if the field is not defined in the message.
  double? get segmentTime {
    final field = getField(SegmentLeaderboardEntrySegmentTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the segmentTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set segmentTime(double? value) {
    final field = getField(SegmentLeaderboardEntrySegmentTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the activityIdString field. Returns null if the field is not defined in the message.
  String? get activityIdString {
    final field = getField(SegmentLeaderboardEntryActivityIdStringField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the activityIdString field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activityIdString(String? value) {
    final field = getField(SegmentLeaderboardEntryActivityIdStringField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class SegmentLeaderboardEntryNameField extends Field {
  SegmentLeaderboardEntryNameField({int size = 0, bool growable = true})
      : super(
            name: 'name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class SegmentLeaderboardEntryTypeField extends Field {
  SegmentLeaderboardEntryTypeField({int size = 0, bool growable = true})
      : super(
            name: 'type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class SegmentLeaderboardEntryGroupPrimaryKeyField extends Field {
  SegmentLeaderboardEntryGroupPrimaryKeyField(
      {int size = 0, bool growable = true})
      : super(
            name: 'group_primary_key',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class SegmentLeaderboardEntryActivityIdField extends Field {
  SegmentLeaderboardEntryActivityIdField({int size = 0, bool growable = true})
      : super(
            name: 'activity_id',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class SegmentLeaderboardEntrySegmentTimeField extends Field {
  SegmentLeaderboardEntrySegmentTimeField({int size = 0, bool growable = true})
      : super(
            name: 'segment_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: 'uint32',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class SegmentLeaderboardEntryActivityIdStringField extends Field {
  SegmentLeaderboardEntryActivityIdStringField(
      {int size = 0, bool growable = true})
      : super(
            name: 'activity_id_string',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}
