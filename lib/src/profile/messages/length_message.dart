/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class LengthMessage extends DataMessage {
  LengthMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: LengthMessage.NAME,
            globalId: LengthMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthEventField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthEventField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthEventTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthEventTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthStartTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthStartTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthTotalElapsedTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthTotalElapsedTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthTotalTimerTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthTotalTimerTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthTotalStrokesField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthTotalStrokesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthAvgSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthAvgSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthSwimStrokeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthSwimStrokeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthAvgSwimmingCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthAvgSwimmingCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthEventGroupField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthEventGroupField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthTotalCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthTotalCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthLengthTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthLengthTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthPlayerScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthPlayerScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthOpponentScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthOpponentScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthStrokeCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthStrokeCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              LengthZoneCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(LengthZoneCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 101;
  static const NAME = 'length';

  final bool growable;

  /// Returns an instance of LengthMessage from a bytes list.
  static LengthMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = LengthMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the event field. Returns null if the field is not defined in the message.
  Event? get event {
    final field = getField(LengthEventField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the event field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set event(Event? value) {
    final field = getField(LengthEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the eventType field. Returns null if the field is not defined in the message.
  EventType? get eventType {
    final field = getField(LengthEventTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the eventType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set eventType(EventType? value) {
    final field = getField(LengthEventTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get startTime {
    final field = getField(LengthStartTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set startTime(int? value) {
    final field = getField(LengthStartTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the totalElapsedTime field. Returns null if the field is not defined in the message.
  double? get totalElapsedTime {
    final field = getField(LengthTotalElapsedTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalElapsedTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalElapsedTime(double? value) {
    final field = getField(LengthTotalElapsedTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the totalTimerTime field. Returns null if the field is not defined in the message.
  double? get totalTimerTime {
    final field = getField(LengthTotalTimerTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalTimerTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalTimerTime(double? value) {
    final field = getField(LengthTotalTimerTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the totalStrokes field. Returns null if the field is not defined in the message.
  int? get totalStrokes {
    final field = getField(LengthTotalStrokesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalStrokes field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalStrokes(int? value) {
    final field = getField(LengthTotalStrokesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the avgSpeed field. Returns null if the field is not defined in the message.
  double? get avgSpeed {
    final field = getField(LengthAvgSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgSpeed(double? value) {
    final field = getField(LengthAvgSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the swimStroke field. Returns null if the field is not defined in the message.
  SwimStroke? get swimStroke {
    final field = getField(LengthSwimStrokeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SwimStrokeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the swimStroke field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set swimStroke(SwimStroke? value) {
    final field = getField(LengthSwimStrokeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the avgSwimmingCadence field. Returns null if the field is not defined in the message.
  int? get avgSwimmingCadence {
    final field = getField(LengthAvgSwimmingCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgSwimmingCadence field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgSwimmingCadence(int? value) {
    final field = getField(LengthAvgSwimmingCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the eventGroup field. Returns null if the field is not defined in the message.
  int? get eventGroup {
    final field = getField(LengthEventGroupField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the eventGroup field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set eventGroup(int? value) {
    final field = getField(LengthEventGroupField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the totalCalories field. Returns null if the field is not defined in the message.
  int? get totalCalories {
    final field = getField(LengthTotalCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalCalories field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalCalories(int? value) {
    final field = getField(LengthTotalCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the lengthType field. Returns null if the field is not defined in the message.
  LengthType? get lengthType {
    final field = getField(LengthLengthTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return LengthTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the lengthType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set lengthType(LengthType? value) {
    final field = getField(LengthLengthTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the playerScore field. Returns null if the field is not defined in the message.
  int? get playerScore {
    final field = getField(LengthPlayerScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the playerScore field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set playerScore(int? value) {
    final field = getField(LengthPlayerScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the opponentScore field. Returns null if the field is not defined in the message.
  int? get opponentScore {
    final field = getField(LengthOpponentScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the opponentScore field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set opponentScore(int? value) {
    final field = getField(LengthOpponentScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the strokeCount field. Returns null if the field is not defined in the message.
  int? get strokeCount {
    final field = getField(LengthStrokeCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the strokeCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set strokeCount(int? value) {
    final field = getField(LengthStrokeCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the zoneCount field. Returns null if the field is not defined in the message.
  int? get zoneCount {
    final field = getField(LengthZoneCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the zoneCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set zoneCount(int? value) {
    final field = getField(LengthZoneCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class LengthEventField extends Field {
  LengthEventField({int size = 0, bool growable = true})
      : super(
            name: 'event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class LengthEventTypeField extends Field {
  LengthEventTypeField({int size = 0, bool growable = true})
      : super(
            name: 'event_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class LengthStartTimeField extends Field {
  LengthStartTimeField({int size = 0, bool growable = true})
      : super(
            name: 'start_time',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class LengthTotalElapsedTimeField extends Field {
  LengthTotalElapsedTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_elapsed_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class LengthTotalTimerTimeField extends Field {
  LengthTotalTimerTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_timer_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class LengthTotalStrokesField extends Field {
  LengthTotalStrokesField({int size = 0, bool growable = true})
      : super(
            name: 'total_strokes',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'strokes',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class LengthAvgSpeedField extends Field {
  LengthAvgSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class LengthSwimStrokeField extends Field {
  LengthSwimStrokeField({int size = 0, bool growable = true})
      : super(
            name: 'swim_stroke',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            units: 'swim_stroke',
            mainTypeName: 'swim_stroke',
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class LengthAvgSwimmingCadenceField extends Field {
  LengthAvgSwimmingCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_swimming_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'strokes/min',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class LengthEventGroupField extends Field {
  LengthEventGroupField({int size = 0, bool growable = true})
      : super(
            name: 'event_group',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class LengthTotalCaloriesField extends Field {
  LengthTotalCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class LengthLengthTypeField extends Field {
  LengthLengthTypeField({int size = 0, bool growable = true})
      : super(
            name: 'length_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class LengthPlayerScoreField extends Field {
  LengthPlayerScoreField({int size = 0, bool growable = true})
      : super(
            name: 'player_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 18;
}

class LengthOpponentScoreField extends Field {
  LengthOpponentScoreField({int size = 0, bool growable = true})
      : super(
            name: 'opponent_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 19;
}

class LengthStrokeCountField extends Field {
  LengthStrokeCountField({int size = 0, bool growable = true})
      : super(
            name: 'stroke_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 20;
}

class LengthZoneCountField extends Field {
  LengthZoneCountField({int size = 0, bool growable = true})
      : super(
            name: 'zone_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 21;
}
