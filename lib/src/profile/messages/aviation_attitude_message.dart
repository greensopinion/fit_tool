/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class AviationAttitudeMessage extends DataMessage {
  AviationAttitudeMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: AviationAttitudeMessage.NAME,
            globalId: AviationAttitudeMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeTimestampMsField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AviationAttitudeTimestampMsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeSystemTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AviationAttitudeSystemTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudePitchField(
                  size: definitionMessage
                          ?.getFieldDefinition(AviationAttitudePitchField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeRollField(
                  size: definitionMessage
                          ?.getFieldDefinition(AviationAttitudeRollField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeAccelLateralField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AviationAttitudeAccelLateralField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeAccelNormalField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AviationAttitudeAccelNormalField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeTurnRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(AviationAttitudeTurnRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeStageField(
                  size: definitionMessage
                          ?.getFieldDefinition(AviationAttitudeStageField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeAttitudeStageCompleteField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              AviationAttitudeAttitudeStageCompleteField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeTrackField(
                  size: definitionMessage
                          ?.getFieldDefinition(AviationAttitudeTrackField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              AviationAttitudeValidityField(
                  size: definitionMessage
                          ?.getFieldDefinition(AviationAttitudeValidityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 178;
  static const NAME = 'aviation_attitude';

  final bool growable;

  /// Returns an instance of AviationAttitudeMessage from a bytes list.
  static AviationAttitudeMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        AviationAttitudeMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the timestampMs field. Returns null if the field is not defined in the message.
  int? get timestampMs {
    final field = getField(AviationAttitudeTimestampMsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestampMs field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestampMs(int? value) {
    final field = getField(AviationAttitudeTimestampMsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the systemTime field. Returns null if the field is not defined in the message.
  int? get systemTime {
    final field = getField(AviationAttitudeSystemTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the systemTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set systemTime(int? value) {
    final field = getField(AviationAttitudeSystemTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the pitch field. Returns null if the field is not defined in the message.
  double? get pitch {
    final field = getField(AviationAttitudePitchField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the pitch field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set pitch(double? value) {
    final field = getField(AviationAttitudePitchField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the roll field. Returns null if the field is not defined in the message.
  double? get roll {
    final field = getField(AviationAttitudeRollField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the roll field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set roll(double? value) {
    final field = getField(AviationAttitudeRollField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the accelLateral field. Returns null if the field is not defined in the message.
  double? get accelLateral {
    final field = getField(AviationAttitudeAccelLateralField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the accelLateral field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set accelLateral(double? value) {
    final field = getField(AviationAttitudeAccelLateralField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the accelNormal field. Returns null if the field is not defined in the message.
  double? get accelNormal {
    final field = getField(AviationAttitudeAccelNormalField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the accelNormal field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set accelNormal(double? value) {
    final field = getField(AviationAttitudeAccelNormalField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the turnRate field. Returns null if the field is not defined in the message.
  double? get turnRate {
    final field = getField(AviationAttitudeTurnRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the turnRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set turnRate(double? value) {
    final field = getField(AviationAttitudeTurnRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the stage field. Returns null if the field is not defined in the message.
  AttitudeStage? get stage {
    final field = getField(AviationAttitudeStageField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return AttitudeStageExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the stage field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set stage(AttitudeStage? value) {
    final field = getField(AviationAttitudeStageField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the attitudeStageComplete field. Returns null if the field is not defined in the message.
  int? get attitudeStageComplete {
    final field = getField(AviationAttitudeAttitudeStageCompleteField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the attitudeStageComplete field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set attitudeStageComplete(int? value) {
    final field = getField(AviationAttitudeAttitudeStageCompleteField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the track field. Returns null if the field is not defined in the message.
  double? get track {
    final field = getField(AviationAttitudeTrackField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the track field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set track(double? value) {
    final field = getField(AviationAttitudeTrackField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the validity field. Returns null if the field is not defined in the message.
  int? get validity {
    final field = getField(AviationAttitudeValidityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the validity field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set validity(int? value) {
    final field = getField(AviationAttitudeValidityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class AviationAttitudeTimestampMsField extends Field {
  AviationAttitudeTimestampMsField({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_ms',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class AviationAttitudeSystemTimeField extends Field {
  AviationAttitudeSystemTimeField({int size = 0, bool growable = true})
      : super(
            name: 'system_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class AviationAttitudePitchField extends Field {
  AviationAttitudePitchField({int size = 0, bool growable = true})
      : super(
            name: 'pitch',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 10430.38,
            size: size,
            units: 'radians',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class AviationAttitudeRollField extends Field {
  AviationAttitudeRollField({int size = 0, bool growable = true})
      : super(
            name: 'roll',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 10430.38,
            size: size,
            units: 'radians',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class AviationAttitudeAccelLateralField extends Field {
  AviationAttitudeAccelLateralField({int size = 0, bool growable = true})
      : super(
            name: 'accel_lateral',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm/s^2',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class AviationAttitudeAccelNormalField extends Field {
  AviationAttitudeAccelNormalField({int size = 0, bool growable = true})
      : super(
            name: 'accel_normal',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm/s^2',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class AviationAttitudeTurnRateField extends Field {
  AviationAttitudeTurnRateField({int size = 0, bool growable = true})
      : super(
            name: 'turn_rate',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1024,
            size: size,
            units: 'radians/second',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class AviationAttitudeStageField extends Field {
  AviationAttitudeStageField({int size = 0, bool growable = true})
      : super(
            name: 'stage',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class AviationAttitudeAttitudeStageCompleteField extends Field {
  AviationAttitudeAttitudeStageCompleteField(
      {int size = 0, bool growable = true})
      : super(
            name: 'attitude_stage_complete',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class AviationAttitudeTrackField extends Field {
  AviationAttitudeTrackField({int size = 0, bool growable = true})
      : super(
            name: 'track',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10430.38,
            size: size,
            units: 'radians',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class AviationAttitudeValidityField extends Field {
  AviationAttitudeValidityField({int size = 0, bool growable = true})
      : super(
            name: 'validity',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 10;
}
