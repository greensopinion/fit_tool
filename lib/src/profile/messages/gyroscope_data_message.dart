/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class GyroscopeDataMessage extends DataMessage {
  GyroscopeDataMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: GyroscopeDataMessage.NAME,
            globalId: GyroscopeDataMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataTimestampMsField(
                  size: definitionMessage
                          ?.getFieldDefinition(GyroscopeDataTimestampMsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataSampleTimeOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              GyroscopeDataSampleTimeOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataGyroXField(
                  size: definitionMessage
                          ?.getFieldDefinition(GyroscopeDataGyroXField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataGyroYField(
                  size: definitionMessage
                          ?.getFieldDefinition(GyroscopeDataGyroYField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataGyroZField(
                  size: definitionMessage
                          ?.getFieldDefinition(GyroscopeDataGyroZField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataCalibratedGyroXField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              GyroscopeDataCalibratedGyroXField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataCalibratedGyroYField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              GyroscopeDataCalibratedGyroYField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              GyroscopeDataCalibratedGyroZField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              GyroscopeDataCalibratedGyroZField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 164;
  static const NAME = 'gyroscope_data';

  final bool growable;

  /// Returns an instance of GyroscopeDataMessage from a bytes list.
  static GyroscopeDataMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = GyroscopeDataMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timestampMs field. Returns null if the field is not defined in the message.
  int? get timestampMs {
    final field = getField(GyroscopeDataTimestampMsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestampMs field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestampMs(int? value) {
    final field = getField(GyroscopeDataTimestampMsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the sampleTimeOffset field. Returns null if the field is not defined in the message.
  List<int>? get sampleTimeOffset {
    final field = getField(GyroscopeDataSampleTimeOffsetField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the sampleTimeOffset field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sampleTimeOffset(List<int>? value) {
    final field = getField(GyroscopeDataSampleTimeOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the gyroX field. Returns null if the field is not defined in the message.
  List<int>? get gyroX {
    final field = getField(GyroscopeDataGyroXField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the gyroX field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set gyroX(List<int>? value) {
    final field = getField(GyroscopeDataGyroXField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the gyroY field. Returns null if the field is not defined in the message.
  List<int>? get gyroY {
    final field = getField(GyroscopeDataGyroYField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the gyroY field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set gyroY(List<int>? value) {
    final field = getField(GyroscopeDataGyroYField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the gyroZ field. Returns null if the field is not defined in the message.
  List<int>? get gyroZ {
    final field = getField(GyroscopeDataGyroZField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the gyroZ field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set gyroZ(List<int>? value) {
    final field = getField(GyroscopeDataGyroZField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the calibratedGyroX field. Returns null if the field is not defined in the message.
  List<int>? get calibratedGyroX {
    final field = getField(GyroscopeDataCalibratedGyroXField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the calibratedGyroX field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set calibratedGyroX(List<int>? value) {
    final field = getField(GyroscopeDataCalibratedGyroXField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the calibratedGyroY field. Returns null if the field is not defined in the message.
  List<int>? get calibratedGyroY {
    final field = getField(GyroscopeDataCalibratedGyroYField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the calibratedGyroY field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set calibratedGyroY(List<int>? value) {
    final field = getField(GyroscopeDataCalibratedGyroYField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the calibratedGyroZ field. Returns null if the field is not defined in the message.
  List<int>? get calibratedGyroZ {
    final field = getField(GyroscopeDataCalibratedGyroZField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the calibratedGyroZ field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set calibratedGyroZ(List<int>? value) {
    final field = getField(GyroscopeDataCalibratedGyroZField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class GyroscopeDataTimestampMsField extends Field {
  GyroscopeDataTimestampMsField({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_ms',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class GyroscopeDataSampleTimeOffsetField extends Field {
  GyroscopeDataSampleTimeOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'sample_time_offset',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class GyroscopeDataGyroXField extends Field {
  GyroscopeDataGyroXField({int size = 0, bool growable = true})
      : super(
            name: 'gyro_x',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class GyroscopeDataGyroYField extends Field {
  GyroscopeDataGyroYField({int size = 0, bool growable = true})
      : super(
            name: 'gyro_y',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class GyroscopeDataGyroZField extends Field {
  GyroscopeDataGyroZField({int size = 0, bool growable = true})
      : super(
            name: 'gyro_z',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class GyroscopeDataCalibratedGyroXField extends Field {
  GyroscopeDataCalibratedGyroXField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_gyro_x',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'deg/s',
            mainTypeName: 'float32',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class GyroscopeDataCalibratedGyroYField extends Field {
  GyroscopeDataCalibratedGyroYField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_gyro_y',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'deg/s',
            mainTypeName: 'float32',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class GyroscopeDataCalibratedGyroZField extends Field {
  GyroscopeDataCalibratedGyroZField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_gyro_z',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'deg/s',
            mainTypeName: 'float32',
            growable: growable,
            subFields: []);

  static const ID = 7;
}
