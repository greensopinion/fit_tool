/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class EventMessage extends DataMessage {
  EventMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: EventMessage.NAME,
            globalId: EventMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventEventField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventEventField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventEventTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventEventTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventData16Field(
                  size: definitionMessage
                          ?.getFieldDefinition(EventData16Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventDataField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventDataField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventEventGroupField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventEventGroupField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventOpponentScoreField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventOpponentScoreField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventFrontGearNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventFrontGearNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventFrontGearField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventFrontGearField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventRearGearNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventRearGearNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventRearGearField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventRearGearField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventDeviceIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventDeviceIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventRadarThreatLevelMaxField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventRadarThreatLevelMaxField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              EventRadarThreatCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(EventRadarThreatCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 21;
  static const NAME = 'event';

  final bool growable;

  /// Returns an instance of EventMessage from a bytes list.
  static EventMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = EventMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the event field. Returns null if the field is not defined in the message.
  Event? get event {
    final field = getField(EventEventField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the event field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set event(Event? value) {
    final field = getField(EventEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the eventType field. Returns null if the field is not defined in the message.
  EventType? get eventType {
    final field = getField(EventEventTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the eventType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set eventType(EventType? value) {
    final field = getField(EventEventTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the data16 field. Returns null if the field is not defined in the message.
  int? get data16 {
    final field = getField(EventData16Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data16 field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set data16(int? value) {
    final field = getField(EventData16Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the data field. Returns null if the field is not defined in the message.
  int? get data {
    final field = getField(EventDataField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set data(int? value) {
    final field = getField(EventDataField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield timerTrigger
  TimerTrigger? get timerTrigger {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [0].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set timerTrigger(TimerTrigger? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield coursePointIndex
  int? get coursePointIndex {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [10].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set coursePointIndex(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield batteryLevel
  double? get batteryLevel {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [11].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set batteryLevel(double? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield virtualPartnerSpeed
  double? get virtualPartnerSpeed {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [12].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set virtualPartnerSpeed(double? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield hrHighAlert
  int? get hrHighAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [13].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set hrHighAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield hrLowAlert
  int? get hrLowAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [14].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set hrLowAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield speedHighAlert
  double? get speedHighAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [15].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set speedHighAlert(double? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield speedLowAlert
  double? get speedLowAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [16].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set speedLowAlert(double? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield cadHighAlert
  int? get cadHighAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [17].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set cadHighAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield cadLowAlert
  int? get cadLowAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [18].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set cadLowAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield powerHighAlert
  int? get powerHighAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [19].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set powerHighAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield powerLowAlert
  int? get powerLowAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [20].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set powerLowAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield timeDurationAlert
  double? get timeDurationAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [23].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set timeDurationAlert(double? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield distanceDurationAlert
  double? get distanceDurationAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [24].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set distanceDurationAlert(double? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield calorieDurationAlert
  int? get calorieDurationAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [25].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set calorieDurationAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield fitnessEquipmentState
  FitnessEquipmentState? get fitnessEquipmentState {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [27].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set fitnessEquipmentState(FitnessEquipmentState? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield sportPoint
  int? get sportPoint {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [33].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set sportPoint(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield gearChangeData
  int? get gearChangeData {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [42, 43].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set gearChangeData(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield riderPosition
  RiderPositionType? get riderPosition {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [44].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set riderPosition(RiderPositionType? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield commTimeout
  int? get commTimeout {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [47].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set commTimeout(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield radarThreatAlert
  int? get radarThreatAlert {
    final field = getField(EventDataField.ID);
    final typeField = getField(EventEventField.ID);

    final isSubFieldValid =
        typeField != null && [75].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the data subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set radarThreatAlert(int? value) {
    final field = getField(EventDataField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the eventGroup field. Returns null if the field is not defined in the message.
  int? get eventGroup {
    final field = getField(EventEventGroupField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the eventGroup field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set eventGroup(int? value) {
    final field = getField(EventEventGroupField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the score field. Returns null if the field is not defined in the message.
  int? get score {
    final field = getField(EventScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the score field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set score(int? value) {
    final field = getField(EventScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the opponentScore field. Returns null if the field is not defined in the message.
  int? get opponentScore {
    final field = getField(EventOpponentScoreField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the opponentScore field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set opponentScore(int? value) {
    final field = getField(EventOpponentScoreField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the frontGearNum field. Returns null if the field is not defined in the message.
  int? get frontGearNum {
    final field = getField(EventFrontGearNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the frontGearNum field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set frontGearNum(int? value) {
    final field = getField(EventFrontGearNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the frontGear field. Returns null if the field is not defined in the message.
  int? get frontGear {
    final field = getField(EventFrontGearField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the frontGear field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set frontGear(int? value) {
    final field = getField(EventFrontGearField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rearGearNum field. Returns null if the field is not defined in the message.
  int? get rearGearNum {
    final field = getField(EventRearGearNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the rearGearNum field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rearGearNum(int? value) {
    final field = getField(EventRearGearNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rearGear field. Returns null if the field is not defined in the message.
  int? get rearGear {
    final field = getField(EventRearGearField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the rearGear field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rearGear(int? value) {
    final field = getField(EventRearGearField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the deviceIndex field. Returns null if the field is not defined in the message.
  int? get deviceIndex {
    final field = getField(EventDeviceIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set deviceIndex(int? value) {
    final field = getField(EventDeviceIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the radarThreatLevelMax field. Returns null if the field is not defined in the message.
  RadarThreatLevelType? get radarThreatLevelMax {
    final field = getField(EventRadarThreatLevelMaxField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return RadarThreatLevelTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the radarThreatLevelMax field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set radarThreatLevelMax(RadarThreatLevelType? value) {
    final field = getField(EventRadarThreatLevelMaxField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the radarThreatCount field. Returns null if the field is not defined in the message.
  int? get radarThreatCount {
    final field = getField(EventRadarThreatCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the radarThreatCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set radarThreatCount(int? value) {
    final field = getField(EventRadarThreatCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class EventEventField extends Field {
  EventEventField({int size = 0, bool growable = true})
      : super(
            name: 'event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class EventEventTypeField extends Field {
  EventEventTypeField({int size = 0, bool growable = true})
      : super(
            name: 'event_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class EventData16Field extends Field {
  EventData16Field({int size = 0, bool growable = true})
      : super(
            name: 'data16',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class EventDataField extends Field {
  EventDataField({int size = 0, bool growable = true})
      : super(
            name: 'data',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'timer_trigger',
                  type: BaseType.ENUM,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [0]
                  }),
              SubField(
                  name: 'course_point_index',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [10]
                  }),
              SubField(
                  name: 'battery_level',
                  type: BaseType.UINT16,
                  scale: 1000,
                  offset: 0,
                  units: 'V',
                  referenceMap: {
                    EventEventField.ID: [11]
                  }),
              SubField(
                  name: 'virtual_partner_speed',
                  type: BaseType.UINT16,
                  scale: 1000,
                  offset: 0,
                  units: 'm/s',
                  referenceMap: {
                    EventEventField.ID: [12]
                  }),
              SubField(
                  name: 'hr_high_alert',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  units: 'bpm',
                  referenceMap: {
                    EventEventField.ID: [13]
                  }),
              SubField(
                  name: 'hr_low_alert',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  units: 'bpm',
                  referenceMap: {
                    EventEventField.ID: [14]
                  }),
              SubField(
                  name: 'speed_high_alert',
                  type: BaseType.UINT32,
                  scale: 1000,
                  offset: 0,
                  units: 'm/s',
                  referenceMap: {
                    EventEventField.ID: [15]
                  }),
              SubField(
                  name: 'speed_low_alert',
                  type: BaseType.UINT32,
                  scale: 1000,
                  offset: 0,
                  units: 'm/s',
                  referenceMap: {
                    EventEventField.ID: [16]
                  }),
              SubField(
                  name: 'cad_high_alert',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  units: 'rpm',
                  referenceMap: {
                    EventEventField.ID: [17]
                  }),
              SubField(
                  name: 'cad_low_alert',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  units: 'rpm',
                  referenceMap: {
                    EventEventField.ID: [18]
                  }),
              SubField(
                  name: 'power_high_alert',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  units: 'watts',
                  referenceMap: {
                    EventEventField.ID: [19]
                  }),
              SubField(
                  name: 'power_low_alert',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  units: 'watts',
                  referenceMap: {
                    EventEventField.ID: [20]
                  }),
              SubField(
                  name: 'time_duration_alert',
                  type: BaseType.UINT32,
                  scale: 1000,
                  offset: 0,
                  units: 's',
                  referenceMap: {
                    EventEventField.ID: [23]
                  }),
              SubField(
                  name: 'distance_duration_alert',
                  type: BaseType.UINT32,
                  scale: 100,
                  offset: 0,
                  units: 'm',
                  referenceMap: {
                    EventEventField.ID: [24]
                  }),
              SubField(
                  name: 'calorie_duration_alert',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'calories',
                  referenceMap: {
                    EventEventField.ID: [25]
                  }),
              SubField(
                  name: 'fitness_equipment_state',
                  type: BaseType.ENUM,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [27]
                  }),
              SubField(
                  name: 'sport_point',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [33]
                  }),
              SubField(
                  name: 'gear_change_data',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [42, 43]
                  }),
              SubField(
                  name: 'rider_position',
                  type: BaseType.ENUM,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [44]
                  }),
              SubField(
                  name: 'comm_timeout',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [47]
                  }),
              SubField(
                  name: 'radar_threat_alert',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    EventEventField.ID: [75]
                  })
            ]);

  static const ID = 3;
}

class EventEventGroupField extends Field {
  EventEventGroupField({int size = 0, bool growable = true})
      : super(
            name: 'event_group',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class EventScoreField extends Field {
  EventScoreField({int size = 0, bool growable = true})
      : super(
            name: 'score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class EventOpponentScoreField extends Field {
  EventOpponentScoreField({int size = 0, bool growable = true})
      : super(
            name: 'opponent_score',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class EventFrontGearNumField extends Field {
  EventFrontGearNumField({int size = 0, bool growable = true})
      : super(
            name: 'front_gear_num',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class EventFrontGearField extends Field {
  EventFrontGearField({int size = 0, bool growable = true})
      : super(
            name: 'front_gear',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class EventRearGearNumField extends Field {
  EventRearGearNumField({int size = 0, bool growable = true})
      : super(
            name: 'rear_gear_num',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class EventRearGearField extends Field {
  EventRearGearField({int size = 0, bool growable = true})
      : super(
            name: 'rear_gear',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class EventDeviceIndexField extends Field {
  EventDeviceIndexField({int size = 0, bool growable = true})
      : super(
            name: 'device_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class EventRadarThreatLevelMaxField extends Field {
  EventRadarThreatLevelMaxField({int size = 0, bool growable = true})
      : super(
            name: 'radar_threat_level_max',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 21;
}

class EventRadarThreatCountField extends Field {
  EventRadarThreatCountField({int size = 0, bool growable = true})
      : super(
            name: 'radar_threat_count',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 22;
}
