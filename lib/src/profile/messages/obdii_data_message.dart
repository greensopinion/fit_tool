/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class ObdiiDataMessage extends DataMessage {
  ObdiiDataMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: ObdiiDataMessage.NAME,
            globalId: ObdiiDataMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataTimestampMsField(
                  size: definitionMessage
                          ?.getFieldDefinition(ObdiiDataTimestampMsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataTimeOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(ObdiiDataTimeOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataPidField(
                  size: definitionMessage
                          ?.getFieldDefinition(ObdiiDataPidField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataRawDataField(
                  size: definitionMessage
                          ?.getFieldDefinition(ObdiiDataRawDataField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataPidDataSizeField(
                  size: definitionMessage
                          ?.getFieldDefinition(ObdiiDataPidDataSizeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataSystemTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(ObdiiDataSystemTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataStartTimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(ObdiiDataStartTimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ObdiiDataStartTimestampMsField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ObdiiDataStartTimestampMsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 174;
  static const NAME = 'obdii_data';

  final bool growable;

  static ObdiiDataMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = ObdiiDataMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get timestampMs {
    final field = getField(ObdiiDataTimestampMsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timestampMs(int? value) {
    final field = getField(ObdiiDataTimestampMsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get timeOffset {
    final field = getField(ObdiiDataTimeOffsetField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timeOffset(int? value) {
    final field = getField(ObdiiDataTimeOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get pid {
    final field = getField(ObdiiDataPidField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set pid(int? value) {
    final field = getField(ObdiiDataPidField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get rawData {
    final field = getField(ObdiiDataRawDataField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set rawData(int? value) {
    final field = getField(ObdiiDataRawDataField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get pidDataSize {
    final field = getField(ObdiiDataPidDataSizeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set pidDataSize(int? value) {
    final field = getField(ObdiiDataPidDataSizeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get systemTime {
    final field = getField(ObdiiDataSystemTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set systemTime(int? value) {
    final field = getField(ObdiiDataSystemTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get startTimestamp {
    final field = getField(ObdiiDataStartTimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set startTimestamp(int? value) {
    final field = getField(ObdiiDataStartTimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get startTimestampMs {
    final field = getField(ObdiiDataStartTimestampMsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set startTimestampMs(int? value) {
    final field = getField(ObdiiDataStartTimestampMsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
}

class ObdiiDataTimestampMsField extends Field {
  ObdiiDataTimestampMsField({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_ms',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class ObdiiDataTimeOffsetField extends Field {
  ObdiiDataTimeOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'time_offset',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class ObdiiDataPidField extends Field {
  ObdiiDataPidField({int size = 0, bool growable = true})
      : super(
            name: 'pid',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class ObdiiDataRawDataField extends Field {
  ObdiiDataRawDataField({int size = 0, bool growable = true})
      : super(
            name: 'raw_data',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class ObdiiDataPidDataSizeField extends Field {
  ObdiiDataPidDataSizeField({int size = 0, bool growable = true})
      : super(
            name: 'pid_data_size',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class ObdiiDataSystemTimeField extends Field {
  ObdiiDataSystemTimeField({int size = 0, bool growable = true})
      : super(
            name: 'system_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class ObdiiDataStartTimestampField extends Field {
  ObdiiDataStartTimestampField({int size = 0, bool growable = true})
      : super(
            name: 'start_timestamp',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class ObdiiDataStartTimestampMsField extends Field {
  ObdiiDataStartTimestampMsField({int size = 0, bool growable = true})
      : super(
            name: 'start_timestamp_ms',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 7;
}
