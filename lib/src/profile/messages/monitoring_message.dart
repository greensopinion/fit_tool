/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class MonitoringMessage extends DataMessage {
  MonitoringMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: MonitoringMessage.NAME,
            globalId: MonitoringMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringDeviceIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringDeviceIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringActiveTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringActiveTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringActivityTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringActivityTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringActivitySubtypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringActivitySubtypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringActivityLevelField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringActivityLevelField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringDistance16Field(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringDistance16Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringCycles16Field(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringCycles16Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringActiveTime16Field(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringActiveTime16Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringLocalTimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringLocalTimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringTemperatureMinField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringTemperatureMinField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringTemperatureMaxField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringTemperatureMaxField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringActivityTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringActivityTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringActiveCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringActiveCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringCurrentActivityTypeIntensityField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringCurrentActivityTypeIntensityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringTimestampMin8Field(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringTimestampMin8Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringTimestamp16Field(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringTimestamp16Field.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringIntensityField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringIntensityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringDurationMinField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringDurationMinField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringDurationField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringDurationField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringAscentField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringAscentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringDescentField(
                  size: definitionMessage
                          ?.getFieldDefinition(MonitoringDescentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringModerateActivityMinutesField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringModerateActivityMinutesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MonitoringVigorousActivityMinutesField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MonitoringVigorousActivityMinutesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 55;
  static const NAME = 'monitoring';

  final bool growable;

  static MonitoringMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = MonitoringMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get deviceIndex {
    final field = getField(MonitoringDeviceIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set deviceIndex(int? value) {
    final field = getField(MonitoringDeviceIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get calories {
    final field = getField(MonitoringCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set calories(int? value) {
    final field = getField(MonitoringCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get distance {
    final field = getField(MonitoringDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set distance(double? value) {
    final field = getField(MonitoringDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get cycles {
    final field = getField(MonitoringCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set cycles(double? value) {
    final field = getField(MonitoringCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get steps {
    final field = getField(MonitoringCyclesField.ID);
    final typeField = getField(MonitoringActivityTypeField.ID);

    final isSubFieldValid =
        typeField != null && [6, 1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set steps(int? value) {
    final field = getField(MonitoringCyclesField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get strokes {
    final field = getField(MonitoringCyclesField.ID);
    final typeField = getField(MonitoringActivityTypeField.ID);

    final isSubFieldValid =
        typeField != null && [2, 5].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set strokes(double? value) {
    final field = getField(MonitoringCyclesField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get activeTime {
    final field = getField(MonitoringActiveTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set activeTime(double? value) {
    final field = getField(MonitoringActiveTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  ActivityType? get activityType {
    final field = getField(MonitoringActivityTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ActivityTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set activityType(ActivityType? value) {
    final field = getField(MonitoringActivityTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  ActivitySubtype? get activitySubtype {
    final field = getField(MonitoringActivitySubtypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ActivitySubtypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set activitySubtype(ActivitySubtype? value) {
    final field = getField(MonitoringActivitySubtypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  ActivityLevel? get activityLevel {
    final field = getField(MonitoringActivityLevelField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ActivityLevelExt.fromValue(value);
    } else {
      return null;
    }
  }

  set activityLevel(ActivityLevel? value) {
    final field = getField(MonitoringActivityLevelField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  int? get distance16 {
    final field = getField(MonitoringDistance16Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set distance16(int? value) {
    final field = getField(MonitoringDistance16Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get cycles16 {
    final field = getField(MonitoringCycles16Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set cycles16(int? value) {
    final field = getField(MonitoringCycles16Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get activeTime16 {
    final field = getField(MonitoringActiveTime16Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set activeTime16(int? value) {
    final field = getField(MonitoringActiveTime16Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get localTimestamp {
    final field = getField(MonitoringLocalTimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set localTimestamp(int? value) {
    final field = getField(MonitoringLocalTimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get temperature {
    final field = getField(MonitoringTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set temperature(double? value) {
    final field = getField(MonitoringTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get temperatureMin {
    final field = getField(MonitoringTemperatureMinField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set temperatureMin(double? value) {
    final field = getField(MonitoringTemperatureMinField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get temperatureMax {
    final field = getField(MonitoringTemperatureMaxField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set temperatureMax(double? value) {
    final field = getField(MonitoringTemperatureMaxField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get activityTime {
    final field = getField(MonitoringActivityTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set activityTime(int? value) {
    final field = getField(MonitoringActivityTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get activeCalories {
    final field = getField(MonitoringActiveCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set activeCalories(int? value) {
    final field = getField(MonitoringActiveCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get currentActivityTypeIntensity {
    final field = getField(MonitoringCurrentActivityTypeIntensityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set currentActivityTypeIntensity(int? value) {
    final field = getField(MonitoringCurrentActivityTypeIntensityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get timestampMin8 {
    final field = getField(MonitoringTimestampMin8Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timestampMin8(int? value) {
    final field = getField(MonitoringTimestampMin8Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get timestamp16 {
    final field = getField(MonitoringTimestamp16Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timestamp16(int? value) {
    final field = getField(MonitoringTimestamp16Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get heartRate {
    final field = getField(MonitoringHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set heartRate(int? value) {
    final field = getField(MonitoringHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get intensity {
    final field = getField(MonitoringIntensityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set intensity(double? value) {
    final field = getField(MonitoringIntensityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get durationMin {
    final field = getField(MonitoringDurationMinField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set durationMin(int? value) {
    final field = getField(MonitoringDurationMinField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get duration {
    final field = getField(MonitoringDurationField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set duration(int? value) {
    final field = getField(MonitoringDurationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get ascent {
    final field = getField(MonitoringAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set ascent(double? value) {
    final field = getField(MonitoringAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get descent {
    final field = getField(MonitoringDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set descent(double? value) {
    final field = getField(MonitoringDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get moderateActivityMinutes {
    final field = getField(MonitoringModerateActivityMinutesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set moderateActivityMinutes(int? value) {
    final field = getField(MonitoringModerateActivityMinutesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get vigorousActivityMinutes {
    final field = getField(MonitoringVigorousActivityMinutesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set vigorousActivityMinutes(int? value) {
    final field = getField(MonitoringVigorousActivityMinutesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
}

class MonitoringDeviceIndexField extends Field {
  MonitoringDeviceIndexField({int size = 0, bool growable = true})
      : super(
            name: 'device_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class MonitoringCaloriesField extends Field {
  MonitoringCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class MonitoringDistanceField extends Field {
  MonitoringDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'distance',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class MonitoringCyclesField extends Field {
  MonitoringCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'cycles',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 2,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'steps',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'steps',
                  referenceMap: {
                    MonitoringActivityTypeField.ID: [6, 1]
                  }),
              SubField(
                  name: 'strokes',
                  type: BaseType.UINT32,
                  scale: 2,
                  offset: 0,
                  units: 'strokes',
                  referenceMap: {
                    MonitoringActivityTypeField.ID: [2, 5]
                  })
            ]);

  static const ID = 3;
}

class MonitoringActiveTimeField extends Field {
  MonitoringActiveTimeField({int size = 0, bool growable = true})
      : super(
            name: 'active_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class MonitoringActivityTypeField extends Field {
  MonitoringActivityTypeField({int size = 0, bool growable = true})
      : super(
            name: 'activity_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class MonitoringActivitySubtypeField extends Field {
  MonitoringActivitySubtypeField({int size = 0, bool growable = true})
      : super(
            name: 'activity_subtype',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class MonitoringActivityLevelField extends Field {
  MonitoringActivityLevelField({int size = 0, bool growable = true})
      : super(
            name: 'activity_level',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class MonitoringDistance16Field extends Field {
  MonitoringDistance16Field({int size = 0, bool growable = true})
      : super(
            name: 'distance_16',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: '100 * m',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class MonitoringCycles16Field extends Field {
  MonitoringCycles16Field({int size = 0, bool growable = true})
      : super(
            name: 'cycles_16',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: '2 * cycles (steps)',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class MonitoringActiveTime16Field extends Field {
  MonitoringActiveTime16Field({int size = 0, bool growable = true})
      : super(
            name: 'active_time_16',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class MonitoringLocalTimestampField extends Field {
  MonitoringLocalTimestampField({int size = 0, bool growable = true})
      : super(
            name: 'local_timestamp',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class MonitoringTemperatureField extends Field {
  MonitoringTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'temperature',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class MonitoringTemperatureMinField extends Field {
  MonitoringTemperatureMinField({int size = 0, bool growable = true})
      : super(
            name: 'temperature_min',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 14;
}

class MonitoringTemperatureMaxField extends Field {
  MonitoringTemperatureMaxField({int size = 0, bool growable = true})
      : super(
            name: 'temperature_max',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 15;
}

class MonitoringActivityTimeField extends Field {
  MonitoringActivityTimeField({int size = 0, bool growable = true})
      : super(
            name: 'activity_time',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'minutes',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 16;
}

class MonitoringActiveCaloriesField extends Field {
  MonitoringActiveCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'active_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 19;
}

class MonitoringCurrentActivityTypeIntensityField extends Field {
  MonitoringCurrentActivityTypeIntensityField(
      {int size = 0, bool growable = true})
      : super(
            name: 'current_activity_type_intensity',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 24;
}

class MonitoringTimestampMin8Field extends Field {
  MonitoringTimestampMin8Field({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_min_8',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'min',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 25;
}

class MonitoringTimestamp16Field extends Field {
  MonitoringTimestamp16Field({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_16',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 26;
}

class MonitoringHeartRateField extends Field {
  MonitoringHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 27;
}

class MonitoringIntensityField extends Field {
  MonitoringIntensityField({int size = 0, bool growable = true})
      : super(
            name: 'intensity',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 10,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 28;
}

class MonitoringDurationMinField extends Field {
  MonitoringDurationMinField({int size = 0, bool growable = true})
      : super(
            name: 'duration_min',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'min',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 29;
}

class MonitoringDurationField extends Field {
  MonitoringDurationField({int size = 0, bool growable = true})
      : super(
            name: 'duration',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 30;
}

class MonitoringAscentField extends Field {
  MonitoringAscentField({int size = 0, bool growable = true})
      : super(
            name: 'ascent',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 31;
}

class MonitoringDescentField extends Field {
  MonitoringDescentField({int size = 0, bool growable = true})
      : super(
            name: 'descent',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 32;
}

class MonitoringModerateActivityMinutesField extends Field {
  MonitoringModerateActivityMinutesField({int size = 0, bool growable = true})
      : super(
            name: 'moderate_activity_minutes',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'minutes',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 33;
}

class MonitoringVigorousActivityMinutesField extends Field {
  MonitoringVigorousActivityMinutesField({int size = 0, bool growable = true})
      : super(
            name: 'vigorous_activity_minutes',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'minutes',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 34;
}
