/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class HrMessage extends DataMessage {

   HrMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: HrMessage.NAME,
            globalId: HrMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage?.getFieldDefinition(TimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              HrFractionalTimestampField(
                  size: definitionMessage?.getFieldDefinition(HrFractionalTimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              HrTime256Field(
                  size: definitionMessage?.getFieldDefinition(HrTime256Field.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              HrFilteredBpmField(
                  size: definitionMessage?.getFieldDefinition(HrFilteredBpmField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              HrEventTimestampField(
                  size: definitionMessage?.getFieldDefinition(HrEventTimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              HrEventTimestamp12Field(
                  size: definitionMessage?.getFieldDefinition(HrEventTimestamp12Field.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 132;
  static const NAME = 'hr';

  final bool growable;

  static HrMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = HrMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
     final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
   set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get fractionalTimestamp {
     final field = getField(HrFractionalTimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set fractionalTimestamp(double? value) {
    final field = getField(HrFractionalTimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get time256 {
     final field = getField(HrTime256Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set time256(double? value) {
    final field = getField(HrTime256Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get filteredBpm {
     final field = getField(HrFilteredBpmField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set filteredBpm(int? value) {
    final field = getField(HrFilteredBpmField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get eventTimestamp {
     final field = getField(HrEventTimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set eventTimestamp(double? value) {
    final field = getField(HrEventTimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get eventTimestamp12 {
     final field = getField(HrEventTimestamp12Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set eventTimestamp12(int? value) {
    final field = getField(HrEventTimestamp12Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class HrFractionalTimestampField extends Field {
 HrFractionalTimestampField({int size = 0, bool growable = true})
      : super(
            name: 'fractional_timestamp',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 32768,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class HrTime256Field extends Field {
 HrTime256Field({int size = 0, bool growable = true})
      : super(
            name: 'time256',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 256,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class HrFilteredBpmField extends Field {
 HrFilteredBpmField({int size = 0, bool growable = true})
      : super(
            name: 'filtered_bpm',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 6;
}
class HrEventTimestampField extends Field {
 HrEventTimestampField({int size = 0, bool growable = true})
      : super(
            name: 'event_timestamp',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1024,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 9;
}
class HrEventTimestamp12Field extends Field {
 HrEventTimestamp12Field({int size = 0, bool growable = true})
      : super(
            name: 'event_timestamp_12',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 10;
}