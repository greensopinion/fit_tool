/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class ExdScreenConfigurationMessage extends DataMessage {

   ExdScreenConfigurationMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: ExdScreenConfigurationMessage.NAME,
            globalId: ExdScreenConfigurationMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              ExdScreenConfigurationScreenIndexField(
                  size: definitionMessage?.getFieldDefinition(ExdScreenConfigurationScreenIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdScreenConfigurationFieldCountField(
                  size: definitionMessage?.getFieldDefinition(ExdScreenConfigurationFieldCountField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdScreenConfigurationLayoutField(
                  size: definitionMessage?.getFieldDefinition(ExdScreenConfigurationLayoutField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              ExdScreenConfigurationScreenEnabledField(
                  size: definitionMessage?.getFieldDefinition(ExdScreenConfigurationScreenEnabledField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 200;
  static const NAME = 'exd_screen_configuration';

  final bool growable;

  static ExdScreenConfigurationMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = ExdScreenConfigurationMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  int? get screenIndex {
     final field = getField(ExdScreenConfigurationScreenIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set screenIndex(int? value) {
    final field = getField(ExdScreenConfigurationScreenIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get fieldCount {
     final field = getField(ExdScreenConfigurationFieldCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set fieldCount(int? value) {
    final field = getField(ExdScreenConfigurationFieldCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  ExdLayout? get layout {
     final field = getField(ExdScreenConfigurationLayoutField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ExdLayoutExt.fromValue(value);
    } else {
      return null;
    }
  }
   set layout(ExdLayout? value) {
    final field = getField(ExdScreenConfigurationLayoutField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  bool? get screenEnabled {
     final field = getField(ExdScreenConfigurationScreenEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set screenEnabled(bool? value) {
    final field = getField(ExdScreenConfigurationScreenEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class ExdScreenConfigurationScreenIndexField extends Field {
 ExdScreenConfigurationScreenIndexField({int size = 0, bool growable = true})
      : super(
            name: 'screen_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class ExdScreenConfigurationFieldCountField extends Field {
 ExdScreenConfigurationFieldCountField({int size = 0, bool growable = true})
      : super(
            name: 'field_count',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class ExdScreenConfigurationLayoutField extends Field {
 ExdScreenConfigurationLayoutField({int size = 0, bool growable = true})
      : super(
            name: 'layout',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class ExdScreenConfigurationScreenEnabledField extends Field {
 ExdScreenConfigurationScreenEnabledField({int size = 0, bool growable = true})
      : super(
            name: 'screen_enabled',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}