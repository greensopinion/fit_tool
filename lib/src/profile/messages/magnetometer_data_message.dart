/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class MagnetometerDataMessage extends DataMessage {
  MagnetometerDataMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: MagnetometerDataMessage.NAME,
            globalId: MagnetometerDataMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataTimestampMsField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MagnetometerDataTimestampMsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataSampleTimeOffsetField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MagnetometerDataSampleTimeOffsetField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataMagXField(
                  size: definitionMessage
                          ?.getFieldDefinition(MagnetometerDataMagXField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataMagYField(
                  size: definitionMessage
                          ?.getFieldDefinition(MagnetometerDataMagYField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataMagZField(
                  size: definitionMessage
                          ?.getFieldDefinition(MagnetometerDataMagZField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataCalibratedMagXField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MagnetometerDataCalibratedMagXField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataCalibratedMagYField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MagnetometerDataCalibratedMagYField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              MagnetometerDataCalibratedMagZField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              MagnetometerDataCalibratedMagZField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 208;
  static const NAME = 'magnetometer_data';

  final bool growable;

  static MagnetometerDataMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        MagnetometerDataMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get timestampMs {
    final field = getField(MagnetometerDataTimestampMsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set timestampMs(int? value) {
    final field = getField(MagnetometerDataTimestampMsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get sampleTimeOffset {
    final field = getField(MagnetometerDataSampleTimeOffsetField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set sampleTimeOffset(int? value) {
    final field = getField(MagnetometerDataSampleTimeOffsetField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get magX {
    final field = getField(MagnetometerDataMagXField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set magX(int? value) {
    final field = getField(MagnetometerDataMagXField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get magY {
    final field = getField(MagnetometerDataMagYField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set magY(int? value) {
    final field = getField(MagnetometerDataMagYField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get magZ {
    final field = getField(MagnetometerDataMagZField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set magZ(int? value) {
    final field = getField(MagnetometerDataMagZField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get calibratedMagX {
    final field = getField(MagnetometerDataCalibratedMagXField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set calibratedMagX(double? value) {
    final field = getField(MagnetometerDataCalibratedMagXField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get calibratedMagY {
    final field = getField(MagnetometerDataCalibratedMagYField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set calibratedMagY(double? value) {
    final field = getField(MagnetometerDataCalibratedMagYField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get calibratedMagZ {
    final field = getField(MagnetometerDataCalibratedMagZField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set calibratedMagZ(double? value) {
    final field = getField(MagnetometerDataCalibratedMagZField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
}

class MagnetometerDataTimestampMsField extends Field {
  MagnetometerDataTimestampMsField({int size = 0, bool growable = true})
      : super(
            name: 'timestamp_ms',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class MagnetometerDataSampleTimeOffsetField extends Field {
  MagnetometerDataSampleTimeOffsetField({int size = 0, bool growable = true})
      : super(
            name: 'sample_time_offset',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'ms',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class MagnetometerDataMagXField extends Field {
  MagnetometerDataMagXField({int size = 0, bool growable = true})
      : super(
            name: 'mag_x',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class MagnetometerDataMagYField extends Field {
  MagnetometerDataMagYField({int size = 0, bool growable = true})
      : super(
            name: 'mag_y',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class MagnetometerDataMagZField extends Field {
  MagnetometerDataMagZField({int size = 0, bool growable = true})
      : super(
            name: 'mag_z',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'counts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class MagnetometerDataCalibratedMagXField extends Field {
  MagnetometerDataCalibratedMagXField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_mag_x',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'G',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class MagnetometerDataCalibratedMagYField extends Field {
  MagnetometerDataCalibratedMagYField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_mag_y',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'G',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class MagnetometerDataCalibratedMagZField extends Field {
  MagnetometerDataCalibratedMagZField({int size = 0, bool growable = true})
      : super(
            name: 'calibrated_mag_z',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'G',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 7;
}
