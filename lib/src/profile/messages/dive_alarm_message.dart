/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class DiveAlarmMessage extends DataMessage {
  DiveAlarmMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: DiveAlarmMessage.NAME,
            globalId: DiveAlarmMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DiveAlarmDepthField(
                  size: definitionMessage
                          ?.getFieldDefinition(DiveAlarmDepthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DiveAlarmTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(DiveAlarmTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DiveAlarmEnabledField(
                  size: definitionMessage
                          ?.getFieldDefinition(DiveAlarmEnabledField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DiveAlarmAlarmTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(DiveAlarmAlarmTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DiveAlarmSoundField(
                  size: definitionMessage
                          ?.getFieldDefinition(DiveAlarmSoundField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DiveAlarmDiveTypesField(
                  size: definitionMessage
                          ?.getFieldDefinition(DiveAlarmDiveTypesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 262;
  static const NAME = 'dive_alarm';

  final bool growable;

  static DiveAlarmMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = DiveAlarmMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  double? get depth {
    final field = getField(DiveAlarmDepthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set depth(double? value) {
    final field = getField(DiveAlarmDepthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get time {
    final field = getField(DiveAlarmTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set time(int? value) {
    final field = getField(DiveAlarmTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  bool? get enabled {
    final field = getField(DiveAlarmEnabledField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set enabled(bool? value) {
    final field = getField(DiveAlarmEnabledField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  DiveAlarmType? get alarmType {
    final field = getField(DiveAlarmAlarmTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DiveAlarmTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set alarmType(DiveAlarmType? value) {
    final field = getField(DiveAlarmAlarmTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  Tone? get sound {
    final field = getField(DiveAlarmSoundField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ToneExt.fromValue(value);
    } else {
      return null;
    }
  }

  set sound(Tone? value) {
    final field = getField(DiveAlarmSoundField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  SubSport? get diveTypes {
    final field = getField(DiveAlarmDiveTypesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SubSportExt.fromValue(value);
    } else {
      return null;
    }
  }

  set diveTypes(SubSport? value) {
    final field = getField(DiveAlarmDiveTypesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
}

class DiveAlarmDepthField extends Field {
  DiveAlarmDepthField({int size = 0, bool growable = true})
      : super(
            name: 'depth',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class DiveAlarmTimeField extends Field {
  DiveAlarmTimeField({int size = 0, bool growable = true})
      : super(
            name: 'time',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class DiveAlarmEnabledField extends Field {
  DiveAlarmEnabledField({int size = 0, bool growable = true})
      : super(
            name: 'enabled',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class DiveAlarmAlarmTypeField extends Field {
  DiveAlarmAlarmTypeField({int size = 0, bool growable = true})
      : super(
            name: 'alarm_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class DiveAlarmSoundField extends Field {
  DiveAlarmSoundField({int size = 0, bool growable = true})
      : super(
            name: 'sound',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class DiveAlarmDiveTypesField extends Field {
  DiveAlarmDiveTypesField({int size = 0, bool growable = true})
      : super(
            name: 'dive_types',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}
