/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class SegmentLapMessage extends DataMessage {
  SegmentLapMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: SegmentLapMessage.NAME,
            globalId: SegmentLapMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapEventField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapEventField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapEventTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapEventTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapStartTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapStartTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapStartPositionLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapStartPositionLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapStartPositionLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapStartPositionLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapEndPositionLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapEndPositionLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapEndPositionLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapEndPositionLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalElapsedTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTotalElapsedTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalTimerTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalTimerTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalDistanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalDistanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalFatCaloriesField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTotalFatCaloriesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalAscentField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalAscentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalDescentField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalDescentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapEventGroupField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapEventGroupField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapNecLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapNecLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapNecLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapNecLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapSwcLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapSwcLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapSwcLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapSwcLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapNormalizedPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapNormalizedPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapLeftRightBalanceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapLeftRightBalanceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapSubSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapSubSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalWorkField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalWorkField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapGpsAccuracyField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapGpsAccuracyField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgPosGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgPosGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgNegGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgNegGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxPosGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxPosGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxNegGradeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxNegGradeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMaxTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalMovingTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTotalMovingTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgPosVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgPosVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgNegVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgNegVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxPosVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapMaxPosVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxNegVerticalSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapMaxNegVerticalSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTimeInHrZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTimeInHrZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTimeInSpeedZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTimeInSpeedZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTimeInCadenceZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTimeInCadenceZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTimeInPowerZoneField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTimeInPowerZoneField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapRepetitionNumField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapRepetitionNumField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMinAltitudeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMinAltitudeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMinHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapMinHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapActiveTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapActiveTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapWorkoutStepIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapWorkoutStepIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapSportEventField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapSportEventField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgLeftTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightTorqueEffectivenessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgRightTorqueEffectivenessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgLeftPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgRightPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgCombinedPedalSmoothnessField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgCombinedPedalSmoothnessField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapStatusField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapStatusField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapUuidField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapUuidField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgFractionalCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgFractionalCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxFractionalCadenceField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapMaxFractionalCadenceField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalFractionalCyclesField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTotalFractionalCyclesField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapFrontGearShiftCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapFrontGearShiftCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapRearGearShiftCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapRearGearShiftCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTimeStandingField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTimeStandingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapStandCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapStandCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgLeftPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPcoField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgRightPcoField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgLeftPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgLeftPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPowerPhaseField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgRightPowerPhaseField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPowerPhasePeakField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgRightPowerPhasePeakField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgPowerPositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgPowerPositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxPowerPositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapMaxPowerPositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgCadencePositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapAvgCadencePositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapMaxCadencePositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapMaxCadencePositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapManufacturerField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapManufacturerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalGritField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalGritField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalFlowField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapTotalFlowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgGritField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgGritField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapAvgFlowField(
                  size: definitionMessage
                          ?.getFieldDefinition(SegmentLapAvgFlowField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalFractionalAscentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTotalFractionalAscentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              SegmentLapTotalFractionalDescentField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              SegmentLapTotalFractionalDescentField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 142;
  static const NAME = 'segment_lap';

  final bool growable;

  /// Returns an instance of SegmentLapMessage from a bytes list.
  static SegmentLapMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = SegmentLapMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the event field. Returns null if the field is not defined in the message.
  Event? get event {
    final field = getField(SegmentLapEventField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the event field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set event(Event? value) {
    final field = getField(SegmentLapEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the eventType field. Returns null if the field is not defined in the message.
  EventType? get eventType {
    final field = getField(SegmentLapEventTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the eventType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set eventType(EventType? value) {
    final field = getField(SegmentLapEventTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get startTime {
    final field = getField(SegmentLapStartTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set startTime(int? value) {
    final field = getField(SegmentLapStartTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the startPositionLat field. Returns null if the field is not defined in the message.
  double? get startPositionLat {
    final field = getField(SegmentLapStartPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the startPositionLat field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set startPositionLat(double? value) {
    final field = getField(SegmentLapStartPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the startPositionLong field. Returns null if the field is not defined in the message.
  double? get startPositionLong {
    final field = getField(SegmentLapStartPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the startPositionLong field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set startPositionLong(double? value) {
    final field = getField(SegmentLapStartPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the endPositionLat field. Returns null if the field is not defined in the message.
  double? get endPositionLat {
    final field = getField(SegmentLapEndPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the endPositionLat field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set endPositionLat(double? value) {
    final field = getField(SegmentLapEndPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the endPositionLong field. Returns null if the field is not defined in the message.
  double? get endPositionLong {
    final field = getField(SegmentLapEndPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the endPositionLong field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set endPositionLong(double? value) {
    final field = getField(SegmentLapEndPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalElapsedTime field. Returns null if the field is not defined in the message.
  double? get totalElapsedTime {
    final field = getField(SegmentLapTotalElapsedTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalElapsedTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalElapsedTime(double? value) {
    final field = getField(SegmentLapTotalElapsedTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalTimerTime field. Returns null if the field is not defined in the message.
  double? get totalTimerTime {
    final field = getField(SegmentLapTotalTimerTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalTimerTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalTimerTime(double? value) {
    final field = getField(SegmentLapTotalTimerTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalDistance field. Returns null if the field is not defined in the message.
  double? get totalDistance {
    final field = getField(SegmentLapTotalDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalDistance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalDistance(double? value) {
    final field = getField(SegmentLapTotalDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalCycles field. Returns null if the field is not defined in the message.
  int? get totalCycles {
    final field = getField(SegmentLapTotalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalCycles field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalCycles(int? value) {
    final field = getField(SegmentLapTotalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Get the value of the subfield totalStrokes
  int? get totalStrokes {
    final field = getField(SegmentLapTotalCyclesField.ID);
    final typeField = getField(SegmentLapSportField.ID);

    final isSubFieldValid =
        typeField != null && [2].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalCycles subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set totalStrokes(int? value) {
    final field = getField(SegmentLapTotalCyclesField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalCalories field. Returns null if the field is not defined in the message.
  int? get totalCalories {
    final field = getField(SegmentLapTotalCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalCalories field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalCalories(int? value) {
    final field = getField(SegmentLapTotalCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalFatCalories field. Returns null if the field is not defined in the message.
  int? get totalFatCalories {
    final field = getField(SegmentLapTotalFatCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalFatCalories field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalFatCalories(int? value) {
    final field = getField(SegmentLapTotalFatCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgSpeed field. Returns null if the field is not defined in the message.
  double? get avgSpeed {
    final field = getField(SegmentLapAvgSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgSpeed(double? value) {
    final field = getField(SegmentLapAvgSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxSpeed field. Returns null if the field is not defined in the message.
  double? get maxSpeed {
    final field = getField(SegmentLapMaxSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxSpeed(double? value) {
    final field = getField(SegmentLapMaxSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgHeartRate field. Returns null if the field is not defined in the message.
  int? get avgHeartRate {
    final field = getField(SegmentLapAvgHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgHeartRate(int? value) {
    final field = getField(SegmentLapAvgHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxHeartRate field. Returns null if the field is not defined in the message.
  int? get maxHeartRate {
    final field = getField(SegmentLapMaxHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxHeartRate(int? value) {
    final field = getField(SegmentLapMaxHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgCadence field. Returns null if the field is not defined in the message.
  int? get avgCadence {
    final field = getField(SegmentLapAvgCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgCadence field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgCadence(int? value) {
    final field = getField(SegmentLapAvgCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxCadence field. Returns null if the field is not defined in the message.
  int? get maxCadence {
    final field = getField(SegmentLapMaxCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxCadence field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxCadence(int? value) {
    final field = getField(SegmentLapMaxCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgPower field. Returns null if the field is not defined in the message.
  int? get avgPower {
    final field = getField(SegmentLapAvgPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgPower field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgPower(int? value) {
    final field = getField(SegmentLapAvgPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxPower field. Returns null if the field is not defined in the message.
  int? get maxPower {
    final field = getField(SegmentLapMaxPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxPower field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxPower(int? value) {
    final field = getField(SegmentLapMaxPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalAscent field. Returns null if the field is not defined in the message.
  int? get totalAscent {
    final field = getField(SegmentLapTotalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalAscent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalAscent(int? value) {
    final field = getField(SegmentLapTotalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalDescent field. Returns null if the field is not defined in the message.
  int? get totalDescent {
    final field = getField(SegmentLapTotalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalDescent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalDescent(int? value) {
    final field = getField(SegmentLapTotalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the sport field. Returns null if the field is not defined in the message.
  Sport? get sport {
    final field = getField(SegmentLapSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SportExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the sport field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sport(Sport? value) {
    final field = getField(SegmentLapSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the eventGroup field. Returns null if the field is not defined in the message.
  int? get eventGroup {
    final field = getField(SegmentLapEventGroupField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the eventGroup field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set eventGroup(int? value) {
    final field = getField(SegmentLapEventGroupField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the necLat field. Returns null if the field is not defined in the message.
  double? get necLat {
    final field = getField(SegmentLapNecLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the necLat field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set necLat(double? value) {
    final field = getField(SegmentLapNecLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the necLong field. Returns null if the field is not defined in the message.
  double? get necLong {
    final field = getField(SegmentLapNecLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the necLong field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set necLong(double? value) {
    final field = getField(SegmentLapNecLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the swcLat field. Returns null if the field is not defined in the message.
  double? get swcLat {
    final field = getField(SegmentLapSwcLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the swcLat field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set swcLat(double? value) {
    final field = getField(SegmentLapSwcLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the swcLong field. Returns null if the field is not defined in the message.
  double? get swcLong {
    final field = getField(SegmentLapSwcLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the swcLong field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set swcLong(double? value) {
    final field = getField(SegmentLapSwcLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the segmentLapName field. Returns null if the field is not defined in the message.
  String? get segmentLapName {
    final field = getField(SegmentLapNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the segmentLapName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set segmentLapName(String? value) {
    final field = getField(SegmentLapNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the normalizedPower field. Returns null if the field is not defined in the message.
  int? get normalizedPower {
    final field = getField(SegmentLapNormalizedPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the normalizedPower field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set normalizedPower(int? value) {
    final field = getField(SegmentLapNormalizedPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the leftRightBalance field. Returns null if the field is not defined in the message.
  int? get leftRightBalance {
    final field = getField(SegmentLapLeftRightBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the leftRightBalance field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set leftRightBalance(int? value) {
    final field = getField(SegmentLapLeftRightBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the subSport field. Returns null if the field is not defined in the message.
  SubSport? get subSport {
    final field = getField(SegmentLapSubSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SubSportExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the subSport field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set subSport(SubSport? value) {
    final field = getField(SegmentLapSubSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalWork field. Returns null if the field is not defined in the message.
  int? get totalWork {
    final field = getField(SegmentLapTotalWorkField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalWork field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalWork(int? value) {
    final field = getField(SegmentLapTotalWorkField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgAltitude field. Returns null if the field is not defined in the message.
  double? get avgAltitude {
    final field = getField(SegmentLapAvgAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgAltitude field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgAltitude(double? value) {
    final field = getField(SegmentLapAvgAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxAltitude field. Returns null if the field is not defined in the message.
  double? get maxAltitude {
    final field = getField(SegmentLapMaxAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxAltitude field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxAltitude(double? value) {
    final field = getField(SegmentLapMaxAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the gpsAccuracy field. Returns null if the field is not defined in the message.
  int? get gpsAccuracy {
    final field = getField(SegmentLapGpsAccuracyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the gpsAccuracy field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set gpsAccuracy(int? value) {
    final field = getField(SegmentLapGpsAccuracyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgGrade field. Returns null if the field is not defined in the message.
  double? get avgGrade {
    final field = getField(SegmentLapAvgGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgGrade field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgGrade(double? value) {
    final field = getField(SegmentLapAvgGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgPosGrade field. Returns null if the field is not defined in the message.
  double? get avgPosGrade {
    final field = getField(SegmentLapAvgPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgPosGrade field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgPosGrade(double? value) {
    final field = getField(SegmentLapAvgPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgNegGrade field. Returns null if the field is not defined in the message.
  double? get avgNegGrade {
    final field = getField(SegmentLapAvgNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgNegGrade field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgNegGrade(double? value) {
    final field = getField(SegmentLapAvgNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxPosGrade field. Returns null if the field is not defined in the message.
  double? get maxPosGrade {
    final field = getField(SegmentLapMaxPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxPosGrade field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxPosGrade(double? value) {
    final field = getField(SegmentLapMaxPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxNegGrade field. Returns null if the field is not defined in the message.
  double? get maxNegGrade {
    final field = getField(SegmentLapMaxNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxNegGrade field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxNegGrade(double? value) {
    final field = getField(SegmentLapMaxNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgTemperature field. Returns null if the field is not defined in the message.
  int? get avgTemperature {
    final field = getField(SegmentLapAvgTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgTemperature field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgTemperature(int? value) {
    final field = getField(SegmentLapAvgTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxTemperature field. Returns null if the field is not defined in the message.
  int? get maxTemperature {
    final field = getField(SegmentLapMaxTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxTemperature field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxTemperature(int? value) {
    final field = getField(SegmentLapMaxTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalMovingTime field. Returns null if the field is not defined in the message.
  double? get totalMovingTime {
    final field = getField(SegmentLapTotalMovingTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalMovingTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalMovingTime(double? value) {
    final field = getField(SegmentLapTotalMovingTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgPosVerticalSpeed field. Returns null if the field is not defined in the message.
  double? get avgPosVerticalSpeed {
    final field = getField(SegmentLapAvgPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgPosVerticalSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgPosVerticalSpeed(double? value) {
    final field = getField(SegmentLapAvgPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgNegVerticalSpeed field. Returns null if the field is not defined in the message.
  double? get avgNegVerticalSpeed {
    final field = getField(SegmentLapAvgNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgNegVerticalSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgNegVerticalSpeed(double? value) {
    final field = getField(SegmentLapAvgNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxPosVerticalSpeed field. Returns null if the field is not defined in the message.
  double? get maxPosVerticalSpeed {
    final field = getField(SegmentLapMaxPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxPosVerticalSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxPosVerticalSpeed(double? value) {
    final field = getField(SegmentLapMaxPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxNegVerticalSpeed field. Returns null if the field is not defined in the message.
  double? get maxNegVerticalSpeed {
    final field = getField(SegmentLapMaxNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxNegVerticalSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxNegVerticalSpeed(double? value) {
    final field = getField(SegmentLapMaxNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timeInHrZone field. Returns null if the field is not defined in the message.
  double? get timeInHrZone {
    final field = getField(SegmentLapTimeInHrZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeInHrZone field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeInHrZone(double? value) {
    final field = getField(SegmentLapTimeInHrZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timeInSpeedZone field. Returns null if the field is not defined in the message.
  double? get timeInSpeedZone {
    final field = getField(SegmentLapTimeInSpeedZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeInSpeedZone field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeInSpeedZone(double? value) {
    final field = getField(SegmentLapTimeInSpeedZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timeInCadenceZone field. Returns null if the field is not defined in the message.
  double? get timeInCadenceZone {
    final field = getField(SegmentLapTimeInCadenceZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeInCadenceZone field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeInCadenceZone(double? value) {
    final field = getField(SegmentLapTimeInCadenceZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timeInPowerZone field. Returns null if the field is not defined in the message.
  double? get timeInPowerZone {
    final field = getField(SegmentLapTimeInPowerZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeInPowerZone field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeInPowerZone(double? value) {
    final field = getField(SegmentLapTimeInPowerZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the repetitionNum field. Returns null if the field is not defined in the message.
  int? get repetitionNum {
    final field = getField(SegmentLapRepetitionNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the repetitionNum field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set repetitionNum(int? value) {
    final field = getField(SegmentLapRepetitionNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the minAltitude field. Returns null if the field is not defined in the message.
  double? get minAltitude {
    final field = getField(SegmentLapMinAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the minAltitude field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set minAltitude(double? value) {
    final field = getField(SegmentLapMinAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the minHeartRate field. Returns null if the field is not defined in the message.
  int? get minHeartRate {
    final field = getField(SegmentLapMinHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the minHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set minHeartRate(int? value) {
    final field = getField(SegmentLapMinHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the activeTime field. Returns null if the field is not defined in the message.
  double? get activeTime {
    final field = getField(SegmentLapActiveTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the activeTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activeTime(double? value) {
    final field = getField(SegmentLapActiveTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the workoutStepIndex field. Returns null if the field is not defined in the message.
  int? get workoutStepIndex {
    final field = getField(SegmentLapWorkoutStepIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the workoutStepIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set workoutStepIndex(int? value) {
    final field = getField(SegmentLapWorkoutStepIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the sportEvent field. Returns null if the field is not defined in the message.
  SportEvent? get sportEvent {
    final field = getField(SegmentLapSportEventField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SportEventExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the sportEvent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sportEvent(SportEvent? value) {
    final field = getField(SegmentLapSportEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgLeftTorqueEffectiveness field. Returns null if the field is not defined in the message.
  double? get avgLeftTorqueEffectiveness {
    final field = getField(SegmentLapAvgLeftTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgLeftTorqueEffectiveness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgLeftTorqueEffectiveness(double? value) {
    final field = getField(SegmentLapAvgLeftTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgRightTorqueEffectiveness field. Returns null if the field is not defined in the message.
  double? get avgRightTorqueEffectiveness {
    final field = getField(SegmentLapAvgRightTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgRightTorqueEffectiveness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgRightTorqueEffectiveness(double? value) {
    final field = getField(SegmentLapAvgRightTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgLeftPedalSmoothness field. Returns null if the field is not defined in the message.
  double? get avgLeftPedalSmoothness {
    final field = getField(SegmentLapAvgLeftPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgLeftPedalSmoothness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgLeftPedalSmoothness(double? value) {
    final field = getField(SegmentLapAvgLeftPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgRightPedalSmoothness field. Returns null if the field is not defined in the message.
  double? get avgRightPedalSmoothness {
    final field = getField(SegmentLapAvgRightPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgRightPedalSmoothness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgRightPedalSmoothness(double? value) {
    final field = getField(SegmentLapAvgRightPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgCombinedPedalSmoothness field. Returns null if the field is not defined in the message.
  double? get avgCombinedPedalSmoothness {
    final field = getField(SegmentLapAvgCombinedPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgCombinedPedalSmoothness field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgCombinedPedalSmoothness(double? value) {
    final field = getField(SegmentLapAvgCombinedPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the status field. Returns null if the field is not defined in the message.
  SegmentLapStatus? get status {
    final field = getField(SegmentLapStatusField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SegmentLapStatusExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the status field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set status(SegmentLapStatus? value) {
    final field = getField(SegmentLapStatusField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the uuid field. Returns null if the field is not defined in the message.
  String? get uuid {
    final field = getField(SegmentLapUuidField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the uuid field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set uuid(String? value) {
    final field = getField(SegmentLapUuidField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgFractionalCadence field. Returns null if the field is not defined in the message.
  double? get avgFractionalCadence {
    final field = getField(SegmentLapAvgFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgFractionalCadence field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgFractionalCadence(double? value) {
    final field = getField(SegmentLapAvgFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxFractionalCadence field. Returns null if the field is not defined in the message.
  double? get maxFractionalCadence {
    final field = getField(SegmentLapMaxFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxFractionalCadence field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxFractionalCadence(double? value) {
    final field = getField(SegmentLapMaxFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalFractionalCycles field. Returns null if the field is not defined in the message.
  double? get totalFractionalCycles {
    final field = getField(SegmentLapTotalFractionalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalFractionalCycles field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalFractionalCycles(double? value) {
    final field = getField(SegmentLapTotalFractionalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the frontGearShiftCount field. Returns null if the field is not defined in the message.
  int? get frontGearShiftCount {
    final field = getField(SegmentLapFrontGearShiftCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the frontGearShiftCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set frontGearShiftCount(int? value) {
    final field = getField(SegmentLapFrontGearShiftCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the rearGearShiftCount field. Returns null if the field is not defined in the message.
  int? get rearGearShiftCount {
    final field = getField(SegmentLapRearGearShiftCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the rearGearShiftCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set rearGearShiftCount(int? value) {
    final field = getField(SegmentLapRearGearShiftCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timeStanding field. Returns null if the field is not defined in the message.
  double? get timeStanding {
    final field = getField(SegmentLapTimeStandingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timeStanding field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timeStanding(double? value) {
    final field = getField(SegmentLapTimeStandingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the standCount field. Returns null if the field is not defined in the message.
  int? get standCount {
    final field = getField(SegmentLapStandCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the standCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set standCount(int? value) {
    final field = getField(SegmentLapStandCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgLeftPco field. Returns null if the field is not defined in the message.
  int? get avgLeftPco {
    final field = getField(SegmentLapAvgLeftPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgLeftPco field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgLeftPco(int? value) {
    final field = getField(SegmentLapAvgLeftPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgRightPco field. Returns null if the field is not defined in the message.
  int? get avgRightPco {
    final field = getField(SegmentLapAvgRightPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgRightPco field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgRightPco(int? value) {
    final field = getField(SegmentLapAvgRightPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgLeftPowerPhase field. Returns null if the field is not defined in the message.
  double? get avgLeftPowerPhase {
    final field = getField(SegmentLapAvgLeftPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgLeftPowerPhase field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgLeftPowerPhase(double? value) {
    final field = getField(SegmentLapAvgLeftPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgLeftPowerPhasePeak field. Returns null if the field is not defined in the message.
  double? get avgLeftPowerPhasePeak {
    final field = getField(SegmentLapAvgLeftPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgLeftPowerPhasePeak field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgLeftPowerPhasePeak(double? value) {
    final field = getField(SegmentLapAvgLeftPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgRightPowerPhase field. Returns null if the field is not defined in the message.
  double? get avgRightPowerPhase {
    final field = getField(SegmentLapAvgRightPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgRightPowerPhase field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgRightPowerPhase(double? value) {
    final field = getField(SegmentLapAvgRightPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgRightPowerPhasePeak field. Returns null if the field is not defined in the message.
  double? get avgRightPowerPhasePeak {
    final field = getField(SegmentLapAvgRightPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgRightPowerPhasePeak field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgRightPowerPhasePeak(double? value) {
    final field = getField(SegmentLapAvgRightPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgPowerPosition field. Returns null if the field is not defined in the message.
  int? get avgPowerPosition {
    final field = getField(SegmentLapAvgPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgPowerPosition field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgPowerPosition(int? value) {
    final field = getField(SegmentLapAvgPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxPowerPosition field. Returns null if the field is not defined in the message.
  int? get maxPowerPosition {
    final field = getField(SegmentLapMaxPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxPowerPosition field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxPowerPosition(int? value) {
    final field = getField(SegmentLapMaxPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgCadencePosition field. Returns null if the field is not defined in the message.
  int? get avgCadencePosition {
    final field = getField(SegmentLapAvgCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgCadencePosition field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgCadencePosition(int? value) {
    final field = getField(SegmentLapAvgCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the maxCadencePosition field. Returns null if the field is not defined in the message.
  int? get maxCadencePosition {
    final field = getField(SegmentLapMaxCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxCadencePosition field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxCadencePosition(int? value) {
    final field = getField(SegmentLapMaxCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the manufacturer field. Returns null if the field is not defined in the message.
  int? get manufacturer {
    final field = getField(SegmentLapManufacturerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the manufacturer field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set manufacturer(int? value) {
    final field = getField(SegmentLapManufacturerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalGrit field. Returns null if the field is not defined in the message.
  double? get totalGrit {
    final field = getField(SegmentLapTotalGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalGrit field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalGrit(double? value) {
    final field = getField(SegmentLapTotalGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalFlow field. Returns null if the field is not defined in the message.
  double? get totalFlow {
    final field = getField(SegmentLapTotalFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalFlow field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalFlow(double? value) {
    final field = getField(SegmentLapTotalFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgGrit field. Returns null if the field is not defined in the message.
  double? get avgGrit {
    final field = getField(SegmentLapAvgGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgGrit field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgGrit(double? value) {
    final field = getField(SegmentLapAvgGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the avgFlow field. Returns null if the field is not defined in the message.
  double? get avgFlow {
    final field = getField(SegmentLapAvgFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the avgFlow field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set avgFlow(double? value) {
    final field = getField(SegmentLapAvgFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalFractionalAscent field. Returns null if the field is not defined in the message.
  double? get totalFractionalAscent {
    final field = getField(SegmentLapTotalFractionalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalFractionalAscent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalFractionalAscent(double? value) {
    final field = getField(SegmentLapTotalFractionalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the totalFractionalDescent field. Returns null if the field is not defined in the message.
  double? get totalFractionalDescent {
    final field = getField(SegmentLapTotalFractionalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the totalFractionalDescent field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set totalFractionalDescent(double? value) {
    final field = getField(SegmentLapTotalFractionalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class SegmentLapEventField extends Field {
  SegmentLapEventField({int size = 0, bool growable = true})
      : super(
            name: 'event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class SegmentLapEventTypeField extends Field {
  SegmentLapEventTypeField({int size = 0, bool growable = true})
      : super(
            name: 'event_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class SegmentLapStartTimeField extends Field {
  SegmentLapStartTimeField({int size = 0, bool growable = true})
      : super(
            name: 'start_time',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class SegmentLapStartPositionLatField extends Field {
  SegmentLapStartPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class SegmentLapStartPositionLongField extends Field {
  SegmentLapStartPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class SegmentLapEndPositionLatField extends Field {
  SegmentLapEndPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'end_position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class SegmentLapEndPositionLongField extends Field {
  SegmentLapEndPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'end_position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class SegmentLapTotalElapsedTimeField extends Field {
  SegmentLapTotalElapsedTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_elapsed_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class SegmentLapTotalTimerTimeField extends Field {
  SegmentLapTotalTimerTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_timer_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class SegmentLapTotalDistanceField extends Field {
  SegmentLapTotalDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'total_distance',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class SegmentLapTotalCyclesField extends Field {
  SegmentLapTotalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_cycles',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: [
              SubField(
                  name: 'total_strokes',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'strokes',
                  referenceMap: {
                    SegmentLapSportField.ID: [2]
                  })
            ]);

  static const ID = 10;
}

class SegmentLapTotalCaloriesField extends Field {
  SegmentLapTotalCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class SegmentLapTotalFatCaloriesField extends Field {
  SegmentLapTotalFatCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fat_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class SegmentLapAvgSpeedField extends Field {
  SegmentLapAvgSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class SegmentLapMaxSpeedField extends Field {
  SegmentLapMaxSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 14;
}

class SegmentLapAvgHeartRateField extends Field {
  SegmentLapAvgHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'avg_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 15;
}

class SegmentLapMaxHeartRateField extends Field {
  SegmentLapMaxHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'max_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 16;
}

class SegmentLapAvgCadenceField extends Field {
  SegmentLapAvgCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 17;
}

class SegmentLapMaxCadenceField extends Field {
  SegmentLapMaxCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 18;
}

class SegmentLapAvgPowerField extends Field {
  SegmentLapAvgPowerField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 19;
}

class SegmentLapMaxPowerField extends Field {
  SegmentLapMaxPowerField({int size = 0, bool growable = true})
      : super(
            name: 'max_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 20;
}

class SegmentLapTotalAscentField extends Field {
  SegmentLapTotalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_ascent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 21;
}

class SegmentLapTotalDescentField extends Field {
  SegmentLapTotalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_descent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 22;
}

class SegmentLapSportField extends Field {
  SegmentLapSportField({int size = 0, bool growable = true})
      : super(
            name: 'sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 23;
}

class SegmentLapEventGroupField extends Field {
  SegmentLapEventGroupField({int size = 0, bool growable = true})
      : super(
            name: 'event_group',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 24;
}

class SegmentLapNecLatField extends Field {
  SegmentLapNecLatField({int size = 0, bool growable = true})
      : super(
            name: 'nec_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 25;
}

class SegmentLapNecLongField extends Field {
  SegmentLapNecLongField({int size = 0, bool growable = true})
      : super(
            name: 'nec_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 26;
}

class SegmentLapSwcLatField extends Field {
  SegmentLapSwcLatField({int size = 0, bool growable = true})
      : super(
            name: 'swc_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 27;
}

class SegmentLapSwcLongField extends Field {
  SegmentLapSwcLongField({int size = 0, bool growable = true})
      : super(
            name: 'swc_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 28;
}

class SegmentLapNameField extends Field {
  SegmentLapNameField({int size = 0, bool growable = true})
      : super(
            name: 'name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 29;
}

class SegmentLapNormalizedPowerField extends Field {
  SegmentLapNormalizedPowerField({int size = 0, bool growable = true})
      : super(
            name: 'normalized_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 30;
}

class SegmentLapLeftRightBalanceField extends Field {
  SegmentLapLeftRightBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'left_right_balance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 31;
}

class SegmentLapSubSportField extends Field {
  SegmentLapSubSportField({int size = 0, bool growable = true})
      : super(
            name: 'sub_sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 32;
}

class SegmentLapTotalWorkField extends Field {
  SegmentLapTotalWorkField({int size = 0, bool growable = true})
      : super(
            name: 'total_work',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'J',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 33;
}

class SegmentLapAvgAltitudeField extends Field {
  SegmentLapAvgAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 34;
}

class SegmentLapMaxAltitudeField extends Field {
  SegmentLapMaxAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'max_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 35;
}

class SegmentLapGpsAccuracyField extends Field {
  SegmentLapGpsAccuracyField({int size = 0, bool growable = true})
      : super(
            name: 'gps_accuracy',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 36;
}

class SegmentLapAvgGradeField extends Field {
  SegmentLapAvgGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 37;
}

class SegmentLapAvgPosGradeField extends Field {
  SegmentLapAvgPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 38;
}

class SegmentLapAvgNegGradeField extends Field {
  SegmentLapAvgNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 39;
}

class SegmentLapMaxPosGradeField extends Field {
  SegmentLapMaxPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 40;
}

class SegmentLapMaxNegGradeField extends Field {
  SegmentLapMaxNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 41;
}

class SegmentLapAvgTemperatureField extends Field {
  SegmentLapAvgTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'avg_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 42;
}

class SegmentLapMaxTemperatureField extends Field {
  SegmentLapMaxTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'max_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 43;
}

class SegmentLapTotalMovingTimeField extends Field {
  SegmentLapTotalMovingTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_moving_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 44;
}

class SegmentLapAvgPosVerticalSpeedField extends Field {
  SegmentLapAvgPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 45;
}

class SegmentLapAvgNegVerticalSpeedField extends Field {
  SegmentLapAvgNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 46;
}

class SegmentLapMaxPosVerticalSpeedField extends Field {
  SegmentLapMaxPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 47;
}

class SegmentLapMaxNegVerticalSpeedField extends Field {
  SegmentLapMaxNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 48;
}

class SegmentLapTimeInHrZoneField extends Field {
  SegmentLapTimeInHrZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_hr_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 49;
}

class SegmentLapTimeInSpeedZoneField extends Field {
  SegmentLapTimeInSpeedZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_speed_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 50;
}

class SegmentLapTimeInCadenceZoneField extends Field {
  SegmentLapTimeInCadenceZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_cadence_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 51;
}

class SegmentLapTimeInPowerZoneField extends Field {
  SegmentLapTimeInPowerZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_power_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 52;
}

class SegmentLapRepetitionNumField extends Field {
  SegmentLapRepetitionNumField({int size = 0, bool growable = true})
      : super(
            name: 'repetition_num',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 53;
}

class SegmentLapMinAltitudeField extends Field {
  SegmentLapMinAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'min_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 54;
}

class SegmentLapMinHeartRateField extends Field {
  SegmentLapMinHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'min_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 55;
}

class SegmentLapActiveTimeField extends Field {
  SegmentLapActiveTimeField({int size = 0, bool growable = true})
      : super(
            name: 'active_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 56;
}

class SegmentLapWorkoutStepIndexField extends Field {
  SegmentLapWorkoutStepIndexField({int size = 0, bool growable = true})
      : super(
            name: 'wkt_step_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 57;
}

class SegmentLapSportEventField extends Field {
  SegmentLapSportEventField({int size = 0, bool growable = true})
      : super(
            name: 'sport_event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 58;
}

class SegmentLapAvgLeftTorqueEffectivenessField extends Field {
  SegmentLapAvgLeftTorqueEffectivenessField(
      {int size = 0, bool growable = true})
      : super(
            name: 'avg_left_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 59;
}

class SegmentLapAvgRightTorqueEffectivenessField extends Field {
  SegmentLapAvgRightTorqueEffectivenessField(
      {int size = 0, bool growable = true})
      : super(
            name: 'avg_right_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 60;
}

class SegmentLapAvgLeftPedalSmoothnessField extends Field {
  SegmentLapAvgLeftPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 61;
}

class SegmentLapAvgRightPedalSmoothnessField extends Field {
  SegmentLapAvgRightPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 62;
}

class SegmentLapAvgCombinedPedalSmoothnessField extends Field {
  SegmentLapAvgCombinedPedalSmoothnessField(
      {int size = 0, bool growable = true})
      : super(
            name: 'avg_combined_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 63;
}

class SegmentLapStatusField extends Field {
  SegmentLapStatusField({int size = 0, bool growable = true})
      : super(
            name: 'status',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 64;
}

class SegmentLapUuidField extends Field {
  SegmentLapUuidField({int size = 0, bool growable = true})
      : super(
            name: 'uuid',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 65;
}

class SegmentLapAvgFractionalCadenceField extends Field {
  SegmentLapAvgFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 66;
}

class SegmentLapMaxFractionalCadenceField extends Field {
  SegmentLapMaxFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 67;
}

class SegmentLapTotalFractionalCyclesField extends Field {
  SegmentLapTotalFractionalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_cycles',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 68;
}

class SegmentLapFrontGearShiftCountField extends Field {
  SegmentLapFrontGearShiftCountField({int size = 0, bool growable = true})
      : super(
            name: 'front_gear_shift_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 69;
}

class SegmentLapRearGearShiftCountField extends Field {
  SegmentLapRearGearShiftCountField({int size = 0, bool growable = true})
      : super(
            name: 'rear_gear_shift_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 70;
}

class SegmentLapTimeStandingField extends Field {
  SegmentLapTimeStandingField({int size = 0, bool growable = true})
      : super(
            name: 'time_standing',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 71;
}

class SegmentLapStandCountField extends Field {
  SegmentLapStandCountField({int size = 0, bool growable = true})
      : super(
            name: 'stand_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 72;
}

class SegmentLapAvgLeftPcoField extends Field {
  SegmentLapAvgLeftPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 73;
}

class SegmentLapAvgRightPcoField extends Field {
  SegmentLapAvgRightPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 74;
}

class SegmentLapAvgLeftPowerPhaseField extends Field {
  SegmentLapAvgLeftPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 75;
}

class SegmentLapAvgLeftPowerPhasePeakField extends Field {
  SegmentLapAvgLeftPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 76;
}

class SegmentLapAvgRightPowerPhaseField extends Field {
  SegmentLapAvgRightPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 77;
}

class SegmentLapAvgRightPowerPhasePeakField extends Field {
  SegmentLapAvgRightPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 78;
}

class SegmentLapAvgPowerPositionField extends Field {
  SegmentLapAvgPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 79;
}

class SegmentLapMaxPowerPositionField extends Field {
  SegmentLapMaxPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 80;
}

class SegmentLapAvgCadencePositionField extends Field {
  SegmentLapAvgCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 81;
}

class SegmentLapMaxCadencePositionField extends Field {
  SegmentLapMaxCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 82;
}

class SegmentLapManufacturerField extends Field {
  SegmentLapManufacturerField({int size = 0, bool growable = true})
      : super(
            name: 'manufacturer',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 83;
}

class SegmentLapTotalGritField extends Field {
  SegmentLapTotalGritField({int size = 0, bool growable = true})
      : super(
            name: 'total_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 84;
}

class SegmentLapTotalFlowField extends Field {
  SegmentLapTotalFlowField({int size = 0, bool growable = true})
      : super(
            name: 'total_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 85;
}

class SegmentLapAvgGritField extends Field {
  SegmentLapAvgGritField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 86;
}

class SegmentLapAvgFlowField extends Field {
  SegmentLapAvgFlowField({int size = 0, bool growable = true})
      : super(
            name: 'avg_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 87;
}

class SegmentLapTotalFractionalAscentField extends Field {
  SegmentLapTotalFractionalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_ascent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 89;
}

class SegmentLapTotalFractionalDescentField extends Field {
  SegmentLapTotalFractionalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_descent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 90;
}
