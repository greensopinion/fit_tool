/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class SegmentLapMessage extends DataMessage {

   SegmentLapMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: SegmentLapMessage.NAME,
            globalId: SegmentLapMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage?.getFieldDefinition(MessageIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              TimestampField(
                  size: definitionMessage?.getFieldDefinition(TimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapEventField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapEventField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapEventTypeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapEventTypeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapStartTimeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapStartTimeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapStartPositionLatField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapStartPositionLatField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapStartPositionLongField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapStartPositionLongField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapEndPositionLatField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapEndPositionLatField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapEndPositionLongField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapEndPositionLongField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalElapsedTimeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalElapsedTimeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalTimerTimeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalTimerTimeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalDistanceField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalDistanceField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalCyclesField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalCyclesField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalCaloriesField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalCaloriesField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalFatCaloriesField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalFatCaloriesField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgSpeedField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgSpeedField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxSpeedField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxSpeedField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgHeartRateField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgHeartRateField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxHeartRateField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxHeartRateField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgCadenceField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgCadenceField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxCadenceField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxCadenceField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgPowerField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgPowerField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxPowerField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxPowerField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalAscentField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalAscentField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalDescentField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalDescentField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapSportField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapSportField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapEventGroupField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapEventGroupField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapNecLatField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapNecLatField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapNecLongField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapNecLongField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapSwcLatField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapSwcLatField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapSwcLongField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapSwcLongField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapNameField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapNameField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapNormalizedPowerField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapNormalizedPowerField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapLeftRightBalanceField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapLeftRightBalanceField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapSubSportField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapSubSportField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalWorkField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalWorkField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgAltitudeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgAltitudeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxAltitudeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxAltitudeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapGpsAccuracyField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapGpsAccuracyField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgGradeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgGradeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgPosGradeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgPosGradeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgNegGradeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgNegGradeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxPosGradeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxPosGradeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxNegGradeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxNegGradeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgTemperatureField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgTemperatureField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxTemperatureField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxTemperatureField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalMovingTimeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalMovingTimeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgPosVerticalSpeedField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgPosVerticalSpeedField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgNegVerticalSpeedField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgNegVerticalSpeedField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxPosVerticalSpeedField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxPosVerticalSpeedField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxNegVerticalSpeedField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxNegVerticalSpeedField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTimeInHrZoneField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTimeInHrZoneField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTimeInSpeedZoneField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTimeInSpeedZoneField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTimeInCadenceZoneField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTimeInCadenceZoneField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTimeInPowerZoneField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTimeInPowerZoneField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapRepetitionNumField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapRepetitionNumField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMinAltitudeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMinAltitudeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMinHeartRateField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMinHeartRateField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapActiveTimeField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapActiveTimeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapWorkoutStepIndexField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapWorkoutStepIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapSportEventField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapSportEventField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftTorqueEffectivenessField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgLeftTorqueEffectivenessField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightTorqueEffectivenessField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgRightTorqueEffectivenessField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPedalSmoothnessField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgLeftPedalSmoothnessField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPedalSmoothnessField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgRightPedalSmoothnessField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgCombinedPedalSmoothnessField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgCombinedPedalSmoothnessField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapStatusField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapStatusField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapUuidField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapUuidField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgFractionalCadenceField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgFractionalCadenceField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxFractionalCadenceField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxFractionalCadenceField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalFractionalCyclesField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalFractionalCyclesField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapFrontGearShiftCountField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapFrontGearShiftCountField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapRearGearShiftCountField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapRearGearShiftCountField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTimeStandingField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTimeStandingField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapStandCountField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapStandCountField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPcoField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgLeftPcoField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPcoField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgRightPcoField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPowerPhaseField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgLeftPowerPhaseField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgLeftPowerPhasePeakField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgLeftPowerPhasePeakField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPowerPhaseField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgRightPowerPhaseField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgRightPowerPhasePeakField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgRightPowerPhasePeakField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgPowerPositionField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgPowerPositionField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxPowerPositionField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxPowerPositionField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgCadencePositionField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgCadencePositionField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapMaxCadencePositionField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapMaxCadencePositionField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapManufacturerField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapManufacturerField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalGritField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalGritField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalFlowField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalFlowField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgGritField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgGritField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapAvgFlowField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapAvgFlowField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalFractionalAscentField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalFractionalAscentField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentLapTotalFractionalDescentField(
                  size: definitionMessage?.getFieldDefinition(SegmentLapTotalFractionalDescentField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 142;
  static const NAME = 'segment_lap';

  final bool growable;

  static SegmentLapMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = SegmentLapMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  int? get messageIndex {
     final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
     final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
   set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  Event? get event {
     final field = getField(SegmentLapEventField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventExt.fromValue(value);
    } else {
      return null;
    }
  }
   set event(Event? value) {
    final field = getField(SegmentLapEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  EventType? get eventType {
     final field = getField(SegmentLapEventTypeField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return EventTypeExt.fromValue(value);
    } else {
      return null;
    }
  }
   set eventType(EventType? value) {
    final field = getField(SegmentLapEventTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get startTime {
     final field = getField(SegmentLapStartTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
   set startTime(int? value) {
    final field = getField(SegmentLapStartTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get startPositionLat {
     final field = getField(SegmentLapStartPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set startPositionLat(double? value) {
    final field = getField(SegmentLapStartPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get startPositionLong {
     final field = getField(SegmentLapStartPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set startPositionLong(double? value) {
    final field = getField(SegmentLapStartPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get endPositionLat {
     final field = getField(SegmentLapEndPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set endPositionLat(double? value) {
    final field = getField(SegmentLapEndPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get endPositionLong {
     final field = getField(SegmentLapEndPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set endPositionLong(double? value) {
    final field = getField(SegmentLapEndPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalElapsedTime {
     final field = getField(SegmentLapTotalElapsedTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalElapsedTime(double? value) {
    final field = getField(SegmentLapTotalElapsedTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalTimerTime {
     final field = getField(SegmentLapTotalTimerTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalTimerTime(double? value) {
    final field = getField(SegmentLapTotalTimerTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalDistance {
     final field = getField(SegmentLapTotalDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalDistance(double? value) {
    final field = getField(SegmentLapTotalDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get totalCycles {
     final field = getField(SegmentLapTotalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalCycles(int? value) {
    final field = getField(SegmentLapTotalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get totalStrokes {
     final field = getField(SegmentLapTotalCyclesField.ID);
     final typeField = getField(SegmentLapSportField.ID);

     final isSubFieldValid = typeField != null && [2].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField:subField);
    } else {
      return null;
    }
  }

  set totalStrokes(int? value) {
    final field = getField(SegmentLapTotalCyclesField.ID);
       if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get totalCalories {
     final field = getField(SegmentLapTotalCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalCalories(int? value) {
    final field = getField(SegmentLapTotalCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get totalFatCalories {
     final field = getField(SegmentLapTotalFatCaloriesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalFatCalories(int? value) {
    final field = getField(SegmentLapTotalFatCaloriesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgSpeed {
     final field = getField(SegmentLapAvgSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgSpeed(double? value) {
    final field = getField(SegmentLapAvgSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxSpeed {
     final field = getField(SegmentLapMaxSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxSpeed(double? value) {
    final field = getField(SegmentLapMaxSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgHeartRate {
     final field = getField(SegmentLapAvgHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgHeartRate(int? value) {
    final field = getField(SegmentLapAvgHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxHeartRate {
     final field = getField(SegmentLapMaxHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxHeartRate(int? value) {
    final field = getField(SegmentLapMaxHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgCadence {
     final field = getField(SegmentLapAvgCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgCadence(int? value) {
    final field = getField(SegmentLapAvgCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxCadence {
     final field = getField(SegmentLapMaxCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxCadence(int? value) {
    final field = getField(SegmentLapMaxCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgPower {
     final field = getField(SegmentLapAvgPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgPower(int? value) {
    final field = getField(SegmentLapAvgPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxPower {
     final field = getField(SegmentLapMaxPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxPower(int? value) {
    final field = getField(SegmentLapMaxPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get totalAscent {
     final field = getField(SegmentLapTotalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalAscent(int? value) {
    final field = getField(SegmentLapTotalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get totalDescent {
     final field = getField(SegmentLapTotalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalDescent(int? value) {
    final field = getField(SegmentLapTotalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  Sport? get sport {
     final field = getField(SegmentLapSportField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SportExt.fromValue(value);
    } else {
      return null;
    }
  }
   set sport(Sport? value) {
    final field = getField(SegmentLapSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  int? get eventGroup {
     final field = getField(SegmentLapEventGroupField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set eventGroup(int? value) {
    final field = getField(SegmentLapEventGroupField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get necLat {
     final field = getField(SegmentLapNecLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set necLat(double? value) {
    final field = getField(SegmentLapNecLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get necLong {
     final field = getField(SegmentLapNecLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set necLong(double? value) {
    final field = getField(SegmentLapNecLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get swcLat {
     final field = getField(SegmentLapSwcLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set swcLat(double? value) {
    final field = getField(SegmentLapSwcLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get swcLong {
     final field = getField(SegmentLapSwcLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set swcLong(double? value) {
    final field = getField(SegmentLapSwcLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  String? get segmentLapName {
     final field = getField(SegmentLapNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set segmentLapName(String? value) {
    final field = getField(SegmentLapNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get normalizedPower {
     final field = getField(SegmentLapNormalizedPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set normalizedPower(int? value) {
    final field = getField(SegmentLapNormalizedPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get leftRightBalance {
     final field = getField(SegmentLapLeftRightBalanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set leftRightBalance(int? value) {
    final field = getField(SegmentLapLeftRightBalanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  SubSport? get subSport {
     final field = getField(SegmentLapSubSportField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SubSportExt.fromValue(value);
    } else {
      return null;
    }
  }
   set subSport(SubSport? value) {
    final field = getField(SegmentLapSubSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  int? get totalWork {
     final field = getField(SegmentLapTotalWorkField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalWork(int? value) {
    final field = getField(SegmentLapTotalWorkField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgAltitude {
     final field = getField(SegmentLapAvgAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgAltitude(double? value) {
    final field = getField(SegmentLapAvgAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxAltitude {
     final field = getField(SegmentLapMaxAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxAltitude(double? value) {
    final field = getField(SegmentLapMaxAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get gpsAccuracy {
     final field = getField(SegmentLapGpsAccuracyField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set gpsAccuracy(int? value) {
    final field = getField(SegmentLapGpsAccuracyField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgGrade {
     final field = getField(SegmentLapAvgGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgGrade(double? value) {
    final field = getField(SegmentLapAvgGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgPosGrade {
     final field = getField(SegmentLapAvgPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgPosGrade(double? value) {
    final field = getField(SegmentLapAvgPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgNegGrade {
     final field = getField(SegmentLapAvgNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgNegGrade(double? value) {
    final field = getField(SegmentLapAvgNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxPosGrade {
     final field = getField(SegmentLapMaxPosGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxPosGrade(double? value) {
    final field = getField(SegmentLapMaxPosGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxNegGrade {
     final field = getField(SegmentLapMaxNegGradeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxNegGrade(double? value) {
    final field = getField(SegmentLapMaxNegGradeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgTemperature {
     final field = getField(SegmentLapAvgTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgTemperature(int? value) {
    final field = getField(SegmentLapAvgTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxTemperature {
     final field = getField(SegmentLapMaxTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxTemperature(int? value) {
    final field = getField(SegmentLapMaxTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalMovingTime {
     final field = getField(SegmentLapTotalMovingTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalMovingTime(double? value) {
    final field = getField(SegmentLapTotalMovingTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgPosVerticalSpeed {
     final field = getField(SegmentLapAvgPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgPosVerticalSpeed(double? value) {
    final field = getField(SegmentLapAvgPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgNegVerticalSpeed {
     final field = getField(SegmentLapAvgNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgNegVerticalSpeed(double? value) {
    final field = getField(SegmentLapAvgNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxPosVerticalSpeed {
     final field = getField(SegmentLapMaxPosVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxPosVerticalSpeed(double? value) {
    final field = getField(SegmentLapMaxPosVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxNegVerticalSpeed {
     final field = getField(SegmentLapMaxNegVerticalSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxNegVerticalSpeed(double? value) {
    final field = getField(SegmentLapMaxNegVerticalSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get timeInHrZone {
     final field = getField(SegmentLapTimeInHrZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set timeInHrZone(double? value) {
    final field = getField(SegmentLapTimeInHrZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get timeInSpeedZone {
     final field = getField(SegmentLapTimeInSpeedZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set timeInSpeedZone(double? value) {
    final field = getField(SegmentLapTimeInSpeedZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get timeInCadenceZone {
     final field = getField(SegmentLapTimeInCadenceZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set timeInCadenceZone(double? value) {
    final field = getField(SegmentLapTimeInCadenceZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get timeInPowerZone {
     final field = getField(SegmentLapTimeInPowerZoneField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set timeInPowerZone(double? value) {
    final field = getField(SegmentLapTimeInPowerZoneField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get repetitionNum {
     final field = getField(SegmentLapRepetitionNumField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set repetitionNum(int? value) {
    final field = getField(SegmentLapRepetitionNumField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get minAltitude {
     final field = getField(SegmentLapMinAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set minAltitude(double? value) {
    final field = getField(SegmentLapMinAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get minHeartRate {
     final field = getField(SegmentLapMinHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set minHeartRate(int? value) {
    final field = getField(SegmentLapMinHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get activeTime {
     final field = getField(SegmentLapActiveTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set activeTime(double? value) {
    final field = getField(SegmentLapActiveTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get workoutStepIndex {
     final field = getField(SegmentLapWorkoutStepIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set workoutStepIndex(int? value) {
    final field = getField(SegmentLapWorkoutStepIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  SportEvent? get sportEvent {
     final field = getField(SegmentLapSportEventField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SportEventExt.fromValue(value);
    } else {
      return null;
    }
  }
   set sportEvent(SportEvent? value) {
    final field = getField(SegmentLapSportEventField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  double? get avgLeftTorqueEffectiveness {
     final field = getField(SegmentLapAvgLeftTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgLeftTorqueEffectiveness(double? value) {
    final field = getField(SegmentLapAvgLeftTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgRightTorqueEffectiveness {
     final field = getField(SegmentLapAvgRightTorqueEffectivenessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgRightTorqueEffectiveness(double? value) {
    final field = getField(SegmentLapAvgRightTorqueEffectivenessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgLeftPedalSmoothness {
     final field = getField(SegmentLapAvgLeftPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgLeftPedalSmoothness(double? value) {
    final field = getField(SegmentLapAvgLeftPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgRightPedalSmoothness {
     final field = getField(SegmentLapAvgRightPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgRightPedalSmoothness(double? value) {
    final field = getField(SegmentLapAvgRightPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgCombinedPedalSmoothness {
     final field = getField(SegmentLapAvgCombinedPedalSmoothnessField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgCombinedPedalSmoothness(double? value) {
    final field = getField(SegmentLapAvgCombinedPedalSmoothnessField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  SegmentLapStatus? get status {
     final field = getField(SegmentLapStatusField.ID);
 if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SegmentLapStatusExt.fromValue(value);
    } else {
      return null;
    }
  }
   set status(SegmentLapStatus? value) {
    final field = getField(SegmentLapStatusField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }
  String? get uuid {
     final field = getField(SegmentLapUuidField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set uuid(String? value) {
    final field = getField(SegmentLapUuidField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgFractionalCadence {
     final field = getField(SegmentLapAvgFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgFractionalCadence(double? value) {
    final field = getField(SegmentLapAvgFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxFractionalCadence {
     final field = getField(SegmentLapMaxFractionalCadenceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxFractionalCadence(double? value) {
    final field = getField(SegmentLapMaxFractionalCadenceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalFractionalCycles {
     final field = getField(SegmentLapTotalFractionalCyclesField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalFractionalCycles(double? value) {
    final field = getField(SegmentLapTotalFractionalCyclesField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get frontGearShiftCount {
     final field = getField(SegmentLapFrontGearShiftCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set frontGearShiftCount(int? value) {
    final field = getField(SegmentLapFrontGearShiftCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get rearGearShiftCount {
     final field = getField(SegmentLapRearGearShiftCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set rearGearShiftCount(int? value) {
    final field = getField(SegmentLapRearGearShiftCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get timeStanding {
     final field = getField(SegmentLapTimeStandingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set timeStanding(double? value) {
    final field = getField(SegmentLapTimeStandingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get standCount {
     final field = getField(SegmentLapStandCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set standCount(int? value) {
    final field = getField(SegmentLapStandCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgLeftPco {
     final field = getField(SegmentLapAvgLeftPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgLeftPco(int? value) {
    final field = getField(SegmentLapAvgLeftPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgRightPco {
     final field = getField(SegmentLapAvgRightPcoField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgRightPco(int? value) {
    final field = getField(SegmentLapAvgRightPcoField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgLeftPowerPhase {
     final field = getField(SegmentLapAvgLeftPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgLeftPowerPhase(double? value) {
    final field = getField(SegmentLapAvgLeftPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgLeftPowerPhasePeak {
     final field = getField(SegmentLapAvgLeftPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgLeftPowerPhasePeak(double? value) {
    final field = getField(SegmentLapAvgLeftPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgRightPowerPhase {
     final field = getField(SegmentLapAvgRightPowerPhaseField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgRightPowerPhase(double? value) {
    final field = getField(SegmentLapAvgRightPowerPhaseField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgRightPowerPhasePeak {
     final field = getField(SegmentLapAvgRightPowerPhasePeakField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgRightPowerPhasePeak(double? value) {
    final field = getField(SegmentLapAvgRightPowerPhasePeakField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgPowerPosition {
     final field = getField(SegmentLapAvgPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgPowerPosition(int? value) {
    final field = getField(SegmentLapAvgPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxPowerPosition {
     final field = getField(SegmentLapMaxPowerPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxPowerPosition(int? value) {
    final field = getField(SegmentLapMaxPowerPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get avgCadencePosition {
     final field = getField(SegmentLapAvgCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgCadencePosition(int? value) {
    final field = getField(SegmentLapAvgCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get maxCadencePosition {
     final field = getField(SegmentLapMaxCadencePositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxCadencePosition(int? value) {
    final field = getField(SegmentLapMaxCadencePositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get manufacturer {
     final field = getField(SegmentLapManufacturerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set manufacturer(int? value) {
    final field = getField(SegmentLapManufacturerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalGrit {
     final field = getField(SegmentLapTotalGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalGrit(double? value) {
    final field = getField(SegmentLapTotalGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalFlow {
     final field = getField(SegmentLapTotalFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalFlow(double? value) {
    final field = getField(SegmentLapTotalFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgGrit {
     final field = getField(SegmentLapAvgGritField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgGrit(double? value) {
    final field = getField(SegmentLapAvgGritField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgFlow {
     final field = getField(SegmentLapAvgFlowField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgFlow(double? value) {
    final field = getField(SegmentLapAvgFlowField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalFractionalAscent {
     final field = getField(SegmentLapTotalFractionalAscentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalFractionalAscent(double? value) {
    final field = getField(SegmentLapTotalFractionalAscentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get totalFractionalDescent {
     final field = getField(SegmentLapTotalFractionalDescentField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set totalFractionalDescent(double? value) {
    final field = getField(SegmentLapTotalFractionalDescentField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class SegmentLapEventField extends Field {
 SegmentLapEventField({int size = 0, bool growable = true})
      : super(
            name: 'event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class SegmentLapEventTypeField extends Field {
 SegmentLapEventTypeField({int size = 0, bool growable = true})
      : super(
            name: 'event_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class SegmentLapStartTimeField extends Field {
 SegmentLapStartTimeField({int size = 0, bool growable = true})
      : super(
            name: 'start_time',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class SegmentLapStartPositionLatField extends Field {
 SegmentLapStartPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}
class SegmentLapStartPositionLongField extends Field {
 SegmentLapStartPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'start_position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 4;
}
class SegmentLapEndPositionLatField extends Field {
 SegmentLapEndPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'end_position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 5;
}
class SegmentLapEndPositionLongField extends Field {
 SegmentLapEndPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'end_position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 6;
}
class SegmentLapTotalElapsedTimeField extends Field {
 SegmentLapTotalElapsedTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_elapsed_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 7;
}
class SegmentLapTotalTimerTimeField extends Field {
 SegmentLapTotalTimerTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_timer_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 8;
}
class SegmentLapTotalDistanceField extends Field {
 SegmentLapTotalDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'total_distance',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 9;
}
class SegmentLapTotalCyclesField extends Field {
 SegmentLapTotalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_cycles',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: [
       SubField(
                  name: 'total_strokes',
                  type: BaseType.UINT32,
                  scale: 1,
                  offset: 0,
                  units: 'strokes',
                  referenceMap: {
                  SegmentLapSportField.ID: [2]
                  })
            ]
 );

  static const ID = 10;
}
class SegmentLapTotalCaloriesField extends Field {
 SegmentLapTotalCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 11;
}
class SegmentLapTotalFatCaloriesField extends Field {
 SegmentLapTotalFatCaloriesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fat_calories',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kcal',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 12;
}
class SegmentLapAvgSpeedField extends Field {
 SegmentLapAvgSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 13;
}
class SegmentLapMaxSpeedField extends Field {
 SegmentLapMaxSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 14;
}
class SegmentLapAvgHeartRateField extends Field {
 SegmentLapAvgHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'avg_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 15;
}
class SegmentLapMaxHeartRateField extends Field {
 SegmentLapMaxHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'max_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 16;
}
class SegmentLapAvgCadenceField extends Field {
 SegmentLapAvgCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 17;
}
class SegmentLapMaxCadenceField extends Field {
 SegmentLapMaxCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 18;
}
class SegmentLapAvgPowerField extends Field {
 SegmentLapAvgPowerField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 19;
}
class SegmentLapMaxPowerField extends Field {
 SegmentLapMaxPowerField({int size = 0, bool growable = true})
      : super(
            name: 'max_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 20;
}
class SegmentLapTotalAscentField extends Field {
 SegmentLapTotalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_ascent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 21;
}
class SegmentLapTotalDescentField extends Field {
 SegmentLapTotalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_descent',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 22;
}
class SegmentLapSportField extends Field {
 SegmentLapSportField({int size = 0, bool growable = true})
      : super(
            name: 'sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 23;
}
class SegmentLapEventGroupField extends Field {
 SegmentLapEventGroupField({int size = 0, bool growable = true})
      : super(
            name: 'event_group',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 24;
}
class SegmentLapNecLatField extends Field {
 SegmentLapNecLatField({int size = 0, bool growable = true})
      : super(
            name: 'nec_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 25;
}
class SegmentLapNecLongField extends Field {
 SegmentLapNecLongField({int size = 0, bool growable = true})
      : super(
            name: 'nec_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 26;
}
class SegmentLapSwcLatField extends Field {
 SegmentLapSwcLatField({int size = 0, bool growable = true})
      : super(
            name: 'swc_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 27;
}
class SegmentLapSwcLongField extends Field {
 SegmentLapSwcLongField({int size = 0, bool growable = true})
      : super(
            name: 'swc_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 28;
}
class SegmentLapNameField extends Field {
 SegmentLapNameField({int size = 0, bool growable = true})
      : super(
            name: 'name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 29;
}
class SegmentLapNormalizedPowerField extends Field {
 SegmentLapNormalizedPowerField({int size = 0, bool growable = true})
      : super(
            name: 'normalized_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 30;
}
class SegmentLapLeftRightBalanceField extends Field {
 SegmentLapLeftRightBalanceField({int size = 0, bool growable = true})
      : super(
            name: 'left_right_balance',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 31;
}
class SegmentLapSubSportField extends Field {
 SegmentLapSubSportField({int size = 0, bool growable = true})
      : super(
            name: 'sub_sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 32;
}
class SegmentLapTotalWorkField extends Field {
 SegmentLapTotalWorkField({int size = 0, bool growable = true})
      : super(
            name: 'total_work',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'J',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 33;
}
class SegmentLapAvgAltitudeField extends Field {
 SegmentLapAvgAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 34;
}
class SegmentLapMaxAltitudeField extends Field {
 SegmentLapMaxAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'max_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 35;
}
class SegmentLapGpsAccuracyField extends Field {
 SegmentLapGpsAccuracyField({int size = 0, bool growable = true})
      : super(
            name: 'gps_accuracy',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 36;
}
class SegmentLapAvgGradeField extends Field {
 SegmentLapAvgGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 37;
}
class SegmentLapAvgPosGradeField extends Field {
 SegmentLapAvgPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 38;
}
class SegmentLapAvgNegGradeField extends Field {
 SegmentLapAvgNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 39;
}
class SegmentLapMaxPosGradeField extends Field {
 SegmentLapMaxPosGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 40;
}
class SegmentLapMaxNegGradeField extends Field {
 SegmentLapMaxNegGradeField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_grade',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: '%',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 41;
}
class SegmentLapAvgTemperatureField extends Field {
 SegmentLapAvgTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'avg_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 42;
}
class SegmentLapMaxTemperatureField extends Field {
 SegmentLapMaxTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'max_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 43;
}
class SegmentLapTotalMovingTimeField extends Field {
 SegmentLapTotalMovingTimeField({int size = 0, bool growable = true})
      : super(
            name: 'total_moving_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 44;
}
class SegmentLapAvgPosVerticalSpeedField extends Field {
 SegmentLapAvgPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 45;
}
class SegmentLapAvgNegVerticalSpeedField extends Field {
 SegmentLapAvgNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'avg_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 46;
}
class SegmentLapMaxPosVerticalSpeedField extends Field {
 SegmentLapMaxPosVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_pos_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 47;
}
class SegmentLapMaxNegVerticalSpeedField extends Field {
 SegmentLapMaxNegVerticalSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'max_neg_vertical_speed',
            id: ID,
            type: BaseType.SINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 48;
}
class SegmentLapTimeInHrZoneField extends Field {
 SegmentLapTimeInHrZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_hr_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 49;
}
class SegmentLapTimeInSpeedZoneField extends Field {
 SegmentLapTimeInSpeedZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_speed_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 50;
}
class SegmentLapTimeInCadenceZoneField extends Field {
 SegmentLapTimeInCadenceZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_cadence_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 51;
}
class SegmentLapTimeInPowerZoneField extends Field {
 SegmentLapTimeInPowerZoneField({int size = 0, bool growable = true})
      : super(
            name: 'time_in_power_zone',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 52;
}
class SegmentLapRepetitionNumField extends Field {
 SegmentLapRepetitionNumField({int size = 0, bool growable = true})
      : super(
            name: 'repetition_num',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 53;
}
class SegmentLapMinAltitudeField extends Field {
 SegmentLapMinAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'min_altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 54;
}
class SegmentLapMinHeartRateField extends Field {
 SegmentLapMinHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'min_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 55;
}
class SegmentLapActiveTimeField extends Field {
 SegmentLapActiveTimeField({int size = 0, bool growable = true})
      : super(
            name: 'active_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 56;
}
class SegmentLapWorkoutStepIndexField extends Field {
 SegmentLapWorkoutStepIndexField({int size = 0, bool growable = true})
      : super(
            name: 'wkt_step_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 57;
}
class SegmentLapSportEventField extends Field {
 SegmentLapSportEventField({int size = 0, bool growable = true})
      : super(
            name: 'sport_event',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 58;
}
class SegmentLapAvgLeftTorqueEffectivenessField extends Field {
 SegmentLapAvgLeftTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 59;
}
class SegmentLapAvgRightTorqueEffectivenessField extends Field {
 SegmentLapAvgRightTorqueEffectivenessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_torque_effectiveness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 60;
}
class SegmentLapAvgLeftPedalSmoothnessField extends Field {
 SegmentLapAvgLeftPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 61;
}
class SegmentLapAvgRightPedalSmoothnessField extends Field {
 SegmentLapAvgRightPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 62;
}
class SegmentLapAvgCombinedPedalSmoothnessField extends Field {
 SegmentLapAvgCombinedPedalSmoothnessField({int size = 0, bool growable = true})
      : super(
            name: 'avg_combined_pedal_smoothness',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 2,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 63;
}
class SegmentLapStatusField extends Field {
 SegmentLapStatusField({int size = 0, bool growable = true})
      : super(
            name: 'status',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 64;
}
class SegmentLapUuidField extends Field {
 SegmentLapUuidField({int size = 0, bool growable = true})
      : super(
            name: 'uuid',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 65;
}
class SegmentLapAvgFractionalCadenceField extends Field {
 SegmentLapAvgFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'avg_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 66;
}
class SegmentLapMaxFractionalCadenceField extends Field {
 SegmentLapMaxFractionalCadenceField({int size = 0, bool growable = true})
      : super(
            name: 'max_fractional_cadence',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 67;
}
class SegmentLapTotalFractionalCyclesField extends Field {
 SegmentLapTotalFractionalCyclesField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_cycles',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 128,
            size: size,
            units: 'cycles',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 68;
}
class SegmentLapFrontGearShiftCountField extends Field {
 SegmentLapFrontGearShiftCountField({int size = 0, bool growable = true})
      : super(
            name: 'front_gear_shift_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 69;
}
class SegmentLapRearGearShiftCountField extends Field {
 SegmentLapRearGearShiftCountField({int size = 0, bool growable = true})
      : super(
            name: 'rear_gear_shift_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 70;
}
class SegmentLapTimeStandingField extends Field {
 SegmentLapTimeStandingField({int size = 0, bool growable = true})
      : super(
            name: 'time_standing',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 71;
}
class SegmentLapStandCountField extends Field {
 SegmentLapStandCountField({int size = 0, bool growable = true})
      : super(
            name: 'stand_count',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 72;
}
class SegmentLapAvgLeftPcoField extends Field {
 SegmentLapAvgLeftPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 73;
}
class SegmentLapAvgRightPcoField extends Field {
 SegmentLapAvgRightPcoField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_pco',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'mm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 74;
}
class SegmentLapAvgLeftPowerPhaseField extends Field {
 SegmentLapAvgLeftPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 75;
}
class SegmentLapAvgLeftPowerPhasePeakField extends Field {
 SegmentLapAvgLeftPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_left_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 76;
}
class SegmentLapAvgRightPowerPhaseField extends Field {
 SegmentLapAvgRightPowerPhaseField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 77;
}
class SegmentLapAvgRightPowerPhasePeakField extends Field {
 SegmentLapAvgRightPowerPhasePeakField({int size = 0, bool growable = true})
      : super(
            name: 'avg_right_power_phase_peak',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 0.7111111,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 78;
}
class SegmentLapAvgPowerPositionField extends Field {
 SegmentLapAvgPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 79;
}
class SegmentLapMaxPowerPositionField extends Field {
 SegmentLapMaxPowerPositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_power_position',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'watts',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 80;
}
class SegmentLapAvgCadencePositionField extends Field {
 SegmentLapAvgCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'avg_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 81;
}
class SegmentLapMaxCadencePositionField extends Field {
 SegmentLapMaxCadencePositionField({int size = 0, bool growable = true})
      : super(
            name: 'max_cadence_position',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'rpm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 82;
}
class SegmentLapManufacturerField extends Field {
 SegmentLapManufacturerField({int size = 0, bool growable = true})
      : super(
            name: 'manufacturer',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 83;
}
class SegmentLapTotalGritField extends Field {
 SegmentLapTotalGritField({int size = 0, bool growable = true})
      : super(
            name: 'total_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 84;
}
class SegmentLapTotalFlowField extends Field {
 SegmentLapTotalFlowField({int size = 0, bool growable = true})
      : super(
            name: 'total_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 85;
}
class SegmentLapAvgGritField extends Field {
 SegmentLapAvgGritField({int size = 0, bool growable = true})
      : super(
            name: 'avg_grit',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'kGrit',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 86;
}
class SegmentLapAvgFlowField extends Field {
 SegmentLapAvgFlowField({int size = 0, bool growable = true})
      : super(
            name: 'avg_flow',
            id: ID,
            type: BaseType.FLOAT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 'Flow',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 87;
}
class SegmentLapTotalFractionalAscentField extends Field {
 SegmentLapTotalFractionalAscentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_ascent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 89;
}
class SegmentLapTotalFractionalDescentField extends Field {
 SegmentLapTotalFractionalDescentField({int size = 0, bool growable = true})
      : super(
            name: 'total_fractional_descent',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 90;
}