/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';

class ZonesTargetMessage extends DataMessage {
  ZonesTargetMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: ZonesTargetMessage.NAME,
            globalId: ZonesTargetMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              ZonesTargetMaxHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(ZonesTargetMaxHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ZonesTargetThresholdHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ZonesTargetThresholdHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ZonesTargetFunctionalThresholdPowerField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              ZonesTargetFunctionalThresholdPowerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ZonesTargetHrCalcTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(ZonesTargetHrCalcTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              ZonesTargetPwrCalcTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(ZonesTargetPwrCalcTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 7;
  static const NAME = 'zones_target';

  final bool growable;

  /// Returns an instance of ZonesTargetMessage from a bytes list.
  static ZonesTargetMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = ZonesTargetMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the maxHeartRate field. Returns null if the field is not defined in the message.
  int? get maxHeartRate {
    final field = getField(ZonesTargetMaxHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the maxHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set maxHeartRate(int? value) {
    final field = getField(ZonesTargetMaxHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the thresholdHeartRate field. Returns null if the field is not defined in the message.
  int? get thresholdHeartRate {
    final field = getField(ZonesTargetThresholdHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the thresholdHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set thresholdHeartRate(int? value) {
    final field = getField(ZonesTargetThresholdHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the functionalThresholdPower field. Returns null if the field is not defined in the message.
  int? get functionalThresholdPower {
    final field = getField(ZonesTargetFunctionalThresholdPowerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the functionalThresholdPower field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set functionalThresholdPower(int? value) {
    final field = getField(ZonesTargetFunctionalThresholdPowerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the hrCalcType field. Returns null if the field is not defined in the message.
  HrZoneCalc? get hrCalcType {
    final field = getField(ZonesTargetHrCalcTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return HrZoneCalcExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the hrCalcType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set hrCalcType(HrZoneCalc? value) {
    final field = getField(ZonesTargetHrCalcTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the pwrCalcType field. Returns null if the field is not defined in the message.
  PwrZoneCalc? get pwrCalcType {
    final field = getField(ZonesTargetPwrCalcTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return PwrZoneCalcExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the pwrCalcType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set pwrCalcType(PwrZoneCalc? value) {
    final field = getField(ZonesTargetPwrCalcTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class ZonesTargetMaxHeartRateField extends Field {
  ZonesTargetMaxHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'max_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class ZonesTargetThresholdHeartRateField extends Field {
  ZonesTargetThresholdHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'threshold_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class ZonesTargetFunctionalThresholdPowerField extends Field {
  ZonesTargetFunctionalThresholdPowerField({int size = 0, bool growable = true})
      : super(
            name: 'functional_threshold_power',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class ZonesTargetHrCalcTypeField extends Field {
  ZonesTargetHrCalcTypeField({int size = 0, bool growable = true})
      : super(
            name: 'hr_calc_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class ZonesTargetPwrCalcTypeField extends Field {
  ZonesTargetPwrCalcTypeField({int size = 0, bool growable = true})
      : super(
            name: 'pwr_calc_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}
