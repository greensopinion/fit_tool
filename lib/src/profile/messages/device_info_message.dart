/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class DeviceInfoMessage extends DataMessage {
  DeviceInfoMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: DeviceInfoMessage.NAME,
            globalId: DeviceInfoMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoDeviceIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoDeviceIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoDeviceTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoDeviceTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoManufacturerField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoManufacturerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoSerialNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoSerialNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoProductField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoProductField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoSoftwareVersionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceInfoSoftwareVersionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoHardwareVersionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceInfoHardwareVersionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoCumOperatingTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceInfoCumOperatingTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoBatteryVoltageField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoBatteryVoltageField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoBatteryStatusField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoBatteryStatusField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoSensorPositionField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoSensorPositionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoDescriptorField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoDescriptorField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoAntTransmissionTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceInfoAntTransmissionTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoAntDeviceNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeviceInfoAntDeviceNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoAntNetworkField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoAntNetworkField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoSourceTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoSourceTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeviceInfoProductNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(DeviceInfoProductNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 23;
  static const NAME = 'device_info';

  final bool growable;

  /// Returns an instance of DeviceInfoMessage from a bytes list.
  static DeviceInfoMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = DeviceInfoMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the deviceIndex field. Returns null if the field is not defined in the message.
  int? get deviceIndex {
    final field = getField(DeviceInfoDeviceIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set deviceIndex(int? value) {
    final field = getField(DeviceInfoDeviceIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the deviceType field. Returns null if the field is not defined in the message.
  int? get deviceType {
    final field = getField(DeviceInfoDeviceTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set deviceType(int? value) {
    final field = getField(DeviceInfoDeviceTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Get the value of the subfield antplusDeviceType
  int? get antplusDeviceType {
    final field = getField(DeviceInfoDeviceTypeField.ID);
    final typeField = getField(DeviceInfoSourceTypeField.ID);

    final isSubFieldValid =
        typeField != null && [1].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceType subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set antplusDeviceType(int? value) {
    final field = getField(DeviceInfoDeviceTypeField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Get the value of the subfield antDeviceType
  int? get antDeviceType {
    final field = getField(DeviceInfoDeviceTypeField.ID);
    final typeField = getField(DeviceInfoSourceTypeField.ID);

    final isSubFieldValid =
        typeField != null && [0].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the deviceType subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set antDeviceType(int? value) {
    final field = getField(DeviceInfoDeviceTypeField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the manufacturer field. Returns null if the field is not defined in the message.
  int? get manufacturer {
    final field = getField(DeviceInfoManufacturerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the manufacturer field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set manufacturer(int? value) {
    final field = getField(DeviceInfoManufacturerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the serialNumber field. Returns null if the field is not defined in the message.
  int? get serialNumber {
    final field = getField(DeviceInfoSerialNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the serialNumber field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set serialNumber(int? value) {
    final field = getField(DeviceInfoSerialNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the product field. Returns null if the field is not defined in the message.
  int? get product {
    final field = getField(DeviceInfoProductField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the product field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set product(int? value) {
    final field = getField(DeviceInfoProductField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Get the value of the subfield faveroProduct
  int? get faveroProduct {
    final field = getField(DeviceInfoProductField.ID);
    final typeField = getField(DeviceInfoManufacturerField.ID);

    final isSubFieldValid =
        typeField != null && [263].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the product subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set faveroProduct(int? value) {
    final field = getField(DeviceInfoProductField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Get the value of the subfield garminProduct
  int? get garminProduct {
    final field = getField(DeviceInfoProductField.ID);
    final typeField = getField(DeviceInfoManufacturerField.ID);

    final isSubFieldValid =
        typeField != null && [1, 15, 13, 89].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the product subfield with [value]. Throws [FieldNotDefinedError] if the subfield is not defined in the message.
  set garminProduct(int? value) {
    final field = getField(DeviceInfoProductField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the softwareVersion field. Returns null if the field is not defined in the message.
  double? get softwareVersion {
    final field = getField(DeviceInfoSoftwareVersionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the softwareVersion field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set softwareVersion(double? value) {
    final field = getField(DeviceInfoSoftwareVersionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the hardwareVersion field. Returns null if the field is not defined in the message.
  int? get hardwareVersion {
    final field = getField(DeviceInfoHardwareVersionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the hardwareVersion field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set hardwareVersion(int? value) {
    final field = getField(DeviceInfoHardwareVersionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the cumOperatingTime field. Returns null if the field is not defined in the message.
  int? get cumOperatingTime {
    final field = getField(DeviceInfoCumOperatingTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the cumOperatingTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set cumOperatingTime(int? value) {
    final field = getField(DeviceInfoCumOperatingTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the batteryVoltage field. Returns null if the field is not defined in the message.
  double? get batteryVoltage {
    final field = getField(DeviceInfoBatteryVoltageField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the batteryVoltage field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set batteryVoltage(double? value) {
    final field = getField(DeviceInfoBatteryVoltageField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the batteryStatus field. Returns null if the field is not defined in the message.
  int? get batteryStatus {
    final field = getField(DeviceInfoBatteryStatusField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the batteryStatus field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set batteryStatus(int? value) {
    final field = getField(DeviceInfoBatteryStatusField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the sensorPosition field. Returns null if the field is not defined in the message.
  BodyLocation? get sensorPosition {
    final field = getField(DeviceInfoSensorPositionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return BodyLocationExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the sensorPosition field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sensorPosition(BodyLocation? value) {
    final field = getField(DeviceInfoSensorPositionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the descriptor field. Returns null if the field is not defined in the message.
  String? get descriptor {
    final field = getField(DeviceInfoDescriptorField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the descriptor field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set descriptor(String? value) {
    final field = getField(DeviceInfoDescriptorField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the antTransmissionType field. Returns null if the field is not defined in the message.
  int? get antTransmissionType {
    final field = getField(DeviceInfoAntTransmissionTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the antTransmissionType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set antTransmissionType(int? value) {
    final field = getField(DeviceInfoAntTransmissionTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the antDeviceNumber field. Returns null if the field is not defined in the message.
  int? get antDeviceNumber {
    final field = getField(DeviceInfoAntDeviceNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the antDeviceNumber field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set antDeviceNumber(int? value) {
    final field = getField(DeviceInfoAntDeviceNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the antNetwork field. Returns null if the field is not defined in the message.
  AntNetwork? get antNetwork {
    final field = getField(DeviceInfoAntNetworkField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return AntNetworkExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the antNetwork field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set antNetwork(AntNetwork? value) {
    final field = getField(DeviceInfoAntNetworkField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the sourceType field. Returns null if the field is not defined in the message.
  SourceType? get sourceType {
    final field = getField(DeviceInfoSourceTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SourceTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the sourceType field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sourceType(SourceType? value) {
    final field = getField(DeviceInfoSourceTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the productName field. Returns null if the field is not defined in the message.
  String? get productName {
    final field = getField(DeviceInfoProductNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the productName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set productName(String? value) {
    final field = getField(DeviceInfoProductNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class DeviceInfoDeviceIndexField extends Field {
  DeviceInfoDeviceIndexField({int size = 0, bool growable = true})
      : super(
            name: 'device_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class DeviceInfoDeviceTypeField extends Field {
  DeviceInfoDeviceTypeField({int size = 0, bool growable = true})
      : super(
            name: 'device_type',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'antplus_device_type',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    DeviceInfoSourceTypeField.ID: [1]
                  }),
              SubField(
                  name: 'ant_device_type',
                  type: BaseType.UINT8,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    DeviceInfoSourceTypeField.ID: [0]
                  })
            ]);

  static const ID = 1;
}

class DeviceInfoManufacturerField extends Field {
  DeviceInfoManufacturerField({int size = 0, bool growable = true})
      : super(
            name: 'manufacturer',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class DeviceInfoSerialNumberField extends Field {
  DeviceInfoSerialNumberField({int size = 0, bool growable = true})
      : super(
            name: 'serial_number',
            id: ID,
            type: BaseType.UINT32Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class DeviceInfoProductField extends Field {
  DeviceInfoProductField({int size = 0, bool growable = true})
      : super(
            name: 'product',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'favero_product',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    DeviceInfoManufacturerField.ID: [263]
                  }),
              SubField(
                  name: 'garmin_product',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    DeviceInfoManufacturerField.ID: [1, 15, 13, 89]
                  })
            ]);

  static const ID = 4;
}

class DeviceInfoSoftwareVersionField extends Field {
  DeviceInfoSoftwareVersionField({int size = 0, bool growable = true})
      : super(
            name: 'software_version',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class DeviceInfoHardwareVersionField extends Field {
  DeviceInfoHardwareVersionField({int size = 0, bool growable = true})
      : super(
            name: 'hardware_version',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class DeviceInfoCumOperatingTimeField extends Field {
  DeviceInfoCumOperatingTimeField({int size = 0, bool growable = true})
      : super(
            name: 'cum_operating_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class DeviceInfoBatteryVoltageField extends Field {
  DeviceInfoBatteryVoltageField({int size = 0, bool growable = true})
      : super(
            name: 'battery_voltage',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 256,
            size: size,
            units: 'V',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class DeviceInfoBatteryStatusField extends Field {
  DeviceInfoBatteryStatusField({int size = 0, bool growable = true})
      : super(
            name: 'battery_status',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class DeviceInfoSensorPositionField extends Field {
  DeviceInfoSensorPositionField({int size = 0, bool growable = true})
      : super(
            name: 'sensor_position',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 18;
}

class DeviceInfoDescriptorField extends Field {
  DeviceInfoDescriptorField({int size = 0, bool growable = true})
      : super(
            name: 'descriptor',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 19;
}

class DeviceInfoAntTransmissionTypeField extends Field {
  DeviceInfoAntTransmissionTypeField({int size = 0, bool growable = true})
      : super(
            name: 'ant_transmission_type',
            id: ID,
            type: BaseType.UINT8Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 20;
}

class DeviceInfoAntDeviceNumberField extends Field {
  DeviceInfoAntDeviceNumberField({int size = 0, bool growable = true})
      : super(
            name: 'ant_device_number',
            id: ID,
            type: BaseType.UINT16Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 21;
}

class DeviceInfoAntNetworkField extends Field {
  DeviceInfoAntNetworkField({int size = 0, bool growable = true})
      : super(
            name: 'ant_network',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 22;
}

class DeviceInfoSourceTypeField extends Field {
  DeviceInfoSourceTypeField({int size = 0, bool growable = true})
      : super(
            name: 'source_type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 25;
}

class DeviceInfoProductNameField extends Field {
  DeviceInfoProductNameField({int size = 0, bool growable = true})
      : super(
            name: 'product_name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 27;
}
