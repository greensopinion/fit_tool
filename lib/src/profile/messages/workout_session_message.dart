/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class WorkoutSessionMessage extends DataMessage {
  WorkoutSessionMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: WorkoutSessionMessage.NAME,
            globalId: WorkoutSessionMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutSessionSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutSessionSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutSessionSubSportField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutSessionSubSportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutSessionNumValidStepsField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutSessionNumValidStepsField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutSessionFirstStepIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutSessionFirstStepIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutSessionPoolLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(WorkoutSessionPoolLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WorkoutSessionPoolLengthUnitField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WorkoutSessionPoolLengthUnitField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 158;
  static const NAME = 'workout_session';

  final bool growable;

  /// Returns an instance of WorkoutSessionMessage from a bytes list.
  static WorkoutSessionMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = WorkoutSessionMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the sport field. Returns null if the field is not defined in the message.
  Sport? get sport {
    final field = getField(WorkoutSessionSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SportExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the sport field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sport(Sport? value) {
    final field = getField(WorkoutSessionSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the subSport field. Returns null if the field is not defined in the message.
  SubSport? get subSport {
    final field = getField(WorkoutSessionSubSportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return SubSportExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the subSport field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set subSport(SubSport? value) {
    final field = getField(WorkoutSessionSubSportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the numValidSteps field. Returns null if the field is not defined in the message.
  int? get numValidSteps {
    final field = getField(WorkoutSessionNumValidStepsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the numValidSteps field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set numValidSteps(int? value) {
    final field = getField(WorkoutSessionNumValidStepsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the firstStepIndex field. Returns null if the field is not defined in the message.
  int? get firstStepIndex {
    final field = getField(WorkoutSessionFirstStepIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the firstStepIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set firstStepIndex(int? value) {
    final field = getField(WorkoutSessionFirstStepIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the poolLength field. Returns null if the field is not defined in the message.
  double? get poolLength {
    final field = getField(WorkoutSessionPoolLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the poolLength field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set poolLength(double? value) {
    final field = getField(WorkoutSessionPoolLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the poolLengthUnit field. Returns null if the field is not defined in the message.
  DisplayMeasure? get poolLengthUnit {
    final field = getField(WorkoutSessionPoolLengthUnitField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the poolLengthUnit field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set poolLengthUnit(DisplayMeasure? value) {
    final field = getField(WorkoutSessionPoolLengthUnitField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class WorkoutSessionSportField extends Field {
  WorkoutSessionSportField({int size = 0, bool growable = true})
      : super(
            name: 'sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class WorkoutSessionSubSportField extends Field {
  WorkoutSessionSubSportField({int size = 0, bool growable = true})
      : super(
            name: 'sub_sport',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class WorkoutSessionNumValidStepsField extends Field {
  WorkoutSessionNumValidStepsField({int size = 0, bool growable = true})
      : super(
            name: 'num_valid_steps',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class WorkoutSessionFirstStepIndexField extends Field {
  WorkoutSessionFirstStepIndexField({int size = 0, bool growable = true})
      : super(
            name: 'first_step_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class WorkoutSessionPoolLengthField extends Field {
  WorkoutSessionPoolLengthField({int size = 0, bool growable = true})
      : super(
            name: 'pool_length',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class WorkoutSessionPoolLengthUnitField extends Field {
  WorkoutSessionPoolLengthUnitField({int size = 0, bool growable = true})
      : super(
            name: 'pool_length_unit',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}
