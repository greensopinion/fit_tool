/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class WeatherConditionsMessage extends DataMessage {
  WeatherConditionsMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: WeatherConditionsMessage.NAME,
            globalId: WeatherConditionsMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage
                          ?.getFieldDefinition(TimestampField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsWeatherReportField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsWeatherReportField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsConditionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsConditionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsWindDirectionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsWindDirectionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsWindSpeedField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsWindSpeedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsPrecipitationProbabilityField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsPrecipitationProbabilityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsTemperatureFeelsLikeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsTemperatureFeelsLikeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsRelativeHumidityField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsRelativeHumidityField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsLocationField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsLocationField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsObservedAtTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsObservedAtTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsObservedLocationLatField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsObservedLocationLatField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsObservedLocationLongField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsObservedLocationLongField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsDayOfWeekField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsDayOfWeekField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsHighTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsHighTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              WeatherConditionsLowTemperatureField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              WeatherConditionsLowTemperatureField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 128;
  static const NAME = 'weather_conditions';

  final bool growable;

  /// Returns an instance of WeatherConditionsMessage from a bytes list.
  static WeatherConditionsMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        WeatherConditionsMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
    final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the weatherReport field. Returns null if the field is not defined in the message.
  WeatherReport? get weatherReport {
    final field = getField(WeatherConditionsWeatherReportField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return WeatherReportExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the weatherReport field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set weatherReport(WeatherReport? value) {
    final field = getField(WeatherConditionsWeatherReportField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the temperature field. Returns null if the field is not defined in the message.
  int? get temperature {
    final field = getField(WeatherConditionsTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the temperature field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set temperature(int? value) {
    final field = getField(WeatherConditionsTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the condition field. Returns null if the field is not defined in the message.
  WeatherStatus? get condition {
    final field = getField(WeatherConditionsConditionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return WeatherStatusExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the condition field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set condition(WeatherStatus? value) {
    final field = getField(WeatherConditionsConditionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the windDirection field. Returns null if the field is not defined in the message.
  int? get windDirection {
    final field = getField(WeatherConditionsWindDirectionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the windDirection field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set windDirection(int? value) {
    final field = getField(WeatherConditionsWindDirectionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the windSpeed field. Returns null if the field is not defined in the message.
  double? get windSpeed {
    final field = getField(WeatherConditionsWindSpeedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the windSpeed field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set windSpeed(double? value) {
    final field = getField(WeatherConditionsWindSpeedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the precipitationProbability field. Returns null if the field is not defined in the message.
  int? get precipitationProbability {
    final field = getField(WeatherConditionsPrecipitationProbabilityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the precipitationProbability field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set precipitationProbability(int? value) {
    final field = getField(WeatherConditionsPrecipitationProbabilityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the temperatureFeelsLike field. Returns null if the field is not defined in the message.
  int? get temperatureFeelsLike {
    final field = getField(WeatherConditionsTemperatureFeelsLikeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the temperatureFeelsLike field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set temperatureFeelsLike(int? value) {
    final field = getField(WeatherConditionsTemperatureFeelsLikeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the relativeHumidity field. Returns null if the field is not defined in the message.
  int? get relativeHumidity {
    final field = getField(WeatherConditionsRelativeHumidityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the relativeHumidity field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set relativeHumidity(int? value) {
    final field = getField(WeatherConditionsRelativeHumidityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the location field. Returns null if the field is not defined in the message.
  String? get location {
    final field = getField(WeatherConditionsLocationField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the location field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set location(String? value) {
    final field = getField(WeatherConditionsLocationField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the timestamp field in  milliseconds since January 1st, 1970 at 00:00:00 UTC
  int? get observedAtTime {
    final field = getField(WeatherConditionsObservedAtTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the timestamp field. [value] is milliseconds since January 1st, 1970 at 00:00:00 UTC. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set observedAtTime(int? value) {
    final field = getField(WeatherConditionsObservedAtTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the observedLocationLat field. Returns null if the field is not defined in the message.
  double? get observedLocationLat {
    final field = getField(WeatherConditionsObservedLocationLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the observedLocationLat field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set observedLocationLat(double? value) {
    final field = getField(WeatherConditionsObservedLocationLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the observedLocationLong field. Returns null if the field is not defined in the message.
  double? get observedLocationLong {
    final field = getField(WeatherConditionsObservedLocationLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the observedLocationLong field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set observedLocationLong(double? value) {
    final field = getField(WeatherConditionsObservedLocationLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the dayOfWeek field. Returns null if the field is not defined in the message.
  DayOfWeek? get dayOfWeek {
    final field = getField(WeatherConditionsDayOfWeekField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DayOfWeekExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the dayOfWeek field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set dayOfWeek(DayOfWeek? value) {
    final field = getField(WeatherConditionsDayOfWeekField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the highTemperature field. Returns null if the field is not defined in the message.
  int? get highTemperature {
    final field = getField(WeatherConditionsHighTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the highTemperature field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set highTemperature(int? value) {
    final field = getField(WeatherConditionsHighTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the lowTemperature field. Returns null if the field is not defined in the message.
  int? get lowTemperature {
    final field = getField(WeatherConditionsLowTemperatureField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the lowTemperature field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set lowTemperature(int? value) {
    final field = getField(WeatherConditionsLowTemperatureField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class WeatherConditionsWeatherReportField extends Field {
  WeatherConditionsWeatherReportField({int size = 0, bool growable = true})
      : super(
            name: 'weather_report',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class WeatherConditionsTemperatureField extends Field {
  WeatherConditionsTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class WeatherConditionsConditionField extends Field {
  WeatherConditionsConditionField({int size = 0, bool growable = true})
      : super(
            name: 'condition',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class WeatherConditionsWindDirectionField extends Field {
  WeatherConditionsWindDirectionField({int size = 0, bool growable = true})
      : super(
            name: 'wind_direction',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class WeatherConditionsWindSpeedField extends Field {
  WeatherConditionsWindSpeedField({int size = 0, bool growable = true})
      : super(
            name: 'wind_speed',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm/s',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class WeatherConditionsPrecipitationProbabilityField extends Field {
  WeatherConditionsPrecipitationProbabilityField(
      {int size = 0, bool growable = true})
      : super(
            name: 'precipitation_probability',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class WeatherConditionsTemperatureFeelsLikeField extends Field {
  WeatherConditionsTemperatureFeelsLikeField(
      {int size = 0, bool growable = true})
      : super(
            name: 'temperature_feels_like',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class WeatherConditionsRelativeHumidityField extends Field {
  WeatherConditionsRelativeHumidityField({int size = 0, bool growable = true})
      : super(
            name: 'relative_humidity',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class WeatherConditionsLocationField extends Field {
  WeatherConditionsLocationField({int size = 0, bool growable = true})
      : super(
            name: 'location',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class WeatherConditionsObservedAtTimeField extends Field {
  WeatherConditionsObservedAtTimeField({int size = 0, bool growable = true})
      : super(
            name: 'observed_at_time',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class WeatherConditionsObservedLocationLatField extends Field {
  WeatherConditionsObservedLocationLatField(
      {int size = 0, bool growable = true})
      : super(
            name: 'observed_location_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class WeatherConditionsObservedLocationLongField extends Field {
  WeatherConditionsObservedLocationLongField(
      {int size = 0, bool growable = true})
      : super(
            name: 'observed_location_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class WeatherConditionsDayOfWeekField extends Field {
  WeatherConditionsDayOfWeekField({int size = 0, bool growable = true})
      : super(
            name: 'day_of_week',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class WeatherConditionsHighTemperatureField extends Field {
  WeatherConditionsHighTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'high_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class WeatherConditionsLowTemperatureField extends Field {
  WeatherConditionsLowTemperatureField({int size = 0, bool growable = true})
      : super(
            name: 'low_temperature',
            id: ID,
            type: BaseType.SINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'C',
            mainTypeName: '',
            growable: growable,
            subFields: []);

  static const ID = 14;
}
