/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class SegmentPointMessage extends DataMessage {

   SegmentPointMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: SegmentPointMessage.NAME,
            globalId: SegmentPointMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage?.getFieldDefinition(MessageIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentPointPositionLatField(
                  size: definitionMessage?.getFieldDefinition(SegmentPointPositionLatField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentPointPositionLongField(
                  size: definitionMessage?.getFieldDefinition(SegmentPointPositionLongField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentPointDistanceField(
                  size: definitionMessage?.getFieldDefinition(SegmentPointDistanceField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentPointAltitudeField(
                  size: definitionMessage?.getFieldDefinition(SegmentPointAltitudeField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              SegmentPointLeaderTimeField(
                  size: definitionMessage?.getFieldDefinition(SegmentPointLeaderTimeField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 150;
  static const NAME = 'segment_point';

  final bool growable;

  static SegmentPointMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = SegmentPointMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  int? get messageIndex {
     final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get positionLat {
     final field = getField(SegmentPointPositionLatField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set positionLat(double? value) {
    final field = getField(SegmentPointPositionLatField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get positionLong {
     final field = getField(SegmentPointPositionLongField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set positionLong(double? value) {
    final field = getField(SegmentPointPositionLongField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get distance {
     final field = getField(SegmentPointDistanceField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set distance(double? value) {
    final field = getField(SegmentPointDistanceField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get altitude {
     final field = getField(SegmentPointAltitudeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set altitude(double? value) {
    final field = getField(SegmentPointAltitudeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get leaderTime {
     final field = getField(SegmentPointLeaderTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set leaderTime(double? value) {
    final field = getField(SegmentPointLeaderTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class SegmentPointPositionLatField extends Field {
 SegmentPointPositionLatField({int size = 0, bool growable = true})
      : super(
            name: 'position_lat',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class SegmentPointPositionLongField extends Field {
 SegmentPointPositionLongField({int size = 0, bool growable = true})
      : super(
            name: 'position_long',
            id: ID,
            type: BaseType.SINT32,
            offset: 0,
            scale: 11930464.711111112,
            size: size,
            units: 'degrees',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class SegmentPointDistanceField extends Field {
 SegmentPointDistanceField({int size = 0, bool growable = true})
      : super(
            name: 'distance',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}
class SegmentPointAltitudeField extends Field {
 SegmentPointAltitudeField({int size = 0, bool growable = true})
      : super(
            name: 'altitude',
            id: ID,
            type: BaseType.UINT16,
            offset: 500,
            scale: 5,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 4;
}
class SegmentPointLeaderTimeField extends Field {
 SegmentPointLeaderTimeField({int size = 0, bool growable = true})
      : super(
            name: 'leader_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 5;
}