/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class DiveSummaryMessage extends DataMessage {

   DiveSummaryMessage(
      {definitionMessage, developerFields, int localId = 0, Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: DiveSummaryMessage.NAME,
            globalId: DiveSummaryMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              TimestampField(
                  size: definitionMessage?.getFieldDefinition(TimestampField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryReferenceMesgField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryReferenceMesgField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryReferenceIndexField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryReferenceIndexField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryAvgDepthField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryAvgDepthField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryMaxDepthField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryMaxDepthField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummarySurfaceIntervalField(
                  size: definitionMessage?.getFieldDefinition(DiveSummarySurfaceIntervalField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryStartCnsField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryStartCnsField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryEndCnsField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryEndCnsField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryStartN2Field(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryStartN2Field.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryEndN2Field(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryEndN2Field.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryO2ToxicityField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryO2ToxicityField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryDiveNumberField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryDiveNumberField.ID)?.size ?? 0,
                  growable: definitionMessage == null),
              DiveSummaryBottomTimeField(
                  size: definitionMessage?.getFieldDefinition(DiveSummaryBottomTimeField.ID)?.size ?? 0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 268;
  static const NAME = 'dive_summary';

  final bool growable;

  static DiveSummaryMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = DiveSummaryMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }


  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timestamp {
     final field = getField(TimestampField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
   set timestamp(int? value) {
    final field = getField(TimestampField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get referenceMesg {
     final field = getField(DiveSummaryReferenceMesgField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set referenceMesg(int? value) {
    final field = getField(DiveSummaryReferenceMesgField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get referenceIndex {
     final field = getField(DiveSummaryReferenceIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set referenceIndex(int? value) {
    final field = getField(DiveSummaryReferenceIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get avgDepth {
     final field = getField(DiveSummaryAvgDepthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set avgDepth(double? value) {
    final field = getField(DiveSummaryAvgDepthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get maxDepth {
     final field = getField(DiveSummaryMaxDepthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set maxDepth(double? value) {
    final field = getField(DiveSummaryMaxDepthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get surfaceInterval {
     final field = getField(DiveSummarySurfaceIntervalField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set surfaceInterval(int? value) {
    final field = getField(DiveSummarySurfaceIntervalField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get startCns {
     final field = getField(DiveSummaryStartCnsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set startCns(int? value) {
    final field = getField(DiveSummaryStartCnsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get endCns {
     final field = getField(DiveSummaryEndCnsField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set endCns(int? value) {
    final field = getField(DiveSummaryEndCnsField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get startN2 {
     final field = getField(DiveSummaryStartN2Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set startN2(int? value) {
    final field = getField(DiveSummaryStartN2Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get endN2 {
     final field = getField(DiveSummaryEndN2Field.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set endN2(int? value) {
    final field = getField(DiveSummaryEndN2Field.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get o2Toxicity {
     final field = getField(DiveSummaryO2ToxicityField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set o2Toxicity(int? value) {
    final field = getField(DiveSummaryO2ToxicityField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  int? get diveNumber {
     final field = getField(DiveSummaryDiveNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set diveNumber(int? value) {
    final field = getField(DiveSummaryDiveNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
  double? get bottomTime {
     final field = getField(DiveSummaryBottomTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }
   set bottomTime(double? value) {
    final field = getField(DiveSummaryBottomTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }



}



class DiveSummaryReferenceMesgField extends Field {
 DiveSummaryReferenceMesgField({int size = 0, bool growable = true})
      : super(
            name: 'reference_mesg',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 0;
}
class DiveSummaryReferenceIndexField extends Field {
 DiveSummaryReferenceIndexField({int size = 0, bool growable = true})
      : super(
            name: 'reference_index',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 1;
}
class DiveSummaryAvgDepthField extends Field {
 DiveSummaryAvgDepthField({int size = 0, bool growable = true})
      : super(
            name: 'avg_depth',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 2;
}
class DiveSummaryMaxDepthField extends Field {
 DiveSummaryMaxDepthField({int size = 0, bool growable = true})
      : super(
            name: 'max_depth',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 3;
}
class DiveSummarySurfaceIntervalField extends Field {
 DiveSummarySurfaceIntervalField({int size = 0, bool growable = true})
      : super(
            name: 'surface_interval',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 4;
}
class DiveSummaryStartCnsField extends Field {
 DiveSummaryStartCnsField({int size = 0, bool growable = true})
      : super(
            name: 'start_cns',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 5;
}
class DiveSummaryEndCnsField extends Field {
 DiveSummaryEndCnsField({int size = 0, bool growable = true})
      : super(
            name: 'end_cns',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 6;
}
class DiveSummaryStartN2Field extends Field {
 DiveSummaryStartN2Field({int size = 0, bool growable = true})
      : super(
            name: 'start_n2',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 7;
}
class DiveSummaryEndN2Field extends Field {
 DiveSummaryEndN2Field({int size = 0, bool growable = true})
      : super(
            name: 'end_n2',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'percent',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 8;
}
class DiveSummaryO2ToxicityField extends Field {
 DiveSummaryO2ToxicityField({int size = 0, bool growable = true})
      : super(
            name: 'o2_toxicity',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            units: 'OTUs',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 9;
}
class DiveSummaryDiveNumberField extends Field {
 DiveSummaryDiveNumberField({int size = 0, bool growable = true})
      : super(
            name: 'dive_number',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 10;
}
class DiveSummaryBottomTimeField extends Field {
 DiveSummaryBottomTimeField({int size = 0, bool growable = true})
      : super(
            name: 'bottom_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1000,
            size: size,
            units: 's',
            mainTypeName: '',
            growable: growable,
            subFields: [
            ]
 );

  static const ID = 11;
}