/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../errors.dart';
import '../../field.dart';

class DeveloperDataIdMessage extends DataMessage {
  DeveloperDataIdMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: DeveloperDataIdMessage.NAME,
            globalId: DeveloperDataIdMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              DeveloperDataIdDeveloperIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeveloperDataIdDeveloperIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeveloperDataIdApplicationIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeveloperDataIdApplicationIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeveloperDataIdManufacturerIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeveloperDataIdManufacturerIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeveloperDataIdDeveloperDataIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeveloperDataIdDeveloperDataIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              DeveloperDataIdApplicationVersionField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              DeveloperDataIdApplicationVersionField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 207;
  static const NAME = 'developer_data_id';

  final bool growable;

  /// Returns an instance of DeveloperDataIdMessage from a bytes list.
  static DeveloperDataIdMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message =
        DeveloperDataIdMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the developerId field. Returns null if the field is not defined in the message.
  int? get developerId {
    final field = getField(DeveloperDataIdDeveloperIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the developerId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set developerId(int? value) {
    final field = getField(DeveloperDataIdDeveloperIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the applicationId field. Returns null if the field is not defined in the message.
  int? get applicationId {
    final field = getField(DeveloperDataIdApplicationIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the applicationId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set applicationId(int? value) {
    final field = getField(DeveloperDataIdApplicationIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the manufacturerId field. Returns null if the field is not defined in the message.
  int? get manufacturerId {
    final field = getField(DeveloperDataIdManufacturerIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the manufacturerId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set manufacturerId(int? value) {
    final field = getField(DeveloperDataIdManufacturerIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the developerDataIndex field. Returns null if the field is not defined in the message.
  int? get developerDataIndex {
    final field = getField(DeveloperDataIdDeveloperDataIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the developerDataIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set developerDataIndex(int? value) {
    final field = getField(DeveloperDataIdDeveloperDataIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }

  /// Returns the value of the applicationVersion field. Returns null if the field is not defined in the message.
  int? get applicationVersion {
    final field = getField(DeveloperDataIdApplicationVersionField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the applicationVersion field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set applicationVersion(int? value) {
    final field = getField(DeveloperDataIdApplicationVersionField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError('${field!.name}');
    }
  }
}

class DeveloperDataIdDeveloperIdField extends Field {
  DeveloperDataIdDeveloperIdField({int size = 0, bool growable = true})
      : super(
            name: 'developer_id',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class DeveloperDataIdApplicationIdField extends Field {
  DeveloperDataIdApplicationIdField({int size = 0, bool growable = true})
      : super(
            name: 'application_id',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class DeveloperDataIdManufacturerIdField extends Field {
  DeveloperDataIdManufacturerIdField({int size = 0, bool growable = true})
      : super(
            name: 'manufacturer_id',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class DeveloperDataIdDeveloperDataIndexField extends Field {
  DeveloperDataIdDeveloperDataIndexField({int size = 0, bool growable = true})
      : super(
            name: 'developer_data_index',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class DeveloperDataIdApplicationVersionField extends Field {
  DeveloperDataIdApplicationVersionField({int size = 0, bool growable = true})
      : super(
            name: 'application_version',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 4;
}
