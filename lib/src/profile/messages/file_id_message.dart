/// Autogenerated. Do not modify.
///
/// Profile: 21.60
import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import 'common_fields.dart';

class FileIdMessage extends DataMessage {
  FileIdMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: FileIdMessage.NAME,
            globalId: FileIdMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              FileIdTypeField(
                  size: definitionMessage
                          ?.getFieldDefinition(FileIdTypeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FileIdManufacturerField(
                  size: definitionMessage
                          ?.getFieldDefinition(FileIdManufacturerField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FileIdProductField(
                  size: definitionMessage
                          ?.getFieldDefinition(FileIdProductField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FileIdSerialNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(FileIdSerialNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FileIdTimeCreatedField(
                  size: definitionMessage
                          ?.getFieldDefinition(FileIdTimeCreatedField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FileIdNumberField(
                  size: definitionMessage
                          ?.getFieldDefinition(FileIdNumberField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              FileIdProductNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(FileIdProductNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  static const ID = 0;
  static const NAME = 'file_id';

  final bool growable;

  static FileIdMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = FileIdMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  FileType? get type {
    final field = getField(FileIdTypeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return FileTypeExt.fromValue(value);
    } else {
      return null;
    }
  }

  set type(FileType? value) {
    final field = getField(FileIdTypeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    }
  }

  int? get manufacturer {
    final field = getField(FileIdManufacturerField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set manufacturer(int? value) {
    final field = getField(FileIdManufacturerField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get product {
    final field = getField(FileIdProductField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set product(int? value) {
    final field = getField(FileIdProductField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get faveroProduct {
    final field = getField(FileIdProductField.ID);
    final typeField = getField(FileIdManufacturerField.ID);

    final isSubFieldValid =
        typeField != null && [263].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set faveroProduct(int? value) {
    final field = getField(FileIdProductField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get garminProduct {
    final field = getField(FileIdProductField.ID);
    final typeField = getField(FileIdManufacturerField.ID);

    final isSubFieldValid =
        typeField != null && [1, 15, 13, 89].contains(typeField.getValue());
    if (field != null && field.isValid() && isSubFieldValid) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set garminProduct(int? value) {
    final field = getField(FileIdProductField.ID);
    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get serialNumber {
    final field = getField(FileIdSerialNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set serialNumber(int? value) {
    final field = getField(FileIdSerialNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  int? get timeCreated {
    final field = getField(FileIdTimeCreatedField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  // timestamp : milliseconds from January 1st, 1970 at 00:00:00 UTC
  set timeCreated(int? value) {
    final field = getField(FileIdTimeCreatedField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  int? get number {
    final field = getField(FileIdNumberField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set number(int? value) {
    final field = getField(FileIdNumberField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }

  String? get productName {
    final field = getField(FileIdProductNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  set productName(String? value) {
    final field = getField(FileIdProductNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    }
  }
}

class FileIdTypeField extends Field {
  FileIdTypeField({int size = 0, bool growable = true})
      : super(
            name: 'type',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class FileIdManufacturerField extends Field {
  FileIdManufacturerField({int size = 0, bool growable = true})
      : super(
            name: 'manufacturer',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class FileIdProductField extends Field {
  FileIdProductField({int size = 0, bool growable = true})
      : super(
            name: 'product',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: [
              SubField(
                  name: 'favero_product',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    FileIdManufacturerField.ID: [263]
                  }),
              SubField(
                  name: 'garmin_product',
                  type: BaseType.UINT16,
                  scale: 1,
                  offset: 0,
                  referenceMap: {
                    FileIdManufacturerField.ID: [1, 15, 13, 89]
                  })
            ]);

  static const ID = 2;
}

class FileIdSerialNumberField extends Field {
  FileIdSerialNumberField({int size = 0, bool growable = true})
      : super(
            name: 'serial_number',
            id: ID,
            type: BaseType.UINT32Z,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class FileIdTimeCreatedField extends Field {
  FileIdTimeCreatedField({int size = 0, bool growable = true})
      : super(
            name: 'time_created',
            id: ID,
            type: BaseType.UINT32,
            offset: -631065600000,
            scale: 0.001,
            size: size,
            units: 'ms',
            mainTypeName: 'date_time',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class FileIdNumberField extends Field {
  FileIdNumberField({int size = 0, bool growable = true})
      : super(
            name: 'number',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class FileIdProductNameField extends Field {
  FileIdProductNameField({int size = 0, bool growable = true})
      : super(
            name: 'product_name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 8;
}
