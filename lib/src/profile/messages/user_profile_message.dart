/// Autogenerated. Do not modify.
///
/// Profile: 21.60

import 'dart:typed_data';

import '../../base_type.dart';
import '../../data_message.dart';
import '../../definition_message.dart';
import '../../field.dart';
import '../../sub_field.dart';
import '../profile_type.dart';
import '../../errors.dart';
import 'common_fields.dart';

// ignore_for_file: constant_identifier_names

class UserProfileMessage extends DataMessage {
  UserProfileMessage(
      {definitionMessage,
      developerFields,
      int localId = 0,
      Endian endian = Endian.little})
      : growable = definitionMessage == null,
        super(
            name: UserProfileMessage.NAME,
            globalId: UserProfileMessage.ID,
            localId: definitionMessage?.localId ?? localId,
            endian: definitionMessage?.endian ?? endian,
            definitionMessage: definitionMessage,
            developerFields: developerFields,
            fields: [
              MessageIndexField(
                  size: definitionMessage
                          ?.getFieldDefinition(MessageIndexField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileFriendlyNameField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileFriendlyNameField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileGenderField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileGenderField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileAgeField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileAgeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileHeightField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileHeightField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileWeightField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileWeightField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileLanguageField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileLanguageField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileElevSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileElevSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileWeightSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileWeightSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileRestingHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfileRestingHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileDefaultMaxRunningHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfileDefaultMaxRunningHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileDefaultMaxBikingHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfileDefaultMaxBikingHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileDefaultMaxHeartRateField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfileDefaultMaxHeartRateField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileHrSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileHrSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileSpeedSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileSpeedSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileDistSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileDistSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfilePowerSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfilePowerSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileActivityClassField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileActivityClassField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfilePositionSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfilePositionSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileTemperatureSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfileTemperatureSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileLocalIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileLocalIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileGlobalIdField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileGlobalIdField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileWakeTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileWakeTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileSleepTimeField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileSleepTimeField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileHeightSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileHeightSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileUserRunningStepLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfileUserRunningStepLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileUserWalkingStepLengthField(
                  size: definitionMessage
                          ?.getFieldDefinition(
                              UserProfileUserWalkingStepLengthField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileDepthSettingField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileDepthSettingField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null),
              UserProfileDiveCountField(
                  size: definitionMessage
                          ?.getFieldDefinition(UserProfileDiveCountField.ID)
                          ?.size ??
                      0,
                  growable: definitionMessage == null)
            ]);

  /// The Global ID of the message. In the FIT documentation this is referred to as the "Global Message Number".
  static const ID = 3;
  static const NAME = 'user_profile';

  final bool growable;

  /// Returns an instance of UserProfileMessage from a bytes list.
  static UserProfileMessage fromBytes(
      DefinitionMessage definitionMessage, Uint8List bytes) {
    final message = UserProfileMessage(definitionMessage: definitionMessage);
    message.readFromBytes(bytes);
    return message;
  }

  /// Returns the value of the messageIndex field. Returns null if the field is not defined in the message.
  int? get messageIndex {
    final field = getField(MessageIndexField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the messageIndex field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set messageIndex(int? value) {
    final field = getField(MessageIndexField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the friendlyName field. Returns null if the field is not defined in the message.
  String? get friendlyName {
    final field = getField(UserProfileFriendlyNameField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the friendlyName field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set friendlyName(String? value) {
    final field = getField(UserProfileFriendlyNameField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the gender field. Returns null if the field is not defined in the message.
  Gender? get gender {
    final field = getField(UserProfileGenderField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return GenderExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the gender field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set gender(Gender? value) {
    final field = getField(UserProfileGenderField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the age field. Returns null if the field is not defined in the message.
  int? get age {
    final field = getField(UserProfileAgeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the age field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set age(int? value) {
    final field = getField(UserProfileAgeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the height field. Returns null if the field is not defined in the message.
  double? get height {
    final field = getField(UserProfileHeightField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the height field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set height(double? value) {
    final field = getField(UserProfileHeightField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the weight field. Returns null if the field is not defined in the message.
  double? get weight {
    final field = getField(UserProfileWeightField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the weight field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set weight(double? value) {
    final field = getField(UserProfileWeightField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the language field. Returns null if the field is not defined in the message.
  Language? get language {
    final field = getField(UserProfileLanguageField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return LanguageExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the language field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set language(Language? value) {
    final field = getField(UserProfileLanguageField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the elevSetting field. Returns null if the field is not defined in the message.
  DisplayMeasure? get elevSetting {
    final field = getField(UserProfileElevSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the elevSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set elevSetting(DisplayMeasure? value) {
    final field = getField(UserProfileElevSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the weightSetting field. Returns null if the field is not defined in the message.
  DisplayMeasure? get weightSetting {
    final field = getField(UserProfileWeightSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the weightSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set weightSetting(DisplayMeasure? value) {
    final field = getField(UserProfileWeightSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the restingHeartRate field. Returns null if the field is not defined in the message.
  int? get restingHeartRate {
    final field = getField(UserProfileRestingHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the restingHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set restingHeartRate(int? value) {
    final field = getField(UserProfileRestingHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the defaultMaxRunningHeartRate field. Returns null if the field is not defined in the message.
  int? get defaultMaxRunningHeartRate {
    final field = getField(UserProfileDefaultMaxRunningHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the defaultMaxRunningHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set defaultMaxRunningHeartRate(int? value) {
    final field = getField(UserProfileDefaultMaxRunningHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the defaultMaxBikingHeartRate field. Returns null if the field is not defined in the message.
  int? get defaultMaxBikingHeartRate {
    final field = getField(UserProfileDefaultMaxBikingHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the defaultMaxBikingHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set defaultMaxBikingHeartRate(int? value) {
    final field = getField(UserProfileDefaultMaxBikingHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the defaultMaxHeartRate field. Returns null if the field is not defined in the message.
  int? get defaultMaxHeartRate {
    final field = getField(UserProfileDefaultMaxHeartRateField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the defaultMaxHeartRate field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set defaultMaxHeartRate(int? value) {
    final field = getField(UserProfileDefaultMaxHeartRateField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the hrSetting field. Returns null if the field is not defined in the message.
  DisplayHeart? get hrSetting {
    final field = getField(UserProfileHrSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayHeartExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the hrSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set hrSetting(DisplayHeart? value) {
    final field = getField(UserProfileHrSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the speedSetting field. Returns null if the field is not defined in the message.
  DisplayMeasure? get speedSetting {
    final field = getField(UserProfileSpeedSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the speedSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set speedSetting(DisplayMeasure? value) {
    final field = getField(UserProfileSpeedSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the distSetting field. Returns null if the field is not defined in the message.
  DisplayMeasure? get distSetting {
    final field = getField(UserProfileDistSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the distSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set distSetting(DisplayMeasure? value) {
    final field = getField(UserProfileDistSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the powerSetting field. Returns null if the field is not defined in the message.
  DisplayPower? get powerSetting {
    final field = getField(UserProfilePowerSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayPowerExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the powerSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set powerSetting(DisplayPower? value) {
    final field = getField(UserProfilePowerSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the activityClass field. Returns null if the field is not defined in the message.
  ActivityClass? get activityClass {
    final field = getField(UserProfileActivityClassField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return ActivityClassExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the activityClass field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set activityClass(ActivityClass? value) {
    final field = getField(UserProfileActivityClassField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the positionSetting field. Returns null if the field is not defined in the message.
  DisplayPosition? get positionSetting {
    final field = getField(UserProfilePositionSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayPositionExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the positionSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set positionSetting(DisplayPosition? value) {
    final field = getField(UserProfilePositionSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the temperatureSetting field. Returns null if the field is not defined in the message.
  DisplayMeasure? get temperatureSetting {
    final field = getField(UserProfileTemperatureSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the temperatureSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set temperatureSetting(DisplayMeasure? value) {
    final field = getField(UserProfileTemperatureSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the userProfileLocalId field. Returns null if the field is not defined in the message.
  int? get userProfileLocalId {
    final field = getField(UserProfileLocalIdField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the userProfileLocalId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set userProfileLocalId(int? value) {
    final field = getField(UserProfileLocalIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the userProfileGlobalId field. Returns null if the field is not defined in the message.
  Uint8List? get userProfileGlobalId {
    final field = getField(UserProfileGlobalIdField.ID);
    if (field != null && field.isValid()) {
      return field.getValues();
    } else {
      return null;
    }
  }

  /// Sets the userProfileGlobalId field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set userProfileGlobalId(Uint8List? value) {
    final field = getField(UserProfileGlobalIdField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        final values = value;
        field.setValues(values);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the wakeTime field. Returns null if the field is not defined in the message.
  int? get wakeTime {
    final field = getField(UserProfileWakeTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the wakeTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set wakeTime(int? value) {
    final field = getField(UserProfileWakeTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the sleepTime field. Returns null if the field is not defined in the message.
  int? get sleepTime {
    final field = getField(UserProfileSleepTimeField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the sleepTime field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set sleepTime(int? value) {
    final field = getField(UserProfileSleepTimeField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the heightSetting field. Returns null if the field is not defined in the message.
  DisplayMeasure? get heightSetting {
    final field = getField(UserProfileHeightSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the heightSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set heightSetting(DisplayMeasure? value) {
    final field = getField(UserProfileHeightSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the userRunningStepLength field. Returns null if the field is not defined in the message.
  double? get userRunningStepLength {
    final field = getField(UserProfileUserRunningStepLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the userRunningStepLength field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set userRunningStepLength(double? value) {
    final field = getField(UserProfileUserRunningStepLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the userWalkingStepLength field. Returns null if the field is not defined in the message.
  double? get userWalkingStepLength {
    final field = getField(UserProfileUserWalkingStepLengthField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the userWalkingStepLength field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set userWalkingStepLength(double? value) {
    final field = getField(UserProfileUserWalkingStepLengthField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the depthSetting field. Returns null if the field is not defined in the message.
  DisplayMeasure? get depthSetting {
    final field = getField(UserProfileDepthSettingField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      final value = field.getValue(subField: subField);
      if (value == null) {
        return null;
      }
      return DisplayMeasureExt.fromValue(value);
    } else {
      return null;
    }
  }

  /// Sets the depthSetting field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set depthSetting(DisplayMeasure? value) {
    final field = getField(UserProfileDepthSettingField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value.value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }

  /// Returns the value of the diveCount field. Returns null if the field is not defined in the message.
  int? get diveCount {
    final field = getField(UserProfileDiveCountField.ID);
    if (field != null && field.isValid()) {
      var subField = field.getValidSubField(fields);
      return field.getValue(subField: subField);
    } else {
      return null;
    }
  }

  /// Sets the diveCount field with [value]. Throws [FieldNotDefinedError] if the field is not defined in the message.
  set diveCount(int? value) {
    final field = getField(UserProfileDiveCountField.ID);

    if (field != null) {
      if (value == null) {
        field.clear();
      } else {
        var subField = field.getValidSubField(fields);
        field.setValue(0, value, subField);
      }
    } else {
      throw FieldNotDefinedError(field!.name);
    }
  }
}

class UserProfileFriendlyNameField extends Field {
  UserProfileFriendlyNameField({int size = 0, bool growable = true})
      : super(
            name: 'friendly_name',
            id: ID,
            type: BaseType.STRING,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 0;
}

class UserProfileGenderField extends Field {
  UserProfileGenderField({int size = 0, bool growable = true})
      : super(
            name: 'gender',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 1;
}

class UserProfileAgeField extends Field {
  UserProfileAgeField({int size = 0, bool growable = true})
      : super(
            name: 'age',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'years',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 2;
}

class UserProfileHeightField extends Field {
  UserProfileHeightField({int size = 0, bool growable = true})
      : super(
            name: 'height',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 100,
            size: size,
            units: 'm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 3;
}

class UserProfileWeightField extends Field {
  UserProfileWeightField({int size = 0, bool growable = true})
      : super(
            name: 'weight',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 10,
            size: size,
            units: 'kg',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 4;
}

class UserProfileLanguageField extends Field {
  UserProfileLanguageField({int size = 0, bool growable = true})
      : super(
            name: 'language',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 5;
}

class UserProfileElevSettingField extends Field {
  UserProfileElevSettingField({int size = 0, bool growable = true})
      : super(
            name: 'elev_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 6;
}

class UserProfileWeightSettingField extends Field {
  UserProfileWeightSettingField({int size = 0, bool growable = true})
      : super(
            name: 'weight_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 7;
}

class UserProfileRestingHeartRateField extends Field {
  UserProfileRestingHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'resting_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 8;
}

class UserProfileDefaultMaxRunningHeartRateField extends Field {
  UserProfileDefaultMaxRunningHeartRateField(
      {int size = 0, bool growable = true})
      : super(
            name: 'default_max_running_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 9;
}

class UserProfileDefaultMaxBikingHeartRateField extends Field {
  UserProfileDefaultMaxBikingHeartRateField(
      {int size = 0, bool growable = true})
      : super(
            name: 'default_max_biking_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 10;
}

class UserProfileDefaultMaxHeartRateField extends Field {
  UserProfileDefaultMaxHeartRateField({int size = 0, bool growable = true})
      : super(
            name: 'default_max_heart_rate',
            id: ID,
            type: BaseType.UINT8,
            offset: 0,
            scale: 1,
            size: size,
            units: 'bpm',
            mainTypeName: 'uint8',
            growable: growable,
            subFields: []);

  static const ID = 11;
}

class UserProfileHrSettingField extends Field {
  UserProfileHrSettingField({int size = 0, bool growable = true})
      : super(
            name: 'hr_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 12;
}

class UserProfileSpeedSettingField extends Field {
  UserProfileSpeedSettingField({int size = 0, bool growable = true})
      : super(
            name: 'speed_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 13;
}

class UserProfileDistSettingField extends Field {
  UserProfileDistSettingField({int size = 0, bool growable = true})
      : super(
            name: 'dist_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 14;
}

class UserProfilePowerSettingField extends Field {
  UserProfilePowerSettingField({int size = 0, bool growable = true})
      : super(
            name: 'power_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 16;
}

class UserProfileActivityClassField extends Field {
  UserProfileActivityClassField({int size = 0, bool growable = true})
      : super(
            name: 'activity_class',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 17;
}

class UserProfilePositionSettingField extends Field {
  UserProfilePositionSettingField({int size = 0, bool growable = true})
      : super(
            name: 'position_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 18;
}

class UserProfileTemperatureSettingField extends Field {
  UserProfileTemperatureSettingField({int size = 0, bool growable = true})
      : super(
            name: 'temperature_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 21;
}

class UserProfileLocalIdField extends Field {
  UserProfileLocalIdField({int size = 0, bool growable = true})
      : super(
            name: 'local_id',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 22;
}

class UserProfileGlobalIdField extends Field {
  UserProfileGlobalIdField({int size = 0, bool growable = true})
      : super(
            name: 'global_id',
            id: ID,
            type: BaseType.BYTE,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 23;
}

class UserProfileWakeTimeField extends Field {
  UserProfileWakeTimeField({int size = 0, bool growable = true})
      : super(
            name: 'wake_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 28;
}

class UserProfileSleepTimeField extends Field {
  UserProfileSleepTimeField({int size = 0, bool growable = true})
      : super(
            name: 'sleep_time',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 29;
}

class UserProfileHeightSettingField extends Field {
  UserProfileHeightSettingField({int size = 0, bool growable = true})
      : super(
            name: 'height_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 30;
}

class UserProfileUserRunningStepLengthField extends Field {
  UserProfileUserRunningStepLengthField({int size = 0, bool growable = true})
      : super(
            name: 'user_running_step_length',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 31;
}

class UserProfileUserWalkingStepLengthField extends Field {
  UserProfileUserWalkingStepLengthField({int size = 0, bool growable = true})
      : super(
            name: 'user_walking_step_length',
            id: ID,
            type: BaseType.UINT16,
            offset: 0,
            scale: 1000,
            size: size,
            units: 'm',
            mainTypeName: 'uint16',
            growable: growable,
            subFields: []);

  static const ID = 32;
}

class UserProfileDepthSettingField extends Field {
  UserProfileDepthSettingField({int size = 0, bool growable = true})
      : super(
            name: 'depth_setting',
            id: ID,
            type: BaseType.ENUM,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 47;
}

class UserProfileDiveCountField extends Field {
  UserProfileDiveCountField({int size = 0, bool growable = true})
      : super(
            name: 'dive_count',
            id: ID,
            type: BaseType.UINT32,
            offset: 0,
            scale: 1,
            size: size,
            growable: growable,
            subFields: []);

  static const ID = 49;
}
